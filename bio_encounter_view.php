<?php
// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

	$currDir = dirname(__FILE__);
	include_once("{$currDir}/lib.php");
	@include_once("{$currDir}/hooks/bio_encounter.php");
	include_once("{$currDir}/bio_encounter_dml.php");

	// mm: can the current member access this page?
	$perm = getTablePermissions('bio_encounter');
	if(!$perm['access']) {
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout(function() { window.location = "index.php?signOut=1"; }, 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = 'bio_encounter';

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV = [
		"`bio_encounter`.`id`" => "id",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent A */" => "authorA",
		"IF(    CHAR_LENGTH(`game_agent2`.`last_name`) || CHAR_LENGTH(`game_agent2`.`first_name`), CONCAT_WS('',   `game_agent2`.`last_name`, ', ', `game_agent2`.`first_name`), '') /* Agent name A */" => "author_nameA",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography A */" => "bibliographyA",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript A */" => "transcriptA",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token_sequence`) || CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token_sequence`, '   ', `biblio_token1`.`token`), '') /* Token A */" => "tokenA",
		"IF(    CHAR_LENGTH(`bio_chr_scene1`.`id`) || CHAR_LENGTH(`bio_chr_scene1`.`scene`), CONCAT_WS('',   `bio_chr_scene1`.`id`, '   ', `bio_chr_scene1`.`scene`), '') /* Scene A */" => "sceneA",
		"IF(    CHAR_LENGTH(`game_agent3`.`id`) || CHAR_LENGTH(`game_agent3`.`memberID`), CONCAT_WS('',   `game_agent3`.`id`, '   ', `game_agent3`.`memberID`), '') /* Agent B */" => "authorB",
		"IF(    CHAR_LENGTH(`game_agent4`.`last_name`) || CHAR_LENGTH(`game_agent4`.`first_name`), CONCAT_WS('',   `game_agent4`.`last_name`, ', ', `game_agent4`.`first_name`), '') /* Agent name B */" => "authornameB",
		"IF(    CHAR_LENGTH(`biblio_doc3`.`id`) || CHAR_LENGTH(`biblio_doc3`.`title`), CONCAT_WS('',   `biblio_doc3`.`id`, '   ', `biblio_doc3`.`title`), '') /* Bibliography B */" => "bibliographyB",
		"IF(    CHAR_LENGTH(`biblio_transcript2`.`id`) || CHAR_LENGTH(`biblio_transcript2`.`transcript_title`), CONCAT_WS('',   `biblio_transcript2`.`id`, '   ', `biblio_transcript2`.`transcript_title`), '') /* Transcript B */" => "transcriptB",
		"IF(    CHAR_LENGTH(`biblio_token2`.`token_sequence`) || CHAR_LENGTH(`biblio_token2`.`token`), CONCAT_WS('',   `biblio_token2`.`token_sequence`, '   ', `biblio_token2`.`token`), '') /* Token B */" => "tokenB",
		"IF(    CHAR_LENGTH(`bio_chr_scene2`.`id`) || CHAR_LENGTH(`bio_chr_scene2`.`scene`), CONCAT_WS('',   `bio_chr_scene2`.`id`, '   ', `bio_chr_scene2`.`scene`), '') /* Scene B */" => "sceneB",
		"`bio_encounter`.`relation_description`" => "relation_description",
		"`bio_encounter`.`type`" => "type",
		"`bio_encounter`.`conflicttype`" => "conflicttype",
		"`bio_encounter`.`story_scene`" => "story_scene",
		"`bio_encounter`.`nd_color`" => "nd_color",
		"`bio_encounter`.`nd_width`" => "nd_width",
		"`bio_encounter`.`nd_style`" => "nd_style",
		"`bio_encounter`.`nd_opacity`" => "nd_opacity",
		"`bio_encounter`.`nd_visibility`" => "nd_visibility",
		"`bio_encounter`.`lbl_lable`" => "lbl_lable",
		"`bio_encounter`.`lbl_color`" => "lbl_color",
		"`bio_encounter`.`lbl_size`" => "lbl_size",
	];
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = [
		1 => '`bio_encounter`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => 5,
		6 => 6,
		7 => 7,
		8 => 8,
		9 => 9,
		10 => 10,
		11 => 11,
		12 => 12,
		13 => 13,
		14 => 14,
		15 => 15,
		16 => 16,
		17 => '`bio_encounter`.`story_scene`',
		18 => '`bio_encounter`.`nd_color`',
		19 => 19,
		20 => 20,
		21 => 21,
		22 => 22,
		23 => 23,
		24 => 24,
		25 => 25,
	];

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV = [
		"`bio_encounter`.`id`" => "id",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent A */" => "authorA",
		"IF(    CHAR_LENGTH(`game_agent2`.`last_name`) || CHAR_LENGTH(`game_agent2`.`first_name`), CONCAT_WS('',   `game_agent2`.`last_name`, ', ', `game_agent2`.`first_name`), '') /* Agent name A */" => "author_nameA",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography A */" => "bibliographyA",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript A */" => "transcriptA",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token_sequence`) || CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token_sequence`, '   ', `biblio_token1`.`token`), '') /* Token A */" => "tokenA",
		"IF(    CHAR_LENGTH(`bio_chr_scene1`.`id`) || CHAR_LENGTH(`bio_chr_scene1`.`scene`), CONCAT_WS('',   `bio_chr_scene1`.`id`, '   ', `bio_chr_scene1`.`scene`), '') /* Scene A */" => "sceneA",
		"IF(    CHAR_LENGTH(`game_agent3`.`id`) || CHAR_LENGTH(`game_agent3`.`memberID`), CONCAT_WS('',   `game_agent3`.`id`, '   ', `game_agent3`.`memberID`), '') /* Agent B */" => "authorB",
		"IF(    CHAR_LENGTH(`game_agent4`.`last_name`) || CHAR_LENGTH(`game_agent4`.`first_name`), CONCAT_WS('',   `game_agent4`.`last_name`, ', ', `game_agent4`.`first_name`), '') /* Agent name B */" => "authornameB",
		"IF(    CHAR_LENGTH(`biblio_doc3`.`id`) || CHAR_LENGTH(`biblio_doc3`.`title`), CONCAT_WS('',   `biblio_doc3`.`id`, '   ', `biblio_doc3`.`title`), '') /* Bibliography B */" => "bibliographyB",
		"IF(    CHAR_LENGTH(`biblio_transcript2`.`id`) || CHAR_LENGTH(`biblio_transcript2`.`transcript_title`), CONCAT_WS('',   `biblio_transcript2`.`id`, '   ', `biblio_transcript2`.`transcript_title`), '') /* Transcript B */" => "transcriptB",
		"IF(    CHAR_LENGTH(`biblio_token2`.`token_sequence`) || CHAR_LENGTH(`biblio_token2`.`token`), CONCAT_WS('',   `biblio_token2`.`token_sequence`, '   ', `biblio_token2`.`token`), '') /* Token B */" => "tokenB",
		"IF(    CHAR_LENGTH(`bio_chr_scene2`.`id`) || CHAR_LENGTH(`bio_chr_scene2`.`scene`), CONCAT_WS('',   `bio_chr_scene2`.`id`, '   ', `bio_chr_scene2`.`scene`), '') /* Scene B */" => "sceneB",
		"`bio_encounter`.`relation_description`" => "relation_description",
		"`bio_encounter`.`type`" => "type",
		"`bio_encounter`.`conflicttype`" => "conflicttype",
		"`bio_encounter`.`story_scene`" => "story_scene",
		"`bio_encounter`.`nd_color`" => "nd_color",
		"`bio_encounter`.`nd_width`" => "nd_width",
		"`bio_encounter`.`nd_style`" => "nd_style",
		"`bio_encounter`.`nd_opacity`" => "nd_opacity",
		"`bio_encounter`.`nd_visibility`" => "nd_visibility",
		"`bio_encounter`.`lbl_lable`" => "lbl_lable",
		"`bio_encounter`.`lbl_color`" => "lbl_color",
		"`bio_encounter`.`lbl_size`" => "lbl_size",
	];
	// Fields that can be filtered
	$x->QueryFieldsFilters = [
		"`bio_encounter`.`id`" => "Id",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent A */" => "Agent A",
		"IF(    CHAR_LENGTH(`game_agent2`.`last_name`) || CHAR_LENGTH(`game_agent2`.`first_name`), CONCAT_WS('',   `game_agent2`.`last_name`, ', ', `game_agent2`.`first_name`), '') /* Agent name A */" => "Agent name A",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography A */" => "Bibliography A",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript A */" => "Transcript A",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token_sequence`) || CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token_sequence`, '   ', `biblio_token1`.`token`), '') /* Token A */" => "Token A",
		"IF(    CHAR_LENGTH(`bio_chr_scene1`.`id`) || CHAR_LENGTH(`bio_chr_scene1`.`scene`), CONCAT_WS('',   `bio_chr_scene1`.`id`, '   ', `bio_chr_scene1`.`scene`), '') /* Scene A */" => "Scene A",
		"IF(    CHAR_LENGTH(`game_agent3`.`id`) || CHAR_LENGTH(`game_agent3`.`memberID`), CONCAT_WS('',   `game_agent3`.`id`, '   ', `game_agent3`.`memberID`), '') /* Agent B */" => "Agent B",
		"IF(    CHAR_LENGTH(`game_agent4`.`last_name`) || CHAR_LENGTH(`game_agent4`.`first_name`), CONCAT_WS('',   `game_agent4`.`last_name`, ', ', `game_agent4`.`first_name`), '') /* Agent name B */" => "Agent name B",
		"IF(    CHAR_LENGTH(`biblio_doc3`.`id`) || CHAR_LENGTH(`biblio_doc3`.`title`), CONCAT_WS('',   `biblio_doc3`.`id`, '   ', `biblio_doc3`.`title`), '') /* Bibliography B */" => "Bibliography B",
		"IF(    CHAR_LENGTH(`biblio_transcript2`.`id`) || CHAR_LENGTH(`biblio_transcript2`.`transcript_title`), CONCAT_WS('',   `biblio_transcript2`.`id`, '   ', `biblio_transcript2`.`transcript_title`), '') /* Transcript B */" => "Transcript B",
		"IF(    CHAR_LENGTH(`biblio_token2`.`token_sequence`) || CHAR_LENGTH(`biblio_token2`.`token`), CONCAT_WS('',   `biblio_token2`.`token_sequence`, '   ', `biblio_token2`.`token`), '') /* Token B */" => "Token B",
		"IF(    CHAR_LENGTH(`bio_chr_scene2`.`id`) || CHAR_LENGTH(`bio_chr_scene2`.`scene`), CONCAT_WS('',   `bio_chr_scene2`.`id`, '   ', `bio_chr_scene2`.`scene`), '') /* Scene B */" => "Scene B",
		"`bio_encounter`.`relation_description`" => "Relation description",
		"`bio_encounter`.`type`" => "Type",
		"`bio_encounter`.`conflicttype`" => "Conflicttype",
		"`bio_encounter`.`story_scene`" => "Story_scene",
		"`bio_encounter`.`nd_color`" => "Nd_color",
		"`bio_encounter`.`nd_width`" => "Nd_width",
		"`bio_encounter`.`nd_style`" => "Nd_style",
		"`bio_encounter`.`nd_opacity`" => "Nd_opacity",
		"`bio_encounter`.`nd_visibility`" => "Nd_visibility",
		"`bio_encounter`.`lbl_lable`" => "Lbl_lable",
		"`bio_encounter`.`lbl_color`" => "Lbl_color",
		"`bio_encounter`.`lbl_size`" => "Lbl_size",
	];

	// Fields that can be quick searched
	$x->QueryFieldsQS = [
		"`bio_encounter`.`id`" => "id",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent A */" => "authorA",
		"IF(    CHAR_LENGTH(`game_agent2`.`last_name`) || CHAR_LENGTH(`game_agent2`.`first_name`), CONCAT_WS('',   `game_agent2`.`last_name`, ', ', `game_agent2`.`first_name`), '') /* Agent name A */" => "author_nameA",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography A */" => "bibliographyA",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript A */" => "transcriptA",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token_sequence`) || CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token_sequence`, '   ', `biblio_token1`.`token`), '') /* Token A */" => "tokenA",
		"IF(    CHAR_LENGTH(`bio_chr_scene1`.`id`) || CHAR_LENGTH(`bio_chr_scene1`.`scene`), CONCAT_WS('',   `bio_chr_scene1`.`id`, '   ', `bio_chr_scene1`.`scene`), '') /* Scene A */" => "sceneA",
		"IF(    CHAR_LENGTH(`game_agent3`.`id`) || CHAR_LENGTH(`game_agent3`.`memberID`), CONCAT_WS('',   `game_agent3`.`id`, '   ', `game_agent3`.`memberID`), '') /* Agent B */" => "authorB",
		"IF(    CHAR_LENGTH(`game_agent4`.`last_name`) || CHAR_LENGTH(`game_agent4`.`first_name`), CONCAT_WS('',   `game_agent4`.`last_name`, ', ', `game_agent4`.`first_name`), '') /* Agent name B */" => "authornameB",
		"IF(    CHAR_LENGTH(`biblio_doc3`.`id`) || CHAR_LENGTH(`biblio_doc3`.`title`), CONCAT_WS('',   `biblio_doc3`.`id`, '   ', `biblio_doc3`.`title`), '') /* Bibliography B */" => "bibliographyB",
		"IF(    CHAR_LENGTH(`biblio_transcript2`.`id`) || CHAR_LENGTH(`biblio_transcript2`.`transcript_title`), CONCAT_WS('',   `biblio_transcript2`.`id`, '   ', `biblio_transcript2`.`transcript_title`), '') /* Transcript B */" => "transcriptB",
		"IF(    CHAR_LENGTH(`biblio_token2`.`token_sequence`) || CHAR_LENGTH(`biblio_token2`.`token`), CONCAT_WS('',   `biblio_token2`.`token_sequence`, '   ', `biblio_token2`.`token`), '') /* Token B */" => "tokenB",
		"IF(    CHAR_LENGTH(`bio_chr_scene2`.`id`) || CHAR_LENGTH(`bio_chr_scene2`.`scene`), CONCAT_WS('',   `bio_chr_scene2`.`id`, '   ', `bio_chr_scene2`.`scene`), '') /* Scene B */" => "sceneB",
		"`bio_encounter`.`relation_description`" => "relation_description",
		"`bio_encounter`.`type`" => "type",
		"`bio_encounter`.`conflicttype`" => "conflicttype",
		"`bio_encounter`.`story_scene`" => "story_scene",
		"`bio_encounter`.`nd_color`" => "nd_color",
		"`bio_encounter`.`nd_width`" => "nd_width",
		"`bio_encounter`.`nd_style`" => "nd_style",
		"`bio_encounter`.`nd_opacity`" => "nd_opacity",
		"`bio_encounter`.`nd_visibility`" => "nd_visibility",
		"`bio_encounter`.`lbl_lable`" => "lbl_lable",
		"`bio_encounter`.`lbl_color`" => "lbl_color",
		"`bio_encounter`.`lbl_size`" => "lbl_size",
	];

	// Lookup fields that can be used as filterers
	$x->filterers = ['authorA' => 'Agent A', 'author_nameA' => 'Agent name A', 'bibliographyA' => 'Bibliography A', 'transcriptA' => 'Transcript A', 'tokenA' => 'Token A', 'sceneA' => 'Scene A', 'authorB' => 'Agent B', 'authornameB' => 'Agent name B', 'bibliographyB' => 'Bibliography B', 'transcriptB' => 'Transcript B', 'tokenB' => 'Token B', 'sceneB' => 'Scene B', ];

	$x->QueryFrom = "`bio_encounter` LEFT JOIN `game_agent` as game_agent1 ON `game_agent1`.`id`=`bio_encounter`.`authorA` LEFT JOIN `game_agent` as game_agent2 ON `game_agent2`.`id`=`bio_encounter`.`author_nameA` LEFT JOIN `biblio_doc` as biblio_doc1 ON `biblio_doc1`.`id`=`bio_encounter`.`bibliographyA` LEFT JOIN `biblio_transcript` as biblio_transcript1 ON `biblio_transcript1`.`id`=`bio_encounter`.`transcriptA` LEFT JOIN `biblio_doc` as biblio_doc2 ON `biblio_doc2`.`id`=`biblio_transcript1`.`bibliography_title` LEFT JOIN `biblio_token` as biblio_token1 ON `biblio_token1`.`id`=`bio_encounter`.`tokenA` LEFT JOIN `bio_chr_scene` as bio_chr_scene1 ON `bio_chr_scene1`.`id`=`bio_encounter`.`sceneA` LEFT JOIN `game_agent` as game_agent3 ON `game_agent3`.`id`=`bio_encounter`.`authorB` LEFT JOIN `game_agent` as game_agent4 ON `game_agent4`.`id`=`bio_encounter`.`authornameB` LEFT JOIN `biblio_doc` as biblio_doc3 ON `biblio_doc3`.`id`=`bio_encounter`.`bibliographyB` LEFT JOIN `biblio_transcript` as biblio_transcript2 ON `biblio_transcript2`.`id`=`bio_encounter`.`transcriptB` LEFT JOIN `biblio_token` as biblio_token2 ON `biblio_token2`.`id`=`bio_encounter`.`tokenB` LEFT JOIN `bio_chr_scene` as bio_chr_scene2 ON `bio_chr_scene2`.`id`=`bio_encounter`.`sceneB` ";
	$x->QueryWhere = '';
	$x->QueryOrder = '';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm['view'] == 0 ? 1 : 0);
	$x->AllowDelete = $perm['delete'];
	$x->AllowMassDelete = (getLoggedAdmin() !== false);
	$x->AllowInsert = $perm['insert'];
	$x->AllowUpdate = $perm['edit'];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowPrintingDV = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 10;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation['quick search'];
	$x->ScriptFileName = 'bio_encounter_view.php';
	$x->RedirectAfterInsert = 'bio_encounter_view.php';
	$x->TableTitle = 'Life Encounters';
	$x->TableIcon = 'resources/table_icons/arrow_refresh.png';
	$x->PrimaryKey = '`bio_encounter`.`id`';

	$x->ColWidth = [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, ];
	$x->ColCaption = ['Id', 'Agent A', 'Agent name A', 'Bibliography A', 'Transcript A', 'Token A', 'Scene A', 'Agent B', 'Agent name B', 'Bibliography B', 'Transcript B', 'Token B', 'Scene B', 'Relation description', 'Type', 'Conflicttype', 'Story_scene', 'Nd_color', 'Nd_width', 'Nd_style', 'Nd_opacity', 'Nd_visibility', 'Lbl_lable', 'Lbl_color', 'Lbl_size', ];
	$x->ColFieldName = ['id', 'authorA', 'author_nameA', 'bibliographyA', 'transcriptA', 'tokenA', 'sceneA', 'authorB', 'authornameB', 'bibliographyB', 'transcriptB', 'tokenB', 'sceneB', 'relation_description', 'type', 'conflicttype', 'story_scene', 'nd_color', 'nd_width', 'nd_style', 'nd_opacity', 'nd_visibility', 'lbl_lable', 'lbl_color', 'lbl_size', ];
	$x->ColNumber  = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, ];

	// template paths below are based on the app main directory
	$x->Template = 'templates/bio_encounter_templateTV.html';
	$x->SelectedTemplate = 'templates/bio_encounter_templateTVS.html';
	$x->TemplateDV = 'templates/bio_encounter_templateDV.html';
	$x->TemplateDVP = 'templates/bio_encounter_templateDVP.html';

	$x->ShowTableHeader = 1;
	$x->TVClasses = "";
	$x->DVClasses = "";
	$x->HasCalculatedFields = false;
	$x->AllowConsoleLog = false;
	$x->AllowDVNavigation = true;

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, ['user', 'group'])) { $DisplayRecords = 'all'; }
	if($perm['view'] == 1 || ($perm['view'] > 1 && $DisplayRecords == 'user' && !$_REQUEST['NoFilter_x'])) { // view owner only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `bio_encounter`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='bio_encounter' AND LCASE(`membership_userrecords`.`memberID`)='" . getLoggedMemberID() . "'";
	} elseif($perm['view'] == 2 || ($perm['view'] > 2 && $DisplayRecords == 'group' && !$_REQUEST['NoFilter_x'])) { // view group only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `bio_encounter`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='bio_encounter' AND `membership_userrecords`.`groupID`='" . getLoggedGroupID() . "'";
	} elseif($perm['view'] == 3) { // view all
		// no further action
	} elseif($perm['view'] == 0) { // view none
		$x->QueryFields = ['Not enough permissions' => 'NEP'];
		$x->QueryFrom = '`bio_encounter`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: bio_encounter_init
	$render = true;
	if(function_exists('bio_encounter_init')) {
		$args = [];
		$render = bio_encounter_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: bio_encounter_header
	$headerCode = '';
	if(function_exists('bio_encounter_header')) {
		$args = [];
		$headerCode = bio_encounter_header($x->ContentType, getMemberInfo(), $args);
	}

	if(!$headerCode) {
		include_once("{$currDir}/header.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/header.php");
		echo str_replace('<%%HEADER%%>', ob_get_clean(), $headerCode);
	}

	echo $x->HTML;

	// hook: bio_encounter_footer
	$footerCode = '';
	if(function_exists('bio_encounter_footer')) {
		$args = [];
		$footerCode = bio_encounter_footer($x->ContentType, getMemberInfo(), $args);
	}

	if(!$footerCode) {
		include_once("{$currDir}/footer.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/footer.php");
		echo str_replace('<%%FOOTER%%>', ob_get_clean(), $footerCode);
	}
