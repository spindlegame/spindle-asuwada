<?php
// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

	$currDir = dirname(__FILE__);
	include_once("{$currDir}/lib.php");
	@include_once("{$currDir}/hooks/bio_code_herme.php");
	include_once("{$currDir}/bio_code_herme_dml.php");

	// mm: can the current member access this page?
	$perm = getTablePermissions('bio_code_herme');
	if(!$perm['access']) {
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout(function() { window.location = "index.php?signOut=1"; }, 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = 'bio_code_herme';

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV = [
		"`bio_code_herme`.`id`" => "id",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, ' - ', `bio_story1`.`story_title`), '') /* Biography */" => "biography",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent id */" => "agent_id",
		"IF(    CHAR_LENGTH(`game_agent1`.`last_name`) || CHAR_LENGTH(`game_agent1`.`first_name`), CONCAT_WS('',   `game_agent1`.`last_name`, ', ', `game_agent1`.`first_name`), '') /* Agent name */" => "agent_name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "author_id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "author_name",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, ' - ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`bio_code_herme`.`hermeneutic`" => "hermeneutic",
		"IF(    CHAR_LENGTH(`class_im1`.`impression`), CONCAT_WS('',   `class_im1`.`impression`), '') /* Impression */" => "impression",
		"IF(    CHAR_LENGTH(`class_nt1`.`noetictension`), CONCAT_WS('',   `class_nt1`.`noetictension`), '') /* Noetic tension */" => "noetictension",
		"`bio_code_herme`.`quadrilemma`" => "quadrilemma",
		"IF(    CHAR_LENGTH(`class_pc1`.`perform_contrad`), CONCAT_WS('',   `class_pc1`.`perform_contrad`), '') /* Performative contradiction */" => "pc",
		"`bio_code_herme`.`freecode`" => "freecode",
	];
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = [
		1 => '`bio_code_herme`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => 5,
		6 => 6,
		7 => 7,
		8 => 8,
		9 => 9,
		10 => '`biblio_token1`.`token`',
		11 => 11,
		12 => '`class_im1`.`impression`',
		13 => '`class_nt1`.`noetictension`',
		14 => 14,
		15 => '`class_pc1`.`perform_contrad`',
		16 => 16,
	];

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV = [
		"`bio_code_herme`.`id`" => "id",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, ' - ', `bio_story1`.`story_title`), '') /* Biography */" => "biography",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent id */" => "agent_id",
		"IF(    CHAR_LENGTH(`game_agent1`.`last_name`) || CHAR_LENGTH(`game_agent1`.`first_name`), CONCAT_WS('',   `game_agent1`.`last_name`, ', ', `game_agent1`.`first_name`), '') /* Agent name */" => "agent_name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "author_id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "author_name",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, ' - ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`bio_code_herme`.`hermeneutic`" => "hermeneutic",
		"IF(    CHAR_LENGTH(`class_im1`.`impression`), CONCAT_WS('',   `class_im1`.`impression`), '') /* Impression */" => "impression",
		"IF(    CHAR_LENGTH(`class_nt1`.`noetictension`), CONCAT_WS('',   `class_nt1`.`noetictension`), '') /* Noetic tension */" => "noetictension",
		"`bio_code_herme`.`quadrilemma`" => "quadrilemma",
		"IF(    CHAR_LENGTH(`class_pc1`.`perform_contrad`), CONCAT_WS('',   `class_pc1`.`perform_contrad`), '') /* Performative contradiction */" => "pc",
		"`bio_code_herme`.`freecode`" => "freecode",
	];
	// Fields that can be filtered
	$x->QueryFieldsFilters = [
		"`bio_code_herme`.`id`" => "ID",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, ' - ', `bio_story1`.`story_title`), '') /* Biography */" => "Biography",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent id */" => "Agent id",
		"IF(    CHAR_LENGTH(`game_agent1`.`last_name`) || CHAR_LENGTH(`game_agent1`.`first_name`), CONCAT_WS('',   `game_agent1`.`last_name`, ', ', `game_agent1`.`first_name`), '') /* Agent name */" => "Agent name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "Author",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "Author name",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "Bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcript */" => "Transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, ' - ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "Token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "Token",
		"`bio_code_herme`.`hermeneutic`" => "Hermeneutic",
		"IF(    CHAR_LENGTH(`class_im1`.`impression`), CONCAT_WS('',   `class_im1`.`impression`), '') /* Impression */" => "Impression",
		"IF(    CHAR_LENGTH(`class_nt1`.`noetictension`), CONCAT_WS('',   `class_nt1`.`noetictension`), '') /* Noetic tension */" => "Noetic tension",
		"`bio_code_herme`.`quadrilemma`" => "Quadrilemma",
		"IF(    CHAR_LENGTH(`class_pc1`.`perform_contrad`), CONCAT_WS('',   `class_pc1`.`perform_contrad`), '') /* Performative contradiction */" => "Performative contradiction",
		"`bio_code_herme`.`freecode`" => "Freecode",
	];

	// Fields that can be quick searched
	$x->QueryFieldsQS = [
		"`bio_code_herme`.`id`" => "id",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, ' - ', `bio_story1`.`story_title`), '') /* Biography */" => "biography",
		"IF(    CHAR_LENGTH(`game_agent1`.`id`) || CHAR_LENGTH(`game_agent1`.`memberID`), CONCAT_WS('',   `game_agent1`.`id`, '   ', `game_agent1`.`memberID`), '') /* Agent id */" => "agent_id",
		"IF(    CHAR_LENGTH(`game_agent1`.`last_name`) || CHAR_LENGTH(`game_agent1`.`first_name`), CONCAT_WS('',   `game_agent1`.`last_name`, ', ', `game_agent1`.`first_name`), '') /* Agent name */" => "agent_name",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "author_id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`last_name`) || CHAR_LENGTH(`biblio_author1`.`first_name`), CONCAT_WS('',   `biblio_author1`.`last_name`, ', ', `biblio_author1`.`first_name`), '') /* Author name */" => "author_name",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, ' - ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`bio_code_herme`.`hermeneutic`" => "hermeneutic",
		"IF(    CHAR_LENGTH(`class_im1`.`impression`), CONCAT_WS('',   `class_im1`.`impression`), '') /* Impression */" => "impression",
		"IF(    CHAR_LENGTH(`class_nt1`.`noetictension`), CONCAT_WS('',   `class_nt1`.`noetictension`), '') /* Noetic tension */" => "noetictension",
		"`bio_code_herme`.`quadrilemma`" => "quadrilemma",
		"IF(    CHAR_LENGTH(`class_pc1`.`perform_contrad`), CONCAT_WS('',   `class_pc1`.`perform_contrad`), '') /* Performative contradiction */" => "pc",
		"`bio_code_herme`.`freecode`" => "freecode",
	];

	// Lookup fields that can be used as filterers
	$x->filterers = ['biography' => 'Biography', 'agent_id' => 'Agent id', 'author_id' => 'Author', 'bibliography' => 'Bibliography', 'transcript' => 'Transcript', 'token_sequence' => 'Token_sequence', 'impression' => 'Impression', 'noetictension' => 'Noetic tension', 'pc' => 'Performative contradiction', ];

	$x->QueryFrom = "`bio_code_herme` LEFT JOIN `bio_story` as bio_story1 ON `bio_story1`.`id`=`bio_code_herme`.`biography` LEFT JOIN `game_agent` as game_agent1 ON `game_agent1`.`id`=`bio_code_herme`.`agent_id` LEFT JOIN `biblio_author` as biblio_author1 ON `biblio_author1`.`id`=`bio_code_herme`.`author_id` LEFT JOIN `biblio_doc` as biblio_doc1 ON `biblio_doc1`.`id`=`bio_code_herme`.`bibliography` LEFT JOIN `biblio_transcript` as biblio_transcript1 ON `biblio_transcript1`.`id`=`bio_code_herme`.`transcript` LEFT JOIN `biblio_token` as biblio_token1 ON `biblio_token1`.`id`=`bio_code_herme`.`token_sequence` LEFT JOIN `class_im` as class_im1 ON `class_im1`.`id`=`bio_code_herme`.`impression` LEFT JOIN `class_nt` as class_nt1 ON `class_nt1`.`id`=`bio_code_herme`.`noetictension` LEFT JOIN `class_pc` as class_pc1 ON `class_pc1`.`id`=`bio_code_herme`.`pc` ";
	$x->QueryWhere = '';
	$x->QueryOrder = '';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm['view'] == 0 ? 1 : 0);
	$x->AllowDelete = $perm['delete'];
	$x->AllowMassDelete = (getLoggedAdmin() !== false);
	$x->AllowInsert = $perm['insert'];
	$x->AllowUpdate = $perm['edit'];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowPrintingDV = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 10;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation['quick search'];
	$x->ScriptFileName = 'bio_code_herme_view.php';
	$x->RedirectAfterInsert = 'bio_code_herme_view.php';
	$x->TableTitle = 'Hermeneutic';
	$x->TableIcon = 'resources/table_icons/book_next.png';
	$x->PrimaryKey = '`bio_code_herme`.`id`';

	$x->ColWidth = [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, ];
	$x->ColCaption = ['ID', 'Biography', 'Agent id', 'Agent name', 'Author', 'Author name', 'Bibliography', 'Transcript', 'Token_sequence', 'Token', 'Hermeneutic', 'Impression', 'Noetic tension', 'Quadrilemma', 'Performative contradiction', 'Freecode', ];
	$x->ColFieldName = ['id', 'biography', 'agent_id', 'agent_name', 'author_id', 'author_name', 'bibliography', 'transcript', 'token_sequence', 'token', 'hermeneutic', 'impression', 'noetictension', 'quadrilemma', 'pc', 'freecode', ];
	$x->ColNumber  = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ];

	// template paths below are based on the app main directory
	$x->Template = 'templates/bio_code_herme_templateTV.html';
	$x->SelectedTemplate = 'templates/bio_code_herme_templateTVS.html';
	$x->TemplateDV = 'templates/bio_code_herme_templateDV.html';
	$x->TemplateDVP = 'templates/bio_code_herme_templateDVP.html';

	$x->ShowTableHeader = 1;
	$x->TVClasses = "";
	$x->DVClasses = "";
	$x->HasCalculatedFields = false;
	$x->AllowConsoleLog = false;
	$x->AllowDVNavigation = true;

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, ['user', 'group'])) { $DisplayRecords = 'all'; }
	if($perm['view'] == 1 || ($perm['view'] > 1 && $DisplayRecords == 'user' && !$_REQUEST['NoFilter_x'])) { // view owner only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `bio_code_herme`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='bio_code_herme' AND LCASE(`membership_userrecords`.`memberID`)='" . getLoggedMemberID() . "'";
	} elseif($perm['view'] == 2 || ($perm['view'] > 2 && $DisplayRecords == 'group' && !$_REQUEST['NoFilter_x'])) { // view group only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `bio_code_herme`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='bio_code_herme' AND `membership_userrecords`.`groupID`='" . getLoggedGroupID() . "'";
	} elseif($perm['view'] == 3) { // view all
		// no further action
	} elseif($perm['view'] == 0) { // view none
		$x->QueryFields = ['Not enough permissions' => 'NEP'];
		$x->QueryFrom = '`bio_code_herme`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: bio_code_herme_init
	$render = true;
	if(function_exists('bio_code_herme_init')) {
		$args = [];
		$render = bio_code_herme_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: bio_code_herme_header
	$headerCode = '';
	if(function_exists('bio_code_herme_header')) {
		$args = [];
		$headerCode = bio_code_herme_header($x->ContentType, getMemberInfo(), $args);
	}

	if(!$headerCode) {
		include_once("{$currDir}/header.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/header.php");
		echo str_replace('<%%HEADER%%>', ob_get_clean(), $headerCode);
	}

	echo $x->HTML;

	// hook: bio_code_herme_footer
	$footerCode = '';
	if(function_exists('bio_code_herme_footer')) {
		$args = [];
		$footerCode = bio_code_herme_footer($x->ContentType, getMemberInfo(), $args);
	}

	if(!$footerCode) {
		include_once("{$currDir}/footer.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/footer.php");
		echo str_replace('<%%FOOTER%%>', ob_get_clean(), $footerCode);
	}
