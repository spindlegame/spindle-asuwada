<?php
// This script and data application were generated by AppGini 5.76
// Download AppGini for free from https://bigprof.com/appgini/download/

	$currDir=dirname(__FILE__);
	include("$currDir/defaultLang.php");
	include("$currDir/language.php");
	include("$currDir/lib.php");
	@include("$currDir/hooks/character_illustration.php");
	include("$currDir/character_illustration_dml.php");

	// mm: can the current member access this page?
	$perm=getTablePermissions('character_illustration');
	if(!$perm[0]){
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout("window.location=\'index.php?signOut=1\'", 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = "character_illustration";

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV = array(   
		"`character_illustration`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`character_illustration`.`code`" => "code",
		"`character_illustration`.`illustration`" => "illustration",
		"`character_illustration`.`comment`" => "comment",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "character_element",
		"IF(    CHAR_LENGTH(`class_character_element2`.`value`), CONCAT_WS('',   `class_character_element2`.`value`), '') /* Character element value */" => "character_elem_value",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`), '') /* Archetype */" => "archetype"
	);
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = array(   
		1 => '`character_illustration`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => 5,
		6 => '`biblio_token1`.`token`',
		7 => 7,
		8 => 8,
		9 => 9,
		10 => '`class_character_element1`.`element`',
		11 => '`class_character_element2`.`value`',
		12 => '`class_dramatica_archetype1`.`archetype`'
	);

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV = array(   
		"`character_illustration`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`character_illustration`.`code`" => "code",
		"`character_illustration`.`illustration`" => "illustration",
		"`character_illustration`.`comment`" => "comment",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "character_element",
		"IF(    CHAR_LENGTH(`class_character_element2`.`value`), CONCAT_WS('',   `class_character_element2`.`value`), '') /* Character element value */" => "character_elem_value",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`), '') /* Archetype */" => "archetype"
	);
	// Fields that can be filtered
	$x->QueryFieldsFilters = array(   
		"`character_illustration`.`id`" => "ID",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "Author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "Bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript */" => "Transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "Token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "Token",
		"`character_illustration`.`code`" => "Code",
		"`character_illustration`.`illustration`" => "Illustration",
		"`character_illustration`.`comment`" => "Comment",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "Character element",
		"IF(    CHAR_LENGTH(`class_character_element2`.`value`), CONCAT_WS('',   `class_character_element2`.`value`), '') /* Character element value */" => "Character element value",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`), '') /* Archetype */" => "Archetype"
	);

	// Fields that can be quick searched
	$x->QueryFieldsQS = array(   
		"`character_illustration`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`id`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`id`), '') /* Author */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliography */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_doc2`.`title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '    ', `biblio_doc2`.`title`), '') /* Transcript */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`character_illustration`.`code`" => "code",
		"`character_illustration`.`illustration`" => "illustration",
		"`character_illustration`.`comment`" => "comment",
		"IF(    CHAR_LENGTH(`class_character_element1`.`element`), CONCAT_WS('',   `class_character_element1`.`element`), '') /* Character element */" => "character_element",
		"IF(    CHAR_LENGTH(`class_character_element2`.`value`), CONCAT_WS('',   `class_character_element2`.`value`), '') /* Character element value */" => "character_elem_value",
		"IF(    CHAR_LENGTH(`class_dramatica_archetype1`.`archetype`), CONCAT_WS('',   `class_dramatica_archetype1`.`archetype`), '') /* Archetype */" => "archetype"
	);

	// Lookup fields that can be used as filterers
	$x->filterers = array(  'author' => 'Author', 'bibliography' => 'Bibliography', 'transcript' => 'Transcript', 'token_sequence' => 'Token_sequence', 'character_element' => 'Character element', 'character_elem_value' => 'Character element value', 'archetype' => 'Archetype');

	$x->QueryFrom = "`character_illustration` LEFT JOIN `biblio_author` as biblio_author1 ON `biblio_author1`.`id`=`character_illustration`.`author` LEFT JOIN `biblio_doc` as biblio_doc1 ON `biblio_doc1`.`id`=`character_illustration`.`bibliography` LEFT JOIN `biblio_transcript` as biblio_transcript1 ON `biblio_transcript1`.`id`=`character_illustration`.`transcript` LEFT JOIN `biblio_doc` as biblio_doc2 ON `biblio_doc2`.`id`=`biblio_transcript1`.`bibliography_title` LEFT JOIN `biblio_token` as biblio_token1 ON `biblio_token1`.`id`=`character_illustration`.`token_sequence` LEFT JOIN `class_character_element` as class_character_element1 ON `class_character_element1`.`id`=`character_illustration`.`character_element` LEFT JOIN `class_character_element` as class_character_element2 ON `class_character_element2`.`id`=`character_illustration`.`character_elem_value` LEFT JOIN `class_dramatica_archetype` as class_dramatica_archetype1 ON `class_dramatica_archetype1`.`id`=`character_illustration`.`archetype` ";
	$x->QueryWhere = '';
	$x->QueryOrder = '';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm[2]==0 ? 1 : 0);
	$x->AllowDelete = $perm[4];
	$x->AllowMassDelete = false;
	$x->AllowInsert = $perm[1];
	$x->AllowUpdate = $perm[3];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowPrintingDV = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 10;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation["quick search"];
	$x->ScriptFileName = "character_illustration_view.php";
	$x->RedirectAfterInsert = "character_illustration_view.php?SelectedID=#ID#";
	$x->TableTitle = "IV.3. Character illust.";
	$x->TableIcon = "resources/table_icons/map_edit.png";
	$x->PrimaryKey = "`character_illustration`.`id`";

	$x->ColWidth   = array(  150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150);
	$x->ColCaption = array("ID", "Author", "Bibliography", "Transcript", "Token_sequence", "Token", "Code", "Illustration", "Comment", "Character element", "Character element value", "Archetype");
	$x->ColFieldName = array('id', 'author', 'bibliography', 'transcript', 'token_sequence', 'token', 'code', 'illustration', 'comment', 'character_element', 'character_elem_value', 'archetype');
	$x->ColNumber  = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);

	// template paths below are based on the app main directory
	$x->Template = 'templates/character_illustration_templateTV.html';
	$x->SelectedTemplate = 'templates/character_illustration_templateTVS.html';
	$x->TemplateDV = 'templates/character_illustration_templateDV.html';
	$x->TemplateDVP = 'templates/character_illustration_templateDVP.html';

	$x->ShowTableHeader = 1;
	$x->TVClasses = "";
	$x->DVClasses = "";
	$x->HighlightColor = '#FFF0C2';

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, array('user', 'group'))){ $DisplayRecords = 'all'; }
	if($perm[2]==1 || ($perm[2]>1 && $DisplayRecords=='user' && !$_REQUEST['NoFilter_x'])){ // view owner only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `character_illustration`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='character_illustration' and lcase(membership_userrecords.memberID)='".getLoggedMemberID()."'";
	}elseif($perm[2]==2 || ($perm[2]>2 && $DisplayRecords=='group' && !$_REQUEST['NoFilter_x'])){ // view group only
		$x->QueryFrom.=', membership_userrecords';
		$x->QueryWhere="where `character_illustration`.`id`=membership_userrecords.pkValue and membership_userrecords.tableName='character_illustration' and membership_userrecords.groupID='".getLoggedGroupID()."'";
	}elseif($perm[2]==3){ // view all
		// no further action
	}elseif($perm[2]==0){ // view none
		$x->QueryFields = array("Not enough permissions" => "NEP");
		$x->QueryFrom = '`character_illustration`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: character_illustration_init
	$render=TRUE;
	if(function_exists('character_illustration_init')){
		$args=array();
		$render=character_illustration_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: character_illustration_header
	$headerCode='';
	if(function_exists('character_illustration_header')){
		$args=array();
		$headerCode=character_illustration_header($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$headerCode){
		include_once("$currDir/header.php"); 
	}else{
		ob_start(); include_once("$currDir/header.php"); $dHeader=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%HEADER%%>', $dHeader, $headerCode);
	}

	echo $x->HTML;
	// hook: character_illustration_footer
	$footerCode='';
	if(function_exists('character_illustration_footer')){
		$args=array();
		$footerCode=character_illustration_footer($x->ContentType, getMemberInfo(), $args);
	}  
	if(!$footerCode){
		include_once("$currDir/footer.php"); 
	}else{
		ob_start(); include_once("$currDir/footer.php"); $dFooter=ob_get_contents(); ob_end_clean();
		echo str_replace('<%%FOOTER%%>', $dFooter, $footerCode);
	}
?>