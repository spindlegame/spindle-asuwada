<?php

// Data functions (insert, update, delete, form) for table code_chrev_scenes

// This script and data application were generated by AppGini 5.76
// Download AppGini for free from https://bigprof.com/appgini/download/

function code_chrev_scenes_insert(){
	global $Translation;

	// mm: can member insert record?
	$arrPerm=getTablePermissions('code_chrev_scenes');
	if(!$arrPerm[1]){
		return false;
	}

	$data['agent'] = makeSafe($_REQUEST['agent']);
		if($data['agent'] == empty_lookup_value){ $data['agent'] = ''; }
	$data['author'] = makeSafe($_REQUEST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_REQUEST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_REQUEST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }
	$data['invivo_code'] = makeSafe($_REQUEST['invivo_code']);
		if($data['invivo_code'] == empty_lookup_value){ $data['invivo_code'] = ''; }
	$data['startdate'] = makeSafe($_REQUEST['startdate']);
		if($data['startdate'] == empty_lookup_value){ $data['startdate'] = ''; }
	$data['enddate'] = makeSafe($_REQUEST['invivo_code']);
		if($data['enddate'] == empty_lookup_value){ $data['enddate'] = ''; }
	$data['person'] = makeSafe($_REQUEST['invivo_code']);
		if($data['person'] == empty_lookup_value){ $data['person'] = ''; }
	$data['place'] = makeSafe($_REQUEST['invivo_code']);
		if($data['place'] == empty_lookup_value){ $data['place'] = ''; }
	$data['freecode'] = makeSafe($_REQUEST['freecode']);
		if($data['freecode'] == empty_lookup_value){ $data['freecode'] = ''; }
	$data['herme_code'] = makeSafe($_REQUEST['herme_code']);
		if($data['herme_code'] == empty_lookup_value){ $data['herme_code'] = ''; }
	$data['impression'] = makeSafe($_REQUEST['herme_code']);
		if($data['impression'] == empty_lookup_value){ $data['impression'] = ''; }
	$data['noetictension'] = makeSafe($_REQUEST['herme_code']);
		if($data['noetictension'] == empty_lookup_value){ $data['noetictension'] = ''; }
	$data['pc'] = makeSafe($_REQUEST['herme_code']);
		if($data['pc'] == empty_lookup_value){ $data['pc'] = ''; }
	$data['comment'] = makeSafe($_REQUEST['comment']);
		if($data['comment'] == empty_lookup_value){ $data['comment'] = ''; }
	$data['scene'] = makeSafe($_REQUEST['scene']);
		if($data['scene'] == empty_lookup_value){ $data['scene'] = ''; }
	if($data['startdate'] == '') $data['startdate'] = "1";
	if($data['enddate'] == '') $data['enddate'] = "1";

	// hook: code_chrev_scenes_before_insert
	if(function_exists('code_chrev_scenes_before_insert')){
		$args=array();
		if(!code_chrev_scenes_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o = array('silentErrors' => true);
	sql('insert into `code_chrev_scenes` set       `agent`=' . (($data['agent'] !== '' && $data['agent'] !== NULL) ? "'{$data['agent']}'" : 'NULL') . ', `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL') . ', `invivo_code`=' . (($data['invivo_code'] !== '' && $data['invivo_code'] !== NULL) ? "'{$data['invivo_code']}'" : 'NULL') . ', `startdate`=' . (($data['startdate'] !== '' && $data['startdate'] !== NULL) ? "'{$data['startdate']}'" : 'NULL') . ', `enddate`=' . (($data['enddate'] !== '' && $data['enddate'] !== NULL) ? "'{$data['enddate']}'" : 'NULL') . ', `person`=' . (($data['person'] !== '' && $data['person'] !== NULL) ? "'{$data['person']}'" : 'NULL') . ', `place`=' . (($data['place'] !== '' && $data['place'] !== NULL) ? "'{$data['place']}'" : 'NULL') . ', `freecode`=' . (($data['freecode'] !== '' && $data['freecode'] !== NULL) ? "'{$data['freecode']}'" : 'NULL') . ', `herme_code`=' . (($data['herme_code'] !== '' && $data['herme_code'] !== NULL) ? "'{$data['herme_code']}'" : 'NULL') . ', `impression`=' . (($data['impression'] !== '' && $data['impression'] !== NULL) ? "'{$data['impression']}'" : 'NULL') . ', `noetictension`=' . (($data['noetictension'] !== '' && $data['noetictension'] !== NULL) ? "'{$data['noetictension']}'" : 'NULL') . ', `pc`=' . (($data['pc'] !== '' && $data['pc'] !== NULL) ? "'{$data['pc']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL') . ', `scene`=' . (($data['scene'] !== '' && $data['scene'] !== NULL) ? "'{$data['scene']}'" : 'NULL'), $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"code_chrev_scenes_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID = db_insert_id(db_link());

	// hook: code_chrev_scenes_after_insert
	if(function_exists('code_chrev_scenes_after_insert')){
		$res = sql("select * from `code_chrev_scenes` where `id`='" . makeSafe($recID, false) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=array();
		if(!code_chrev_scenes_after_insert($data, getMemberInfo(), $args)){ return $recID; }
	}

	// mm: save ownership data
	set_record_owner('code_chrev_scenes', $recID, getLoggedMemberID());

	return $recID;
}

function code_chrev_scenes_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('code_chrev_scenes');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_chrev_scenes' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_chrev_scenes' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: code_chrev_scenes_before_delete
	if(function_exists('code_chrev_scenes_before_delete')){
		$args=array();
		if(!code_chrev_scenes_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	// child table: storylines
	$res = sql("select `id` from `code_chrev_scenes` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `storylines` where `characterevent_scene`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "storylines", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "storylines", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='code_chrev_scenes_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='code_chrev_scenes_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	sql("delete from `code_chrev_scenes` where `id`='$selected_id'", $eo);

	// hook: code_chrev_scenes_after_delete
	if(function_exists('code_chrev_scenes_after_delete')){
		$args=array();
		code_chrev_scenes_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='code_chrev_scenes' and pkValue='$selected_id'", $eo);
}

function code_chrev_scenes_update($selected_id){
	global $Translation;

	// mm: can member edit record?
	$arrPerm=getTablePermissions('code_chrev_scenes');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['agent'] = makeSafe($_REQUEST['agent']);
		if($data['agent'] == empty_lookup_value){ $data['agent'] = ''; }
	$data['author'] = makeSafe($_REQUEST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_REQUEST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_REQUEST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }
	$data['invivo_code'] = makeSafe($_REQUEST['invivo_code']);
		if($data['invivo_code'] == empty_lookup_value){ $data['invivo_code'] = ''; }
	$data['startdate'] = makeSafe($_REQUEST['startdate']);
		if($data['startdate'] == empty_lookup_value){ $data['startdate'] = ''; }
	$data['enddate'] = makeSafe($_REQUEST['invivo_code']);
		if($data['enddate'] == empty_lookup_value){ $data['enddate'] = ''; }
	$data['person'] = makeSafe($_REQUEST['invivo_code']);
		if($data['person'] == empty_lookup_value){ $data['person'] = ''; }
	$data['place'] = makeSafe($_REQUEST['invivo_code']);
		if($data['place'] == empty_lookup_value){ $data['place'] = ''; }
	$data['freecode'] = makeSafe($_REQUEST['freecode']);
		if($data['freecode'] == empty_lookup_value){ $data['freecode'] = ''; }
	$data['herme_code'] = makeSafe($_REQUEST['herme_code']);
		if($data['herme_code'] == empty_lookup_value){ $data['herme_code'] = ''; }
	$data['impression'] = makeSafe($_REQUEST['herme_code']);
		if($data['impression'] == empty_lookup_value){ $data['impression'] = ''; }
	$data['noetictension'] = makeSafe($_REQUEST['herme_code']);
		if($data['noetictension'] == empty_lookup_value){ $data['noetictension'] = ''; }
	$data['pc'] = makeSafe($_REQUEST['herme_code']);
		if($data['pc'] == empty_lookup_value){ $data['pc'] = ''; }
	$data['comment'] = makeSafe($_REQUEST['comment']);
		if($data['comment'] == empty_lookup_value){ $data['comment'] = ''; }
	$data['scene'] = makeSafe($_REQUEST['scene']);
		if($data['scene'] == empty_lookup_value){ $data['scene'] = ''; }
	$data['selectedID']=makeSafe($selected_id);

	// hook: code_chrev_scenes_before_update
	if(function_exists('code_chrev_scenes_before_update')){
		$args=array();
		if(!code_chrev_scenes_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `code_chrev_scenes` set       `agent`=' . (($data['agent'] !== '' && $data['agent'] !== NULL) ? "'{$data['agent']}'" : 'NULL') . ', `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL') . ', `invivo_code`=' . (($data['invivo_code'] !== '' && $data['invivo_code'] !== NULL) ? "'{$data['invivo_code']}'" : 'NULL') . ', `startdate`=' . (($data['startdate'] !== '' && $data['startdate'] !== NULL) ? "'{$data['startdate']}'" : 'NULL') . ', `enddate`=' . (($data['enddate'] !== '' && $data['enddate'] !== NULL) ? "'{$data['enddate']}'" : 'NULL') . ', `person`=' . (($data['person'] !== '' && $data['person'] !== NULL) ? "'{$data['person']}'" : 'NULL') . ', `place`=' . (($data['place'] !== '' && $data['place'] !== NULL) ? "'{$data['place']}'" : 'NULL') . ', `freecode`=' . (($data['freecode'] !== '' && $data['freecode'] !== NULL) ? "'{$data['freecode']}'" : 'NULL') . ', `herme_code`=' . (($data['herme_code'] !== '' && $data['herme_code'] !== NULL) ? "'{$data['herme_code']}'" : 'NULL') . ', `impression`=' . (($data['impression'] !== '' && $data['impression'] !== NULL) ? "'{$data['impression']}'" : 'NULL') . ', `noetictension`=' . (($data['noetictension'] !== '' && $data['noetictension'] !== NULL) ? "'{$data['noetictension']}'" : 'NULL') . ', `pc`=' . (($data['pc'] !== '' && $data['pc'] !== NULL) ? "'{$data['pc']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL') . ', `scene`=' . (($data['scene'] !== '' && $data['scene'] !== NULL) ? "'{$data['scene']}'" : 'NULL') . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="code_chrev_scenes_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: code_chrev_scenes_after_update
	if(function_exists('code_chrev_scenes_after_update')){
		$res = sql("SELECT * FROM `code_chrev_scenes` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!code_chrev_scenes_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function code_chrev_scenes_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = ''){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('code_chrev_scenes');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_author = thisOr(undo_magic_quotes($_REQUEST['filterer_author']), '');
	$filterer_bibliography = thisOr(undo_magic_quotes($_REQUEST['filterer_bibliography']), '');
	$filterer_transcript = thisOr(undo_magic_quotes($_REQUEST['filterer_transcript']), '');
	$filterer_token_sequence = thisOr(undo_magic_quotes($_REQUEST['filterer_token_sequence']), '');
	$filterer_invivo_code = thisOr(undo_magic_quotes($_REQUEST['filterer_invivo_code']), '');
	$filterer_startdate = thisOr(undo_magic_quotes($_REQUEST['filterer_startdate']), '');
	$filterer_herme_code = thisOr(undo_magic_quotes($_REQUEST['filterer_herme_code']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_bibliography && !$filterer_author) $filterer_author = sqlValue("select author_id from biblio_doc where id='" . makeSafe($filterer_bibliography) . "'");
	if($filterer_transcript && !$filterer_author) $filterer_author = sqlValue("select author_memberID from biblio_transcript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_transcript && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography_title from biblio_transcript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_token_sequence && !$filterer_author) $filterer_author = sqlValue("select author_id from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_invivo_code && !$filterer_author) $filterer_author = sqlValue("select author from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_invivo_code && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_invivo_code && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_invivo_code && !$filterer_token_sequence) $filterer_token_sequence = sqlValue("select token_sequence from code_invivo where id='" . makeSafe($filterer_invivo_code) . "'");
	if($filterer_startdate && !$filterer_author) $filterer_author = sqlValue("select author from code_invivo where id='" . makeSafe($filterer_startdate) . "'");
	if($filterer_startdate && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from code_invivo where id='" . makeSafe($filterer_startdate) . "'");
	if($filterer_startdate && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from code_invivo where id='" . makeSafe($filterer_startdate) . "'");
	if($filterer_startdate && !$filterer_token_sequence) $filterer_token_sequence = sqlValue("select token_sequence from code_invivo where id='" . makeSafe($filterer_startdate) . "'");
	if($filterer_herme_code && !$filterer_author) $filterer_author = sqlValue("select author_id from code_herme where id='" . makeSafe($filterer_herme_code) . "'");
	if($filterer_herme_code && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from code_herme where id='" . makeSafe($filterer_herme_code) . "'");
	if($filterer_herme_code && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from code_herme where id='" . makeSafe($filterer_herme_code) . "'");
	if($filterer_herme_code && !$filterer_token_sequence) $filterer_token_sequence = sqlValue("select token_sequence from code_herme where id='" . makeSafe($filterer_herme_code) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: author
	$combo_author = new DataCombo;
	// combobox: bibliography, filterable by: author
	$combo_bibliography = new DataCombo;
	// combobox: transcript, filterable by: author,bibliography
	$combo_transcript = new DataCombo;
	// combobox: token_sequence, filterable by: author,bibliography,transcript
	$combo_token_sequence = new DataCombo;
	// combobox: invivo_code, filterable by: author,bibliography,transcript,token_sequence
	$combo_invivo_code = new DataCombo;
	// combobox: startdate, filterable by: author,bibliography,transcript,token_sequence
	$combo_startdate = new DataCombo;
	// combobox: herme_code, filterable by: author,bibliography,transcript,token_sequence
	$combo_herme_code = new DataCombo;

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_chrev_scenes' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `code_chrev_scenes` where `id`='".makeSafe($selected_id)."'", $eo);
		if(!($row = db_fetch_array($res))){
			return error_message($Translation['No records found'], 'code_chrev_scenes_view.php', false);
		}
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_author->SelectedData = $row['author'];
		$combo_bibliography->SelectedData = $row['bibliography'];
		$combo_transcript->SelectedData = $row['transcript'];
		$combo_token_sequence->SelectedData = $row['token_sequence'];
		$combo_invivo_code->SelectedData = $row['invivo_code'];
		$combo_startdate->SelectedData = $row['startdate'];
		$combo_herme_code->SelectedData = $row['herme_code'];
	}else{
		$combo_author->SelectedData = $filterer_author;
		$combo_bibliography->SelectedData = $filterer_bibliography;
		$combo_transcript->SelectedData = $filterer_transcript;
		$combo_token_sequence->SelectedData = $filterer_token_sequence;
		$combo_invivo_code->SelectedData = $filterer_invivo_code;
		$combo_startdate->SelectedData = $filterer_startdate;
		$combo_herme_code->SelectedData = $filterer_herme_code;
	}
	$combo_author->HTML = '<span id="author-container' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '" value="' . html_attr($combo_author->SelectedData) . '">';
	$combo_author->MatchText = '<span id="author-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '" value="' . html_attr($combo_author->SelectedData) . '">';
	$combo_bibliography->HTML = '<span id="bibliography-container' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '" value="' . html_attr($combo_bibliography->SelectedData) . '">';
	$combo_bibliography->MatchText = '<span id="bibliography-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '" value="' . html_attr($combo_bibliography->SelectedData) . '">';
	$combo_transcript->HTML = '<span id="transcript-container' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '" value="' . html_attr($combo_transcript->SelectedData) . '">';
	$combo_transcript->MatchText = '<span id="transcript-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '" value="' . html_attr($combo_transcript->SelectedData) . '">';
	$combo_token_sequence->HTML = '<span id="token_sequence-container' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '" value="' . html_attr($combo_token_sequence->SelectedData) . '">';
	$combo_token_sequence->MatchText = '<span id="token_sequence-container-readonly' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '" value="' . html_attr($combo_token_sequence->SelectedData) . '">';
	$combo_invivo_code->HTML = '<span id="invivo_code-container' . $rnd1 . '"></span><input type="hidden" name="invivo_code" id="invivo_code' . $rnd1 . '" value="' . html_attr($combo_invivo_code->SelectedData) . '">';
	$combo_invivo_code->MatchText = '<span id="invivo_code-container-readonly' . $rnd1 . '"></span><input type="hidden" name="invivo_code" id="invivo_code' . $rnd1 . '" value="' . html_attr($combo_invivo_code->SelectedData) . '">';
	$combo_startdate->HTML = '<span id="startdate-container' . $rnd1 . '"></span><input type="hidden" name="startdate" id="startdate' . $rnd1 . '" value="' . html_attr($combo_startdate->SelectedData) . '">';
	$combo_startdate->MatchText = '<span id="startdate-container-readonly' . $rnd1 . '"></span><input type="hidden" name="startdate" id="startdate' . $rnd1 . '" value="' . html_attr($combo_startdate->SelectedData) . '">';
	$combo_herme_code->HTML = '<span id="herme_code-container' . $rnd1 . '"></span><input type="hidden" name="herme_code" id="herme_code' . $rnd1 . '" value="' . html_attr($combo_herme_code->SelectedData) . '">';
	$combo_herme_code->MatchText = '<span id="herme_code-container-readonly' . $rnd1 . '"></span><input type="hidden" name="herme_code" id="herme_code' . $rnd1 . '" value="' . html_attr($combo_herme_code->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_author__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author'] : $filterer_author); ?>"};
		AppGini.current_bibliography__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliography'] : $filterer_bibliography); ?>"};
		AppGini.current_transcript__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcript'] : $filterer_transcript); ?>"};
		AppGini.current_token_sequence__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['token_sequence'] : $filterer_token_sequence); ?>"};
		AppGini.current_invivo_code__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['invivo_code'] : $filterer_invivo_code); ?>"};
		AppGini.current_startdate__RAND__ = { text: "<?php echo ($selected_id ? '' : '1'); ?>", value: "<?php echo addslashes($selected_id ? $urow['startdate'] : $filterer_startdate); ?>"};
		AppGini.current_herme_code__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['herme_code'] : $filterer_herme_code); ?>"};

		jQuery(function() {
			setTimeout(function(){
				if(typeof(author_reload__RAND__) == 'function') author_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliography_reload__RAND__) == \'function\') bibliography_reload__RAND__(AppGini.current_author__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcript_reload__RAND__) == \'function\') transcript_reload__RAND__(AppGini.current_author__RAND__.value, AppGini.current_bibliography__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(token_sequence_reload__RAND__) == \'function\') token_sequence_reload__RAND__(AppGini.current_author__RAND__.value, AppGini.current_bibliography__RAND__.value, AppGini.current_transcript__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(invivo_code_reload__RAND__) == \'function\') invivo_code_reload__RAND__(AppGini.current_author__RAND__.value, AppGini.current_bibliography__RAND__.value, AppGini.current_transcript__RAND__.value, AppGini.current_token_sequence__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(startdate_reload__RAND__) == \'function\') startdate_reload__RAND__(AppGini.current_author__RAND__.value, AppGini.current_bibliography__RAND__.value, AppGini.current_transcript__RAND__.value, AppGini.current_token_sequence__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(herme_code_reload__RAND__) == \'function\') herme_code_reload__RAND__(AppGini.current_author__RAND__.value, AppGini.current_bibliography__RAND__.value, AppGini.current_transcript__RAND__.value, AppGini.current_token_sequence__RAND__.value);' : ''); ?>
			}, 10); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function author_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#author-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_author__RAND__.value, t: 'code_chrev_scenes', f: 'author' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="author"]').val(resp.results[0].id);
							$j('[id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(AppGini.current_author__RAND__.value);

							if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'code_chrev_scenes', f: 'author' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_author__RAND__.value = e.added.id;
				AppGini.current_author__RAND__.text = e.added.text;
				$j('[name="author"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(AppGini.current_author__RAND__.value);

				if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
			});

			if(!$j("#author-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_author__RAND__.value, t: 'code_chrev_scenes', f: 'author' },
					success: function(resp){
						$j('[name="author"]').val(resp.results[0].id);
						$j('[id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_author__RAND__.value, t: 'code_chrev_scenes', f: 'author' },
				success: function(resp){
					$j('[id=author-container__RAND__], [id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

					if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function bibliography_reload__RAND__(filterer_author){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#bibliography-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, id: AppGini.current_bibliography__RAND__.value, t: 'code_chrev_scenes', f: 'bibliography' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="bibliography"]').val(resp.results[0].id);
							$j('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($j('#author').val(), AppGini.current_bibliography__RAND__.value);

							if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, s: term, p: page, t: 'code_chrev_scenes', f: 'bibliography' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_bibliography__RAND__.value = e.added.id;
				AppGini.current_bibliography__RAND__.text = e.added.text;
				$j('[name="bibliography"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($j('#author').val(), AppGini.current_bibliography__RAND__.value);

				if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
			});

			if(!$j("#bibliography-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_bibliography__RAND__.value, t: 'code_chrev_scenes', f: 'bibliography' },
					success: function(resp){
						$j('[name="bibliography"]').val(resp.results[0].id);
						$j('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_bibliography__RAND__.value, t: 'code_chrev_scenes', f: 'bibliography' },
				success: function(resp){
					$j('[id=bibliography-container__RAND__], [id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

					if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function transcript_reload__RAND__(filterer_author, filterer_bibliography){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#transcript-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, id: AppGini.current_transcript__RAND__.value, t: 'code_chrev_scenes', f: 'transcript' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="transcript"]').val(resp.results[0].id);
							$j('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($j('#author').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);

							if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, s: term, p: page, t: 'code_chrev_scenes', f: 'transcript' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_transcript__RAND__.value = e.added.id;
				AppGini.current_transcript__RAND__.text = e.added.text;
				$j('[name="transcript"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($j('#author').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);

				if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
			});

			if(!$j("#transcript-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_transcript__RAND__.value, t: 'code_chrev_scenes', f: 'transcript' },
					success: function(resp){
						$j('[name="transcript"]').val(resp.results[0].id);
						$j('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_transcript__RAND__.value, t: 'code_chrev_scenes', f: 'transcript' },
				success: function(resp){
					$j('[id=transcript-container__RAND__], [id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

					if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function token_sequence_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#token_sequence-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, id: AppGini.current_token_sequence__RAND__.value, t: 'code_chrev_scenes', f: 'token_sequence' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="token_sequence"]').val(resp.results[0].id);
							$j('[id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(invivo_code_reload__RAND__) == 'function') invivo_code_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(startdate_reload__RAND__) == 'function') startdate_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(enddate_reload__RAND__) == 'function') enddate_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(person_reload__RAND__) == 'function') person_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(herme_code_reload__RAND__) == 'function') herme_code_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(impression_reload__RAND__) == 'function') impression_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(pc_reload__RAND__) == 'function') pc_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);

							if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, s: term, p: page, t: 'code_chrev_scenes', f: 'token_sequence' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_token_sequence__RAND__.value = e.added.id;
				AppGini.current_token_sequence__RAND__.text = e.added.text;
				$j('[name="token_sequence"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(invivo_code_reload__RAND__) == 'function') invivo_code_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(startdate_reload__RAND__) == 'function') startdate_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(enddate_reload__RAND__) == 'function') enddate_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(person_reload__RAND__) == 'function') person_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(herme_code_reload__RAND__) == 'function') herme_code_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(impression_reload__RAND__) == 'function') impression_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);
						if(typeof(pc_reload__RAND__) == 'function') pc_reload__RAND__($j('#author').val(), $j('#bibliography').val(), $j('#transcript').val(), AppGini.current_token_sequence__RAND__.value);

				if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
			});

			if(!$j("#token_sequence-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_token_sequence__RAND__.value, t: 'code_chrev_scenes', f: 'token_sequence' },
					success: function(resp){
						$j('[name="token_sequence"]').val(resp.results[0].id);
						$j('[id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_token_sequence__RAND__.value, t: 'code_chrev_scenes', f: 'token_sequence' },
				success: function(resp){
					$j('[id=token_sequence-container__RAND__], [id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }

					if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function invivo_code_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript, filterer_token_sequence){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#invivo_code-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, id: AppGini.current_invivo_code__RAND__.value, t: 'code_chrev_scenes', f: 'invivo_code' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="invivo_code"]').val(resp.results[0].id);
							$j('[id=invivo_code-container-readonly__RAND__]').html('<span id="invivo_code-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }


							if(typeof(invivo_code_update_autofills__RAND__) == 'function') invivo_code_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, s: term, p: page, t: 'code_chrev_scenes', f: 'invivo_code' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_invivo_code__RAND__.value = e.added.id;
				AppGini.current_invivo_code__RAND__.text = e.added.text;
				$j('[name="invivo_code"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }


				if(typeof(invivo_code_update_autofills__RAND__) == 'function') invivo_code_update_autofills__RAND__();
			});

			if(!$j("#invivo_code-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_invivo_code__RAND__.value, t: 'code_chrev_scenes', f: 'invivo_code' },
					success: function(resp){
						$j('[name="invivo_code"]').val(resp.results[0].id);
						$j('[id=invivo_code-container-readonly__RAND__]').html('<span id="invivo_code-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }

						if(typeof(invivo_code_update_autofills__RAND__) == 'function') invivo_code_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_invivo_code__RAND__.value, t: 'code_chrev_scenes', f: 'invivo_code' },
				success: function(resp){
					$j('[id=invivo_code-container__RAND__], [id=invivo_code-container-readonly__RAND__]').html('<span id="invivo_code-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }

					if(typeof(invivo_code_update_autofills__RAND__) == 'function') invivo_code_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function startdate_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript, filterer_token_sequence){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#startdate-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						<?php if(!$selected_id && !$filterer_startdate){ ?>
							data: { text: '1', t: 'code_chrev_scenes', f: 'startdate' },
						<?php }else{ ?>
							data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, id: AppGini.current_startdate__RAND__.value, t: 'code_chrev_scenes', f: 'startdate' },
						<?php } ?>

						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="startdate"]').val(resp.results[0].id);
							$j('[id=startdate-container-readonly__RAND__]').html('<span id="startdate-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }


							if(typeof(startdate_update_autofills__RAND__) == 'function') startdate_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, s: term, p: page, t: 'code_chrev_scenes', f: 'startdate' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_startdate__RAND__.value = e.added.id;
				AppGini.current_startdate__RAND__.text = e.added.text;
				$j('[name="startdate"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }


				if(typeof(startdate_update_autofills__RAND__) == 'function') startdate_update_autofills__RAND__();
			});

			if(!$j("#startdate-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_startdate__RAND__.value, t: 'code_chrev_scenes', f: 'startdate' },
					success: function(resp){
						$j('[name="startdate"]').val(resp.results[0].id);
						$j('[id=startdate-container-readonly__RAND__]').html('<span id="startdate-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }

						if(typeof(startdate_update_autofills__RAND__) == 'function') startdate_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_startdate__RAND__.value, t: 'code_chrev_scenes', f: 'startdate' },
				success: function(resp){
					$j('[id=startdate-container__RAND__], [id=startdate-container-readonly__RAND__]').html('<span id="startdate-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_invivo_view_parent]').hide(); }else{ $j('.btn[id=code_invivo_view_parent]').show(); }

					if(typeof(startdate_update_autofills__RAND__) == 'function') startdate_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function herme_code_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript, filterer_token_sequence){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#herme_code-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, id: AppGini.current_herme_code__RAND__.value, t: 'code_chrev_scenes', f: 'herme_code' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="herme_code"]').val(resp.results[0].id);
							$j('[id=herme_code-container-readonly__RAND__]').html('<span id="herme_code-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_herme_view_parent]').hide(); }else{ $j('.btn[id=code_herme_view_parent]').show(); }


							if(typeof(herme_code_update_autofills__RAND__) == 'function') herme_code_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, filterer_token_sequence: filterer_token_sequence, s: term, p: page, t: 'code_chrev_scenes', f: 'herme_code' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_herme_code__RAND__.value = e.added.id;
				AppGini.current_herme_code__RAND__.text = e.added.text;
				$j('[name="herme_code"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_herme_view_parent]').hide(); }else{ $j('.btn[id=code_herme_view_parent]').show(); }


				if(typeof(herme_code_update_autofills__RAND__) == 'function') herme_code_update_autofills__RAND__();
			});

			if(!$j("#herme_code-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_herme_code__RAND__.value, t: 'code_chrev_scenes', f: 'herme_code' },
					success: function(resp){
						$j('[name="herme_code"]').val(resp.results[0].id);
						$j('[id=herme_code-container-readonly__RAND__]').html('<span id="herme_code-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_herme_view_parent]').hide(); }else{ $j('.btn[id=code_herme_view_parent]').show(); }

						if(typeof(herme_code_update_autofills__RAND__) == 'function') herme_code_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_herme_code__RAND__.value, t: 'code_chrev_scenes', f: 'herme_code' },
				success: function(resp){
					$j('[id=herme_code-container__RAND__], [id=herme_code-container-readonly__RAND__]').html('<span id="herme_code-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=code_herme_view_parent]').hide(); }else{ $j('.btn[id=code_herme_view_parent]').show(); }

					if(typeof(herme_code_update_autofills__RAND__) == 'function') herme_code_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/code_chrev_scenes_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	}else{
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/code_chrev_scenes_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert){
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return code_chrev_scenes_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return code_chrev_scenes_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'AppGini.closeParentModal(); return false;';
	}else{
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return code_chrev_scenes_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)){
		$jsReadOnly .= "\tjQuery('#agent').replaceWith('<div class=\"form-control-static\" id=\"agent\">' + (jQuery('#agent').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#author').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcript').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcript_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#invivo_code').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#invivo_code_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#startdate').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#startdate_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#freecode').replaceWith('<div class=\"form-control-static\" id=\"freecode\">' + (jQuery('#freecode').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#herme_code').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#herme_code_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#comment').replaceWith('<div class=\"form-control-static\" id=\"comment\">' + (jQuery('#comment').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#scene').replaceWith('<div class=\"form-control-static\" id=\"scene\">' + (jQuery('#scene').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif($AllowInsert){
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(author)%%>', $combo_author->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(author)%%>', $combo_author->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(author)%%>', urlencode($combo_author->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(bibliography)%%>', $combo_bibliography->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(bibliography)%%>', $combo_bibliography->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(bibliography)%%>', urlencode($combo_bibliography->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(transcript)%%>', $combo_transcript->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(transcript)%%>', $combo_transcript->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(transcript)%%>', urlencode($combo_transcript->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(token_sequence)%%>', $combo_token_sequence->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(token_sequence)%%>', $combo_token_sequence->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(token_sequence)%%>', urlencode($combo_token_sequence->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(invivo_code)%%>', $combo_invivo_code->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(invivo_code)%%>', $combo_invivo_code->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(invivo_code)%%>', urlencode($combo_invivo_code->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(startdate)%%>', $combo_startdate->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(startdate)%%>', $combo_startdate->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(startdate)%%>', urlencode($combo_startdate->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(herme_code)%%>', $combo_herme_code->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(herme_code)%%>', $combo_herme_code->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(herme_code)%%>', urlencode($combo_herme_code->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array(  'author' => array('biblio_author', 'Author'), 'bibliography' => array('biblio_doc', 'Bibliography'), 'transcript' => array('biblio_transcript', 'Transcript'), 'token_sequence' => array('biblio_token', 'Token_sequence'), 'invivo_code' => array('code_invivo', 'Invivo_code'), 'startdate' => array('code_invivo', 'Startdate'), 'herme_code' => array('code_herme', 'Herme_code'));
	foreach($lookup_fields as $luf => $ptfc){
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']){
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']){
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(agent)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(author)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(bibliography)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(transcript)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(token_sequence)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(invivo_code)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(startdate)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(freecode)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(herme_code)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(comment)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(scene)%%>', '', $templateCode);

	// process values
	if($selected_id){
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(agent)%%>', safe_html($urow['agent']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(agent)%%>', html_attr($row['agent']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(agent)%%>', urlencode($urow['agent']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(author)%%>', safe_html($urow['author']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(author)%%>', html_attr($row['author']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author)%%>', urlencode($urow['author']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(bibliography)%%>', safe_html($urow['bibliography']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(bibliography)%%>', html_attr($row['bibliography']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography)%%>', urlencode($urow['bibliography']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', safe_html($urow['transcript']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', html_attr($row['transcript']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode($urow['transcript']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(token_sequence)%%>', safe_html($urow['token_sequence']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(token_sequence)%%>', html_attr($row['token_sequence']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(token_sequence)%%>', urlencode($urow['token_sequence']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(invivo_code)%%>', safe_html($urow['invivo_code']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(invivo_code)%%>', html_attr($row['invivo_code']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(invivo_code)%%>', urlencode($urow['invivo_code']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(startdate)%%>', safe_html($urow['startdate']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(startdate)%%>', html_attr($row['startdate']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(startdate)%%>', urlencode($urow['startdate']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(freecode)%%>', safe_html($urow['freecode']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(freecode)%%>', html_attr($row['freecode']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(freecode)%%>', urlencode($urow['freecode']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(herme_code)%%>', safe_html($urow['herme_code']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(herme_code)%%>', html_attr($row['herme_code']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(herme_code)%%>', urlencode($urow['herme_code']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(comment)%%>', safe_html($urow['comment']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(comment)%%>', html_attr($row['comment']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(comment)%%>', urlencode($urow['comment']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(scene)%%>', safe_html($urow['scene']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(scene)%%>', html_attr($row['scene']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(scene)%%>', urlencode($urow['scene']), $templateCode);
	}else{
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(agent)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(agent)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(author)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(bibliography)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(transcript)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(token_sequence)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(token_sequence)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(invivo_code)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(invivo_code)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(startdate)%%>', '1', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(startdate)%%>', urlencode('1'), $templateCode);
		$templateCode = str_replace('<%%VALUE(freecode)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(freecode)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(herme_code)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(herme_code)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(comment)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(comment)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(scene)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(scene)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode = str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == ''){
		$templateCode .= "\n\n<script>\$j(function(){\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id){
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\ttoken_sequence_update_autofills$rnd1 = function(){\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=token_sequence&id=' + encodeURIComponent('".addslashes($row['token_sequence'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=token_sequence&id=' + encodeURIComponent(AppGini.current_token_sequence{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#token_sequence$rnd1').prop('disabled', true); \$j('#token_sequenceLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#token_sequence$rnd1').prop('disabled', false); " : "\$j('#token_sequence$rnd1').prop('disabled', true); ")."\$j('#token_sequenceLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#token_sequence_caption').length) \$j('#token_sequence_caption').click(function(){ /* */ token_sequence_update_autofills$rnd1(); });\n";

	$templateCode .= "\tinvivo_code_update_autofills$rnd1 = function(){\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=invivo_code&id=' + encodeURIComponent('".addslashes($row['invivo_code'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=invivo_code&id=' + encodeURIComponent(AppGini.current_invivo_code{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#invivo_code$rnd1').prop('disabled', true); \$j('#invivo_codeLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#invivo_code$rnd1').prop('disabled', false); " : "\$j('#invivo_code$rnd1').prop('disabled', true); ")."\$j('#invivo_codeLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#invivo_code_caption').length) \$j('#invivo_code_caption').click(function(){ /* */ invivo_code_update_autofills$rnd1(); });\n";

	$templateCode .= "\therme_code_update_autofills$rnd1 = function(){\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=herme_code&id=' + encodeURIComponent('".addslashes($row['herme_code'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'code_chrev_scenes_autofill.php?rnd1=$rnd1&mfk=herme_code&id=' + encodeURIComponent(AppGini.current_herme_code{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#herme_code$rnd1').prop('disabled', true); \$j('#herme_codeLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#herme_code$rnd1').prop('disabled', false); " : "\$j('#herme_code$rnd1').prop('disabled', true); ")."\$j('#herme_codeLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#herme_code_caption').length) \$j('#herme_code_caption').click(function(){ /* */ herme_code_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('code_chrev_scenes');
	if($selected_id){
		$jdata = get_joined_record('code_chrev_scenes', $selected_id);
		if($jdata === false) $jdata = get_defaults('code_chrev_scenes');
		$rdata = $row;
	}
	$templateCode .= loadView('code_chrev_scenes-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: code_chrev_scenes_dv
	if(function_exists('code_chrev_scenes_dv')){
		$args=array();
		code_chrev_scenes_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>