<?php
// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

	$currDir = dirname(__FILE__);
	include_once("{$currDir}/lib.php");
	@include_once("{$currDir}/hooks/biblio_code_invivo.php");
	include_once("{$currDir}/biblio_code_invivo_dml.php");

	// mm: can the current member access this page?
	$perm = getTablePermissions('biblio_code_invivo');
	if(!$perm['access']) {
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout(function() { window.location = "index.php?signOut=1"; }, 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = 'biblio_code_invivo';

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV = [
		"`biblio_code_invivo`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`author_memberid`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`author_memberid`), '') /* Autor */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliograf&#237;a */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcripci&#243;n */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`biblio_code_invivo`.`invivo`" => "invivo",
		"if(`biblio_code_invivo`.`start_date`,date_format(`biblio_code_invivo`.`start_date`,'%d/%m/%Y %H:%i'),'')" => "start_date",
		"if(`biblio_code_invivo`.`end_date`,date_format(`biblio_code_invivo`.`end_date`,'%d/%m/%Y %H:%i'),'')" => "end_date",
		"`biblio_code_invivo`.`person`" => "person",
		"`biblio_code_invivo`.`place`" => "place",
		"`biblio_code_invivo`.`tags`" => "tags",
		"`biblio_code_invivo`.`comments`" => "comments",
		"IF(    CHAR_LENGTH(`biblio_team1`.`team`), CONCAT_WS('',   `biblio_team1`.`team`), '') /* Team */" => "team",
		"IF(    CHAR_LENGTH(`biblio_analyst1`.`last_name`) || CHAR_LENGTH(`biblio_analyst1`.`first_name`), CONCAT_WS('',   `biblio_analyst1`.`last_name`, ', ', `biblio_analyst1`.`first_name`), '') /* Analista principal */" => "biblio_lead",
		"IF(    CHAR_LENGTH(`class_evaluation1`.`evaluation_type`), CONCAT_WS('',   `class_evaluation1`.`evaluation_type`), '') /* Evaluaci&#243;n de datos */" => "data_evaluation",
	];
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = [
		1 => '`biblio_code_invivo`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => 5,
		6 => '`biblio_token1`.`token`',
		7 => 7,
		8 => '`biblio_code_invivo`.`start_date`',
		9 => '`biblio_code_invivo`.`end_date`',
		10 => 10,
		11 => 11,
		12 => 12,
		13 => 13,
		14 => '`biblio_team1`.`team`',
		15 => 15,
		16 => '`class_evaluation1`.`evaluation_type`',
	];

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV = [
		"`biblio_code_invivo`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`author_memberid`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`author_memberid`), '') /* Autor */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliograf&#237;a */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcripci&#243;n */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`biblio_code_invivo`.`invivo`" => "invivo",
		"if(`biblio_code_invivo`.`start_date`,date_format(`biblio_code_invivo`.`start_date`,'%d/%m/%Y %H:%i'),'')" => "start_date",
		"if(`biblio_code_invivo`.`end_date`,date_format(`biblio_code_invivo`.`end_date`,'%d/%m/%Y %H:%i'),'')" => "end_date",
		"`biblio_code_invivo`.`person`" => "person",
		"`biblio_code_invivo`.`place`" => "place",
		"`biblio_code_invivo`.`tags`" => "tags",
		"`biblio_code_invivo`.`comments`" => "comments",
		"IF(    CHAR_LENGTH(`biblio_team1`.`team`), CONCAT_WS('',   `biblio_team1`.`team`), '') /* Team */" => "team",
		"IF(    CHAR_LENGTH(`biblio_analyst1`.`last_name`) || CHAR_LENGTH(`biblio_analyst1`.`first_name`), CONCAT_WS('',   `biblio_analyst1`.`last_name`, ', ', `biblio_analyst1`.`first_name`), '') /* Analista principal */" => "biblio_lead",
		"IF(    CHAR_LENGTH(`class_evaluation1`.`evaluation_type`), CONCAT_WS('',   `class_evaluation1`.`evaluation_type`), '') /* Evaluaci&#243;n de datos */" => "data_evaluation",
	];
	// Fields that can be filtered
	$x->QueryFieldsFilters = [
		"`biblio_code_invivo`.`id`" => "ID",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`author_memberid`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`author_memberid`), '') /* Autor */" => "Autor",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliograf&#237;a */" => "Bibliograf&#237;a",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcripci&#243;n */" => "Transcripci&#243;n",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "Token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "Token",
		"`biblio_code_invivo`.`invivo`" => "Invivo",
		"`biblio_code_invivo`.`start_date`" => "Fecha inicio",
		"`biblio_code_invivo`.`end_date`" => "Fecha fin",
		"`biblio_code_invivo`.`person`" => "Persona(s)",
		"`biblio_code_invivo`.`place`" => "Lugar(es)",
		"`biblio_code_invivo`.`tags`" => "Etiquetas",
		"`biblio_code_invivo`.`comments`" => "Comentarios",
		"IF(    CHAR_LENGTH(`biblio_team1`.`team`), CONCAT_WS('',   `biblio_team1`.`team`), '') /* Team */" => "Team",
		"IF(    CHAR_LENGTH(`biblio_analyst1`.`last_name`) || CHAR_LENGTH(`biblio_analyst1`.`first_name`), CONCAT_WS('',   `biblio_analyst1`.`last_name`, ', ', `biblio_analyst1`.`first_name`), '') /* Analista principal */" => "Analista principal",
		"IF(    CHAR_LENGTH(`class_evaluation1`.`evaluation_type`), CONCAT_WS('',   `class_evaluation1`.`evaluation_type`), '') /* Evaluaci&#243;n de datos */" => "Evaluaci&#243;n de datos",
	];

	// Fields that can be quick searched
	$x->QueryFieldsQS = [
		"`biblio_code_invivo`.`id`" => "id",
		"IF(    CHAR_LENGTH(`biblio_author1`.`id`) || CHAR_LENGTH(`biblio_author1`.`author_memberid`), CONCAT_WS('',   `biblio_author1`.`id`, '   ', `biblio_author1`.`author_memberid`), '') /* Autor */" => "author",
		"IF(    CHAR_LENGTH(`biblio_doc1`.`id`) || CHAR_LENGTH(`biblio_doc1`.`title`), CONCAT_WS('',   `biblio_doc1`.`id`, '   ', `biblio_doc1`.`title`), '') /* Bibliograf&#237;a */" => "bibliography",
		"IF(    CHAR_LENGTH(`biblio_transcript1`.`id`) || CHAR_LENGTH(`biblio_transcript1`.`transcript_title`), CONCAT_WS('',   `biblio_transcript1`.`id`, '   ', `biblio_transcript1`.`transcript_title`), '') /* Transcripci&#243;n */" => "transcript",
		"IF(    CHAR_LENGTH(`biblio_token1`.`id`) || CHAR_LENGTH(`biblio_token1`.`token_sequence`), CONCAT_WS('',   `biblio_token1`.`id`, '   ', `biblio_token1`.`token_sequence`), '') /* Token_sequence */" => "token_sequence",
		"IF(    CHAR_LENGTH(`biblio_token1`.`token`), CONCAT_WS('',   `biblio_token1`.`token`), '') /* Token */" => "token",
		"`biblio_code_invivo`.`invivo`" => "invivo",
		"if(`biblio_code_invivo`.`start_date`,date_format(`biblio_code_invivo`.`start_date`,'%d/%m/%Y %H:%i'),'')" => "start_date",
		"if(`biblio_code_invivo`.`end_date`,date_format(`biblio_code_invivo`.`end_date`,'%d/%m/%Y %H:%i'),'')" => "end_date",
		"`biblio_code_invivo`.`person`" => "person",
		"`biblio_code_invivo`.`place`" => "place",
		"`biblio_code_invivo`.`tags`" => "tags",
		"`biblio_code_invivo`.`comments`" => "comments",
		"IF(    CHAR_LENGTH(`biblio_team1`.`team`), CONCAT_WS('',   `biblio_team1`.`team`), '') /* Team */" => "team",
		"IF(    CHAR_LENGTH(`biblio_analyst1`.`last_name`) || CHAR_LENGTH(`biblio_analyst1`.`first_name`), CONCAT_WS('',   `biblio_analyst1`.`last_name`, ', ', `biblio_analyst1`.`first_name`), '') /* Analista principal */" => "biblio_lead",
		"IF(    CHAR_LENGTH(`class_evaluation1`.`evaluation_type`), CONCAT_WS('',   `class_evaluation1`.`evaluation_type`), '') /* Evaluaci&#243;n de datos */" => "data_evaluation",
	];

	// Lookup fields that can be used as filterers
	$x->filterers = ['author' => 'Autor', 'bibliography' => 'Bibliograf&#237;a', 'transcript' => 'Transcripci&#243;n', 'token_sequence' => 'Token_sequence', 'team' => 'Team', 'biblio_lead' => 'Analista principal', 'data_evaluation' => 'Evaluaci&#243;n de datos', ];

	$x->QueryFrom = "`biblio_code_invivo` LEFT JOIN `biblio_author` as biblio_author1 ON `biblio_author1`.`id`=`biblio_code_invivo`.`author` LEFT JOIN `biblio_doc` as biblio_doc1 ON `biblio_doc1`.`id`=`biblio_code_invivo`.`bibliography` LEFT JOIN `biblio_transcript` as biblio_transcript1 ON `biblio_transcript1`.`id`=`biblio_code_invivo`.`transcript` LEFT JOIN `biblio_token` as biblio_token1 ON `biblio_token1`.`id`=`biblio_code_invivo`.`token_sequence` LEFT JOIN `biblio_team` as biblio_team1 ON `biblio_team1`.`id`=`biblio_code_invivo`.`team` LEFT JOIN `biblio_analyst` as biblio_analyst1 ON `biblio_analyst1`.`id`=`biblio_code_invivo`.`biblio_lead` LEFT JOIN `class_evaluation` as class_evaluation1 ON `class_evaluation1`.`id`=`biblio_code_invivo`.`data_evaluation` ";
	$x->QueryWhere = '';
	$x->QueryOrder = '';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm['view'] == 0 ? 1 : 0);
	$x->AllowDelete = $perm['delete'];
	$x->AllowMassDelete = (getLoggedAdmin() !== false);
	$x->AllowInsert = $perm['insert'];
	$x->AllowUpdate = $perm['edit'];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowPrintingDV = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 10;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation['quick search'];
	$x->ScriptFileName = 'biblio_code_invivo_view.php';
	$x->RedirectAfterInsert = 'biblio_code_invivo_view.php';
	$x->TableTitle = 'Invivo';
	$x->TableIcon = 'resources/table_icons/book_link.png';
	$x->PrimaryKey = '`biblio_code_invivo`.`id`';

	$x->ColWidth = [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, ];
	$x->ColCaption = ['ID', 'Autor', 'Bibliograf&#237;a', 'Transcripci&#243;n', 'Token_sequence', 'Token', 'Invivo', 'Fecha inicio', 'Fecha fin', 'Persona(s)', 'Lugar(es)', 'Etiquetas', 'Comentarios', 'Team', 'Analista principal', 'Evaluaci&#243;n de datos', ];
	$x->ColFieldName = ['id', 'author', 'bibliography', 'transcript', 'token_sequence', 'token', 'invivo', 'start_date', 'end_date', 'person', 'place', 'tags', 'comments', 'team', 'biblio_lead', 'data_evaluation', ];
	$x->ColNumber  = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, ];

	// template paths below are based on the app main directory
	$x->Template = 'templates/biblio_code_invivo_templateTV.html';
	$x->SelectedTemplate = 'templates/biblio_code_invivo_templateTVS.html';
	$x->TemplateDV = 'templates/biblio_code_invivo_templateDV.html';
	$x->TemplateDVP = 'templates/biblio_code_invivo_templateDVP.html';

	$x->ShowTableHeader = 1;
	$x->TVClasses = "";
	$x->DVClasses = "";
	$x->HasCalculatedFields = false;
	$x->AllowConsoleLog = false;
	$x->AllowDVNavigation = true;

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, ['user', 'group'])) { $DisplayRecords = 'all'; }
	if($perm['view'] == 1 || ($perm['view'] > 1 && $DisplayRecords == 'user' && !$_REQUEST['NoFilter_x'])) { // view owner only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `biblio_code_invivo`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='biblio_code_invivo' AND LCASE(`membership_userrecords`.`memberID`)='" . getLoggedMemberID() . "'";
	} elseif($perm['view'] == 2 || ($perm['view'] > 2 && $DisplayRecords == 'group' && !$_REQUEST['NoFilter_x'])) { // view group only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `biblio_code_invivo`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='biblio_code_invivo' AND `membership_userrecords`.`groupID`='" . getLoggedGroupID() . "'";
	} elseif($perm['view'] == 3) { // view all
		// no further action
	} elseif($perm['view'] == 0) { // view none
		$x->QueryFields = ['Not enough permissions' => 'NEP'];
		$x->QueryFrom = '`biblio_code_invivo`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: biblio_code_invivo_init
	$render = true;
	if(function_exists('biblio_code_invivo_init')) {
		$args = [];
		$render = biblio_code_invivo_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: biblio_code_invivo_header
	$headerCode = '';
	if(function_exists('biblio_code_invivo_header')) {
		$args = [];
		$headerCode = biblio_code_invivo_header($x->ContentType, getMemberInfo(), $args);
	}

	if(!$headerCode) {
		include_once("{$currDir}/header.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/header.php");
		echo str_replace('<%%HEADER%%>', ob_get_clean(), $headerCode);
	}

	echo $x->HTML;

	// hook: biblio_code_invivo_footer
	$footerCode = '';
	if(function_exists('biblio_code_invivo_footer')) {
		$args = [];
		$footerCode = biblio_code_invivo_footer($x->ContentType, getMemberInfo(), $args);
	}

	if(!$footerCode) {
		include_once("{$currDir}/footer.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/footer.php");
		echo str_replace('<%%FOOTER%%>', ob_get_clean(), $footerCode);
	}
