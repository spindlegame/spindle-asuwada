<?php
// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

	$currDir = dirname(__FILE__);
	include_once("{$currDir}/lib.php");
	@include_once("{$currDir}/hooks/hist_encounters.php");
	include_once("{$currDir}/hist_encounters_dml.php");

	// mm: can the current member access this page?
	$perm = getTablePermissions('hist_encounters');
	if(!$perm['access']) {
		echo error_message($Translation['tableAccessDenied'], false);
		echo '<script>setTimeout(function() { window.location = "index.php?signOut=1"; }, 2000);</script>';
		exit;
	}

	$x = new DataList;
	$x->TableName = 'hist_encounters';

	// Fields that can be displayed in the table view
	$x->QueryFieldsTV = [
		"`hist_encounters`.`id`" => "id",
		"IF(    CHAR_LENGTH(`bio_chrs1`.`id`) || CHAR_LENGTH(`bio_chrs1`.`character_name`), CONCAT_WS('',   `bio_chrs1`.`id`, '   ', `bio_chrs1`.`character_name`), '') /* Author A */" => "bio_chrA",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, '   ', `bio_story1`.`story_title`), '') /* Bibliography A */" => "bio_storyA",
		"IF(    CHAR_LENGTH(`bio_storylines1`.`id`) || CHAR_LENGTH(`bio_storylines1`.`storyline_title`), CONCAT_WS('',   `bio_storylines1`.`id`, '    ', `bio_storylines1`.`storyline_title`), '') /* Transcript A */" => "bio_storyline",
		"IF(    CHAR_LENGTH(`bio_storylines2`.`storyline`), CONCAT_WS('',   `bio_storylines2`.`storyline`, '   '), '') /* Token A */" => "bio_storytext",
		"IF(    CHAR_LENGTH(`hist_chr_scenes1`.`id`), CONCAT_WS('',   `hist_chr_scenes1`.`id`, '   '), '') /* Scene A */" => "sceneA",
		"IF(    CHAR_LENGTH(`bio_chrs2`.`id`) || CHAR_LENGTH(`bio_chrs2`.`character_name`), CONCAT_WS('',   `bio_chrs2`.`id`, '   ', `bio_chrs2`.`character_name`), '') /* Author B */" => "bio_chrB",
		"IF(    CHAR_LENGTH(`bio_story2`.`id`) || CHAR_LENGTH(`bio_story2`.`story_title`), CONCAT_WS('',   `bio_story2`.`id`, ' -  ', `bio_story2`.`story_title`), '') /* Author name B */" => "bio_storyB",
		"IF(    CHAR_LENGTH(`bio_storylines3`.`storyline_no`) || CHAR_LENGTH(`bio_storylines3`.`storyline_title`), CONCAT_WS('',   `bio_storylines3`.`storyline_no`, '   ', `bio_storylines3`.`storyline_title`), '') /* Bibliography B */" => "bio_storylineB",
		"IF(    CHAR_LENGTH(`bio_storylines4`.`storyline`), CONCAT_WS('',   `bio_storylines4`.`storyline`, '   '), '') /* Transcript B */" => "bio_storytextB",
		"`hist_encounters`.`type`" => "type",
		"`hist_encounters`.`conflicttype`" => "conflicttype",
		"`hist_encounters`.`story_scene`" => "story_scene",
		"`hist_encounters`.`nd_color`" => "nd_color",
		"`hist_encounters`.`nd_width`" => "nd_width",
		"`hist_encounters`.`nd_style`" => "nd_style",
		"`hist_encounters`.`nd_opacity`" => "nd_opacity",
		"`hist_encounters`.`nd_visibility`" => "nd_visibility",
		"`hist_encounters`.`lbl_lable`" => "lbl_lable",
		"`hist_encounters`.`lbl_color`" => "lbl_color",
		"`hist_encounters`.`lbl_size`" => "lbl_size",
	];
	// mapping incoming sort by requests to actual query fields
	$x->SortFields = [
		1 => '`hist_encounters`.`id`',
		2 => 2,
		3 => 3,
		4 => 4,
		5 => 5,
		6 => 6,
		7 => 7,
		8 => 8,
		9 => 9,
		10 => 10,
		11 => 11,
		12 => 12,
		13 => '`hist_encounters`.`story_scene`',
		14 => '`hist_encounters`.`nd_color`',
		15 => 15,
		16 => 16,
		17 => 17,
		18 => 18,
		19 => 19,
		20 => 20,
		21 => 21,
	];

	// Fields that can be displayed in the csv file
	$x->QueryFieldsCSV = [
		"`hist_encounters`.`id`" => "id",
		"IF(    CHAR_LENGTH(`bio_chrs1`.`id`) || CHAR_LENGTH(`bio_chrs1`.`character_name`), CONCAT_WS('',   `bio_chrs1`.`id`, '   ', `bio_chrs1`.`character_name`), '') /* Author A */" => "bio_chrA",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, '   ', `bio_story1`.`story_title`), '') /* Bibliography A */" => "bio_storyA",
		"IF(    CHAR_LENGTH(`bio_storylines1`.`id`) || CHAR_LENGTH(`bio_storylines1`.`storyline_title`), CONCAT_WS('',   `bio_storylines1`.`id`, '    ', `bio_storylines1`.`storyline_title`), '') /* Transcript A */" => "bio_storyline",
		"IF(    CHAR_LENGTH(`bio_storylines2`.`storyline`), CONCAT_WS('',   `bio_storylines2`.`storyline`, '   '), '') /* Token A */" => "bio_storytext",
		"IF(    CHAR_LENGTH(`hist_chr_scenes1`.`id`), CONCAT_WS('',   `hist_chr_scenes1`.`id`, '   '), '') /* Scene A */" => "sceneA",
		"IF(    CHAR_LENGTH(`bio_chrs2`.`id`) || CHAR_LENGTH(`bio_chrs2`.`character_name`), CONCAT_WS('',   `bio_chrs2`.`id`, '   ', `bio_chrs2`.`character_name`), '') /* Author B */" => "bio_chrB",
		"IF(    CHAR_LENGTH(`bio_story2`.`id`) || CHAR_LENGTH(`bio_story2`.`story_title`), CONCAT_WS('',   `bio_story2`.`id`, ' -  ', `bio_story2`.`story_title`), '') /* Author name B */" => "bio_storyB",
		"IF(    CHAR_LENGTH(`bio_storylines3`.`storyline_no`) || CHAR_LENGTH(`bio_storylines3`.`storyline_title`), CONCAT_WS('',   `bio_storylines3`.`storyline_no`, '   ', `bio_storylines3`.`storyline_title`), '') /* Bibliography B */" => "bio_storylineB",
		"IF(    CHAR_LENGTH(`bio_storylines4`.`storyline`), CONCAT_WS('',   `bio_storylines4`.`storyline`, '   '), '') /* Transcript B */" => "bio_storytextB",
		"`hist_encounters`.`type`" => "type",
		"`hist_encounters`.`conflicttype`" => "conflicttype",
		"`hist_encounters`.`story_scene`" => "story_scene",
		"`hist_encounters`.`nd_color`" => "nd_color",
		"`hist_encounters`.`nd_width`" => "nd_width",
		"`hist_encounters`.`nd_style`" => "nd_style",
		"`hist_encounters`.`nd_opacity`" => "nd_opacity",
		"`hist_encounters`.`nd_visibility`" => "nd_visibility",
		"`hist_encounters`.`lbl_lable`" => "lbl_lable",
		"`hist_encounters`.`lbl_color`" => "lbl_color",
		"`hist_encounters`.`lbl_size`" => "lbl_size",
	];
	// Fields that can be filtered
	$x->QueryFieldsFilters = [
		"`hist_encounters`.`id`" => "Id",
		"IF(    CHAR_LENGTH(`bio_chrs1`.`id`) || CHAR_LENGTH(`bio_chrs1`.`character_name`), CONCAT_WS('',   `bio_chrs1`.`id`, '   ', `bio_chrs1`.`character_name`), '') /* Author A */" => "Author A",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, '   ', `bio_story1`.`story_title`), '') /* Bibliography A */" => "Bibliography A",
		"IF(    CHAR_LENGTH(`bio_storylines1`.`id`) || CHAR_LENGTH(`bio_storylines1`.`storyline_title`), CONCAT_WS('',   `bio_storylines1`.`id`, '    ', `bio_storylines1`.`storyline_title`), '') /* Transcript A */" => "Transcript A",
		"IF(    CHAR_LENGTH(`bio_storylines2`.`storyline`), CONCAT_WS('',   `bio_storylines2`.`storyline`, '   '), '') /* Token A */" => "Token A",
		"IF(    CHAR_LENGTH(`hist_chr_scenes1`.`id`), CONCAT_WS('',   `hist_chr_scenes1`.`id`, '   '), '') /* Scene A */" => "Scene A",
		"IF(    CHAR_LENGTH(`bio_chrs2`.`id`) || CHAR_LENGTH(`bio_chrs2`.`character_name`), CONCAT_WS('',   `bio_chrs2`.`id`, '   ', `bio_chrs2`.`character_name`), '') /* Author B */" => "Author B",
		"IF(    CHAR_LENGTH(`bio_story2`.`id`) || CHAR_LENGTH(`bio_story2`.`story_title`), CONCAT_WS('',   `bio_story2`.`id`, ' -  ', `bio_story2`.`story_title`), '') /* Author name B */" => "Author name B",
		"IF(    CHAR_LENGTH(`bio_storylines3`.`storyline_no`) || CHAR_LENGTH(`bio_storylines3`.`storyline_title`), CONCAT_WS('',   `bio_storylines3`.`storyline_no`, '   ', `bio_storylines3`.`storyline_title`), '') /* Bibliography B */" => "Bibliography B",
		"IF(    CHAR_LENGTH(`bio_storylines4`.`storyline`), CONCAT_WS('',   `bio_storylines4`.`storyline`, '   '), '') /* Transcript B */" => "Transcript B",
		"`hist_encounters`.`type`" => "Type",
		"`hist_encounters`.`conflicttype`" => "Conflicttype",
		"`hist_encounters`.`story_scene`" => "Story_scene",
		"`hist_encounters`.`nd_color`" => "Nd_color",
		"`hist_encounters`.`nd_width`" => "Nd_width",
		"`hist_encounters`.`nd_style`" => "Nd_style",
		"`hist_encounters`.`nd_opacity`" => "Nd_opacity",
		"`hist_encounters`.`nd_visibility`" => "Nd_visibility",
		"`hist_encounters`.`lbl_lable`" => "Lbl_lable",
		"`hist_encounters`.`lbl_color`" => "Lbl_color",
		"`hist_encounters`.`lbl_size`" => "Lbl_size",
	];

	// Fields that can be quick searched
	$x->QueryFieldsQS = [
		"`hist_encounters`.`id`" => "id",
		"IF(    CHAR_LENGTH(`bio_chrs1`.`id`) || CHAR_LENGTH(`bio_chrs1`.`character_name`), CONCAT_WS('',   `bio_chrs1`.`id`, '   ', `bio_chrs1`.`character_name`), '') /* Author A */" => "bio_chrA",
		"IF(    CHAR_LENGTH(`bio_story1`.`id`) || CHAR_LENGTH(`bio_story1`.`story_title`), CONCAT_WS('',   `bio_story1`.`id`, '   ', `bio_story1`.`story_title`), '') /* Bibliography A */" => "bio_storyA",
		"IF(    CHAR_LENGTH(`bio_storylines1`.`id`) || CHAR_LENGTH(`bio_storylines1`.`storyline_title`), CONCAT_WS('',   `bio_storylines1`.`id`, '    ', `bio_storylines1`.`storyline_title`), '') /* Transcript A */" => "bio_storyline",
		"IF(    CHAR_LENGTH(`bio_storylines2`.`storyline`), CONCAT_WS('',   `bio_storylines2`.`storyline`, '   '), '') /* Token A */" => "bio_storytext",
		"IF(    CHAR_LENGTH(`hist_chr_scenes1`.`id`), CONCAT_WS('',   `hist_chr_scenes1`.`id`, '   '), '') /* Scene A */" => "sceneA",
		"IF(    CHAR_LENGTH(`bio_chrs2`.`id`) || CHAR_LENGTH(`bio_chrs2`.`character_name`), CONCAT_WS('',   `bio_chrs2`.`id`, '   ', `bio_chrs2`.`character_name`), '') /* Author B */" => "bio_chrB",
		"IF(    CHAR_LENGTH(`bio_story2`.`id`) || CHAR_LENGTH(`bio_story2`.`story_title`), CONCAT_WS('',   `bio_story2`.`id`, ' -  ', `bio_story2`.`story_title`), '') /* Author name B */" => "bio_storyB",
		"IF(    CHAR_LENGTH(`bio_storylines3`.`storyline_no`) || CHAR_LENGTH(`bio_storylines3`.`storyline_title`), CONCAT_WS('',   `bio_storylines3`.`storyline_no`, '   ', `bio_storylines3`.`storyline_title`), '') /* Bibliography B */" => "bio_storylineB",
		"IF(    CHAR_LENGTH(`bio_storylines4`.`storyline`), CONCAT_WS('',   `bio_storylines4`.`storyline`, '   '), '') /* Transcript B */" => "bio_storytextB",
		"`hist_encounters`.`type`" => "type",
		"`hist_encounters`.`conflicttype`" => "conflicttype",
		"`hist_encounters`.`story_scene`" => "story_scene",
		"`hist_encounters`.`nd_color`" => "nd_color",
		"`hist_encounters`.`nd_width`" => "nd_width",
		"`hist_encounters`.`nd_style`" => "nd_style",
		"`hist_encounters`.`nd_opacity`" => "nd_opacity",
		"`hist_encounters`.`nd_visibility`" => "nd_visibility",
		"`hist_encounters`.`lbl_lable`" => "lbl_lable",
		"`hist_encounters`.`lbl_color`" => "lbl_color",
		"`hist_encounters`.`lbl_size`" => "lbl_size",
	];

	// Lookup fields that can be used as filterers
	$x->filterers = ['bio_chrA' => 'Author A', 'bio_storyA' => 'Bibliography A', 'bio_storyline' => 'Transcript A', 'bio_storytext' => 'Token A', 'sceneA' => 'Scene A', 'bio_chrB' => 'Author B', 'bio_storyB' => 'Author name B', 'bio_storylineB' => 'Bibliography B', 'bio_storytextB' => 'Transcript B', ];

	$x->QueryFrom = "`hist_encounters` LEFT JOIN `bio_chrs` as bio_chrs1 ON `bio_chrs1`.`id`=`hist_encounters`.`bio_chrA` LEFT JOIN `bio_story` as bio_story1 ON `bio_story1`.`id`=`hist_encounters`.`bio_storyA` LEFT JOIN `bio_storylines` as bio_storylines1 ON `bio_storylines1`.`id`=`hist_encounters`.`bio_storyline` LEFT JOIN `bio_storylines` as bio_storylines2 ON `bio_storylines2`.`id`=`hist_encounters`.`bio_storytext` LEFT JOIN `hist_chr_scenes` as hist_chr_scenes1 ON `hist_chr_scenes1`.`id`=`hist_encounters`.`sceneA` LEFT JOIN `bio_chrs` as bio_chrs2 ON `bio_chrs2`.`id`=`hist_encounters`.`bio_chrB` LEFT JOIN `bio_story` as bio_story2 ON `bio_story2`.`id`=`hist_encounters`.`bio_storyB` LEFT JOIN `bio_storylines` as bio_storylines3 ON `bio_storylines3`.`id`=`hist_encounters`.`bio_storylineB` LEFT JOIN `bio_storylines` as bio_storylines4 ON `bio_storylines4`.`id`=`hist_encounters`.`bio_storytextB` ";
	$x->QueryWhere = '';
	$x->QueryOrder = '';

	$x->AllowSelection = 1;
	$x->HideTableView = ($perm['view'] == 0 ? 1 : 0);
	$x->AllowDelete = $perm['delete'];
	$x->AllowMassDelete = (getLoggedAdmin() !== false);
	$x->AllowInsert = $perm['insert'];
	$x->AllowUpdate = $perm['edit'];
	$x->SeparateDV = 1;
	$x->AllowDeleteOfParents = 0;
	$x->AllowFilters = 1;
	$x->AllowSavingFilters = 1;
	$x->AllowSorting = 1;
	$x->AllowNavigation = 1;
	$x->AllowPrinting = 1;
	$x->AllowPrintingDV = 1;
	$x->AllowCSV = 1;
	$x->RecordsPerPage = 10;
	$x->QuickSearch = 1;
	$x->QuickSearchText = $Translation['quick search'];
	$x->ScriptFileName = 'hist_encounters_view.php';
	$x->RedirectAfterInsert = 'hist_encounters_view.php?SelectedID=#ID#';
	$x->TableTitle = 'Historical moments';
	$x->TableIcon = 'resources/table_icons/arrow_refresh.png';
	$x->PrimaryKey = '`hist_encounters`.`id`';

	$x->ColWidth = [150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, ];
	$x->ColCaption = ['Id', 'Author A', 'Bibliography A', 'Transcript A', 'Token A', 'Scene A', 'Author B', 'Author name B', 'Bibliography B', 'Transcript B', 'Type', 'Conflicttype', 'Story_scene', 'Nd_color', 'Nd_width', 'Nd_style', 'Nd_opacity', 'Nd_visibility', 'Lbl_lable', 'Lbl_color', 'Lbl_size', ];
	$x->ColFieldName = ['id', 'bio_chrA', 'bio_storyA', 'bio_storyline', 'bio_storytext', 'sceneA', 'bio_chrB', 'bio_storyB', 'bio_storylineB', 'bio_storytextB', 'type', 'conflicttype', 'story_scene', 'nd_color', 'nd_width', 'nd_style', 'nd_opacity', 'nd_visibility', 'lbl_lable', 'lbl_color', 'lbl_size', ];
	$x->ColNumber  = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ];

	// template paths below are based on the app main directory
	$x->Template = 'templates/hist_encounters_templateTV.html';
	$x->SelectedTemplate = 'templates/hist_encounters_templateTVS.html';
	$x->TemplateDV = 'templates/hist_encounters_templateDV.html';
	$x->TemplateDVP = 'templates/hist_encounters_templateDVP.html';

	$x->ShowTableHeader = 1;
	$x->TVClasses = "";
	$x->DVClasses = "";
	$x->HasCalculatedFields = false;
	$x->AllowConsoleLog = false;
	$x->AllowDVNavigation = true;

	// mm: build the query based on current member's permissions
	$DisplayRecords = $_REQUEST['DisplayRecords'];
	if(!in_array($DisplayRecords, ['user', 'group'])) { $DisplayRecords = 'all'; }
	if($perm['view'] == 1 || ($perm['view'] > 1 && $DisplayRecords == 'user' && !$_REQUEST['NoFilter_x'])) { // view owner only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `hist_encounters`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='hist_encounters' AND LCASE(`membership_userrecords`.`memberID`)='" . getLoggedMemberID() . "'";
	} elseif($perm['view'] == 2 || ($perm['view'] > 2 && $DisplayRecords == 'group' && !$_REQUEST['NoFilter_x'])) { // view group only
		$x->QueryFrom .= ', `membership_userrecords`';
		$x->QueryWhere = "WHERE `hist_encounters`.`id`=`membership_userrecords`.`pkValue` AND `membership_userrecords`.`tableName`='hist_encounters' AND `membership_userrecords`.`groupID`='" . getLoggedGroupID() . "'";
	} elseif($perm['view'] == 3) { // view all
		// no further action
	} elseif($perm['view'] == 0) { // view none
		$x->QueryFields = ['Not enough permissions' => 'NEP'];
		$x->QueryFrom = '`hist_encounters`';
		$x->QueryWhere = '';
		$x->DefaultSortField = '';
	}
	// hook: hist_encounters_init
	$render = true;
	if(function_exists('hist_encounters_init')) {
		$args = [];
		$render = hist_encounters_init($x, getMemberInfo(), $args);
	}

	if($render) $x->Render();

	// hook: hist_encounters_header
	$headerCode = '';
	if(function_exists('hist_encounters_header')) {
		$args = [];
		$headerCode = hist_encounters_header($x->ContentType, getMemberInfo(), $args);
	}

	if(!$headerCode) {
		include_once("{$currDir}/header.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/header.php");
		echo str_replace('<%%HEADER%%>', ob_get_clean(), $headerCode);
	}

	echo $x->HTML;

	// hook: hist_encounters_footer
	$footerCode = '';
	if(function_exists('hist_encounters_footer')) {
		$args = [];
		$footerCode = hist_encounters_footer($x->ContentType, getMemberInfo(), $args);
	}

	if(!$footerCode) {
		include_once("{$currDir}/footer.php"); 
	} else {
		ob_start();
		include_once("{$currDir}/footer.php");
		echo str_replace('<%%FOOTER%%>', ob_get_clean(), $footerCode);
	}
