<?php

// Data functions (insert, update, delete, form) for table storypoints_static

// This script and data application were generated by AppGini 5.76
// Download AppGini for free from https://bigprof.com/appgini/download/

function storypoints_static_insert(){
	global $Translation;

	// mm: can member insert record?
	$arrPerm=getTablePermissions('storypoints_static');
	if(!$arrPerm[1]){
		return false;
	}

	$data['story'] = makeSafe($_REQUEST['story']);
		if($data['story'] == empty_lookup_value){ $data['story'] = ''; }
	$data['throughline'] = makeSafe($_REQUEST['throughline']);
		if($data['throughline'] == empty_lookup_value){ $data['throughline'] = ''; }
	$data['throughline_domain'] = makeSafe($_REQUEST['throughline_domain']);
		if($data['throughline_domain'] == empty_lookup_value){ $data['throughline_domain'] = ''; }
	$data['concern'] = makeSafe($_REQUEST['concern']);
		if($data['concern'] == empty_lookup_value){ $data['concern'] = ''; }
	$data['issue'] = makeSafe($_REQUEST['issue']);
		if($data['issue'] == empty_lookup_value){ $data['issue'] = ''; }
	$data['problem'] = makeSafe($_REQUEST['problem']);
		if($data['problem'] == empty_lookup_value){ $data['problem'] = ''; }
	$data['solution'] = makeSafe($_REQUEST['solution']);
		if($data['solution'] == empty_lookup_value){ $data['solution'] = ''; }
	$data['symptom'] = makeSafe($_REQUEST['symptom']);
		if($data['symptom'] == empty_lookup_value){ $data['symptom'] = ''; }
	$data['response'] = makeSafe($_REQUEST['response']);
		if($data['response'] == empty_lookup_value){ $data['response'] = ''; }
	$data['catalyst'] = makeSafe($_REQUEST['catalyst']);
		if($data['catalyst'] == empty_lookup_value){ $data['catalyst'] = ''; }
	$data['inhibitor'] = makeSafe($_REQUEST['inhibitor']);
		if($data['inhibitor'] == empty_lookup_value){ $data['inhibitor'] = ''; }
	$data['benchmark'] = makeSafe($_REQUEST['benchmark']);
		if($data['benchmark'] == empty_lookup_value){ $data['benchmark'] = ''; }

	// hook: storypoints_static_before_insert
	if(function_exists('storypoints_static_before_insert')){
		$args=array();
		if(!storypoints_static_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o = array('silentErrors' => true);
	sql('insert into `storypoints_static` set       `story`=' . (($data['story'] !== '' && $data['story'] !== NULL) ? "'{$data['story']}'" : 'NULL') . ', `throughline`=' . (($data['throughline'] !== '' && $data['throughline'] !== NULL) ? "'{$data['throughline']}'" : 'NULL') . ', `throughline_domain`=' . (($data['throughline_domain'] !== '' && $data['throughline_domain'] !== NULL) ? "'{$data['throughline_domain']}'" : 'NULL') . ', `concern`=' . (($data['concern'] !== '' && $data['concern'] !== NULL) ? "'{$data['concern']}'" : 'NULL') . ', `issue`=' . (($data['issue'] !== '' && $data['issue'] !== NULL) ? "'{$data['issue']}'" : 'NULL') . ', `problem`=' . (($data['problem'] !== '' && $data['problem'] !== NULL) ? "'{$data['problem']}'" : 'NULL') . ', `solution`=' . (($data['solution'] !== '' && $data['solution'] !== NULL) ? "'{$data['solution']}'" : 'NULL') . ', `symptom`=' . (($data['symptom'] !== '' && $data['symptom'] !== NULL) ? "'{$data['symptom']}'" : 'NULL') . ', `response`=' . (($data['response'] !== '' && $data['response'] !== NULL) ? "'{$data['response']}'" : 'NULL') . ', `catalyst`=' . (($data['catalyst'] !== '' && $data['catalyst'] !== NULL) ? "'{$data['catalyst']}'" : 'NULL') . ', `inhibitor`=' . (($data['inhibitor'] !== '' && $data['inhibitor'] !== NULL) ? "'{$data['inhibitor']}'" : 'NULL') . ', `benchmark`=' . (($data['benchmark'] !== '' && $data['benchmark'] !== NULL) ? "'{$data['benchmark']}'" : 'NULL'), $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"storypoints_static_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID = db_insert_id(db_link());

	// hook: storypoints_static_after_insert
	if(function_exists('storypoints_static_after_insert')){
		$res = sql("select * from `storypoints_static` where `id`='" . makeSafe($recID, false) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=array();
		if(!storypoints_static_after_insert($data, getMemberInfo(), $args)){ return $recID; }
	}

	// mm: save ownership data
	set_record_owner('storypoints_static', $recID, getLoggedMemberID());

	return $recID;
}

function storypoints_static_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('storypoints_static');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='storypoints_static' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='storypoints_static' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: storypoints_static_before_delete
	if(function_exists('storypoints_static_before_delete')){
		$args=array();
		if(!storypoints_static_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	// child table: character_development
	$res = sql("select `id` from `storypoints_static` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `character_development` where `mcs_problem`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "character_development", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "character_development", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='storypoints_static_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='storypoints_static_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	// child table: storydynamic
	$res = sql("select `id` from `storypoints_static` where `id`='$selected_id'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("select count(1) from `storydynamic` where `os_goal_domain`='".addslashes($id[0])."'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "storydynamic", $RetMsg);
		return $RetMsg;
	}elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks){
		$RetMsg = $Translation["confirm delete"];
		$RetMsg = str_replace("<RelatedRecords>", $rirow[0], $RetMsg);
		$RetMsg = str_replace("<TableName>", "storydynamic", $RetMsg);
		$RetMsg = str_replace("<Delete>", "<input type=\"button\" class=\"button\" value=\"".$Translation['yes']."\" onClick=\"window.location='storypoints_static_view.php?SelectedID=".urlencode($selected_id)."&delete_x=1&confirmed=1';\">", $RetMsg);
		$RetMsg = str_replace("<Cancel>", "<input type=\"button\" class=\"button\" value=\"".$Translation['no']."\" onClick=\"window.location='storypoints_static_view.php?SelectedID=".urlencode($selected_id)."';\">", $RetMsg);
		return $RetMsg;
	}

	sql("delete from `storypoints_static` where `id`='$selected_id'", $eo);

	// hook: storypoints_static_after_delete
	if(function_exists('storypoints_static_after_delete')){
		$args=array();
		storypoints_static_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='storypoints_static' and pkValue='$selected_id'", $eo);
}

function storypoints_static_update($selected_id){
	global $Translation;

	// mm: can member edit record?
	$arrPerm=getTablePermissions('storypoints_static');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='storypoints_static' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='storypoints_static' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['story'] = makeSafe($_REQUEST['story']);
		if($data['story'] == empty_lookup_value){ $data['story'] = ''; }
	$data['throughline'] = makeSafe($_REQUEST['throughline']);
		if($data['throughline'] == empty_lookup_value){ $data['throughline'] = ''; }
	$data['throughline_domain'] = makeSafe($_REQUEST['throughline_domain']);
		if($data['throughline_domain'] == empty_lookup_value){ $data['throughline_domain'] = ''; }
	$data['concern'] = makeSafe($_REQUEST['concern']);
		if($data['concern'] == empty_lookup_value){ $data['concern'] = ''; }
	$data['issue'] = makeSafe($_REQUEST['issue']);
		if($data['issue'] == empty_lookup_value){ $data['issue'] = ''; }
	$data['problem'] = makeSafe($_REQUEST['problem']);
		if($data['problem'] == empty_lookup_value){ $data['problem'] = ''; }
	$data['solution'] = makeSafe($_REQUEST['solution']);
		if($data['solution'] == empty_lookup_value){ $data['solution'] = ''; }
	$data['symptom'] = makeSafe($_REQUEST['symptom']);
		if($data['symptom'] == empty_lookup_value){ $data['symptom'] = ''; }
	$data['response'] = makeSafe($_REQUEST['response']);
		if($data['response'] == empty_lookup_value){ $data['response'] = ''; }
	$data['catalyst'] = makeSafe($_REQUEST['catalyst']);
		if($data['catalyst'] == empty_lookup_value){ $data['catalyst'] = ''; }
	$data['inhibitor'] = makeSafe($_REQUEST['inhibitor']);
		if($data['inhibitor'] == empty_lookup_value){ $data['inhibitor'] = ''; }
	$data['benchmark'] = makeSafe($_REQUEST['benchmark']);
		if($data['benchmark'] == empty_lookup_value){ $data['benchmark'] = ''; }
	$data['selectedID']=makeSafe($selected_id);

	// hook: storypoints_static_before_update
	if(function_exists('storypoints_static_before_update')){
		$args=array();
		if(!storypoints_static_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `storypoints_static` set       `story`=' . (($data['story'] !== '' && $data['story'] !== NULL) ? "'{$data['story']}'" : 'NULL') . ', `throughline`=' . (($data['throughline'] !== '' && $data['throughline'] !== NULL) ? "'{$data['throughline']}'" : 'NULL') . ', `throughline_domain`=' . (($data['throughline_domain'] !== '' && $data['throughline_domain'] !== NULL) ? "'{$data['throughline_domain']}'" : 'NULL') . ', `concern`=' . (($data['concern'] !== '' && $data['concern'] !== NULL) ? "'{$data['concern']}'" : 'NULL') . ', `issue`=' . (($data['issue'] !== '' && $data['issue'] !== NULL) ? "'{$data['issue']}'" : 'NULL') . ', `problem`=' . (($data['problem'] !== '' && $data['problem'] !== NULL) ? "'{$data['problem']}'" : 'NULL') . ', `solution`=' . (($data['solution'] !== '' && $data['solution'] !== NULL) ? "'{$data['solution']}'" : 'NULL') . ', `symptom`=' . (($data['symptom'] !== '' && $data['symptom'] !== NULL) ? "'{$data['symptom']}'" : 'NULL') . ', `response`=' . (($data['response'] !== '' && $data['response'] !== NULL) ? "'{$data['response']}'" : 'NULL') . ', `catalyst`=' . (($data['catalyst'] !== '' && $data['catalyst'] !== NULL) ? "'{$data['catalyst']}'" : 'NULL') . ', `inhibitor`=' . (($data['inhibitor'] !== '' && $data['inhibitor'] !== NULL) ? "'{$data['inhibitor']}'" : 'NULL') . ', `benchmark`=' . (($data['benchmark'] !== '' && $data['benchmark'] !== NULL) ? "'{$data['benchmark']}'" : 'NULL') . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="storypoints_static_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: storypoints_static_after_update
	if(function_exists('storypoints_static_after_update')){
		$res = sql("SELECT * FROM `storypoints_static` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!storypoints_static_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='storypoints_static' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function storypoints_static_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = ''){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('storypoints_static');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_story = thisOr(undo_magic_quotes($_REQUEST['filterer_story']), '');
	$filterer_throughline = thisOr(undo_magic_quotes($_REQUEST['filterer_throughline']), '');
	$filterer_throughline_domain = thisOr(undo_magic_quotes($_REQUEST['filterer_throughline_domain']), '');
	$filterer_concern = thisOr(undo_magic_quotes($_REQUEST['filterer_concern']), '');
	$filterer_issue = thisOr(undo_magic_quotes($_REQUEST['filterer_issue']), '');
	$filterer_problem = thisOr(undo_magic_quotes($_REQUEST['filterer_problem']), '');
	$filterer_solution = thisOr(undo_magic_quotes($_REQUEST['filterer_solution']), '');
	$filterer_symptom = thisOr(undo_magic_quotes($_REQUEST['filterer_symptom']), '');
	$filterer_response = thisOr(undo_magic_quotes($_REQUEST['filterer_response']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_concern && !$filterer_throughline_domain) $filterer_throughline_domain = sqlValue("select domain from class_dramatica_concern where id='" . makeSafe($filterer_concern) . "'");
	if($filterer_issue && !$filterer_throughline_domain) $filterer_throughline_domain = sqlValue("select domain from class_dramatica_issue where id='" . makeSafe($filterer_issue) . "'");
	if($filterer_issue && !$filterer_concern) $filterer_concern = sqlValue("select concern from class_dramatica_issue where id='" . makeSafe($filterer_issue) . "'");
	if($filterer_problem && !$filterer_throughline_domain) $filterer_throughline_domain = sqlValue("select domain from class_dramatica_themes where id='" . makeSafe($filterer_problem) . "'");
	if($filterer_problem && !$filterer_concern) $filterer_concern = sqlValue("select concern from class_dramatica_themes where id='" . makeSafe($filterer_problem) . "'");
	if($filterer_problem && !$filterer_issue) $filterer_issue = sqlValue("select issue from class_dramatica_themes where id='" . makeSafe($filterer_problem) . "'");
	if($filterer_solution && !$filterer_throughline_domain) $filterer_throughline_domain = sqlValue("select domain from class_dramatica_themes where id='" . makeSafe($filterer_solution) . "'");
	if($filterer_solution && !$filterer_concern) $filterer_concern = sqlValue("select concern from class_dramatica_themes where id='" . makeSafe($filterer_solution) . "'");
	if($filterer_solution && !$filterer_issue) $filterer_issue = sqlValue("select issue from class_dramatica_themes where id='" . makeSafe($filterer_solution) . "'");
	if($filterer_symptom && !$filterer_throughline_domain) $filterer_throughline_domain = sqlValue("select domain from class_dramatica_themes where id='" . makeSafe($filterer_symptom) . "'");
	if($filterer_symptom && !$filterer_concern) $filterer_concern = sqlValue("select concern from class_dramatica_themes where id='" . makeSafe($filterer_symptom) . "'");
	if($filterer_response && !$filterer_throughline_domain) $filterer_throughline_domain = sqlValue("select domain from class_dramatica_themes where id='" . makeSafe($filterer_response) . "'");
	if($filterer_response && !$filterer_concern) $filterer_concern = sqlValue("select concern from class_dramatica_themes where id='" . makeSafe($filterer_response) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: story
	$combo_story = new DataCombo;
	// combobox: throughline
	$combo_throughline = new DataCombo;
	// combobox: throughline_domain
	$combo_throughline_domain = new DataCombo;
	// combobox: concern, filterable by: throughline_domain
	$combo_concern = new DataCombo;
	// combobox: issue, filterable by: throughline_domain,concern
	$combo_issue = new DataCombo;
	// combobox: problem, filterable by: throughline_domain,concern,issue
	$combo_problem = new DataCombo;
	// combobox: solution, filterable by: throughline_domain,concern,issue
	$combo_solution = new DataCombo;
	// combobox: symptom, filterable by: throughline_domain,concern
	$combo_symptom = new DataCombo;
	// combobox: response, filterable by: throughline_domain,concern
	$combo_response = new DataCombo;
	// combobox: catalyst, filterable by: throughline_domain,concern
	$combo_catalyst = new DataCombo;
	// combobox: inhibitor, filterable by: throughline_domain,concern
	$combo_inhibitor = new DataCombo;
	// combobox: becnhmark, filterable by: throughline_domain,concern
	$combo_benchmark = new DataCombo;

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='storypoints_static' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='storypoints_static' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `storypoints_static` where `id`='".makeSafe($selected_id)."'", $eo);
		if(!($row = db_fetch_array($res))){
			return error_message($Translation['No records found'], 'storypoints_static_view.php', false);
		}
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_story->SelectedData = $row['story'];
		$combo_throughline->SelectedData = $row['throughline'];
		$combo_throughline_domain->SelectedData = $row['throughline_domain'];
		$combo_concern->SelectedData = $row['concern'];
		$combo_issue->SelectedData = $row['issue'];
		$combo_problem->SelectedData = $row['problem'];
		$combo_solution->SelectedData = $row['solution'];
		$combo_symptom->SelectedData = $row['symptom'];
		$combo_response->SelectedData = $row['response'];
		$combo_catalyst->SelectedData = $row['catalyst'];
		$combo_inhibitor->SelectedData = $row['inhibitor'];
		$combo_benchmark->SelectedData = $row['benchmark'];
	}else{
		$combo_story->SelectedData = $filterer_story;
		$combo_throughline->SelectedData = $filterer_throughline;
		$combo_throughline_domain->SelectedData = $filterer_throughline_domain;
		$combo_concern->SelectedData = $filterer_concern;
		$combo_issue->SelectedData = $filterer_issue;
		$combo_problem->SelectedData = $filterer_problem;
		$combo_solution->SelectedData = $filterer_solution;
		$combo_symptom->SelectedData = $filterer_symptom;
		$combo_response->SelectedData = $filterer_response;
		$combo_catalyst->SelectedData = $filterer_catalyst;
		$combo_inhibitor->SelectedData = $filterer_inhibitor;
		$combo_benchmark->SelectedData = $filterer_benchmark;
	}
	$combo_story->HTML = '<span id="story-container' . $rnd1 . '"></span><input type="hidden" name="story" id="story' . $rnd1 . '" value="' . html_attr($combo_story->SelectedData) . '">';
	$combo_story->MatchText = '<span id="story-container-readonly' . $rnd1 . '"></span><input type="hidden" name="story" id="story' . $rnd1 . '" value="' . html_attr($combo_story->SelectedData) . '">';
	$combo_throughline->HTML = '<span id="throughline-container' . $rnd1 . '"></span><input type="hidden" name="throughline" id="throughline' . $rnd1 . '" value="' . html_attr($combo_throughline->SelectedData) . '">';
	$combo_throughline->MatchText = '<span id="throughline-container-readonly' . $rnd1 . '"></span><input type="hidden" name="throughline" id="throughline' . $rnd1 . '" value="' . html_attr($combo_throughline->SelectedData) . '">';
	$combo_throughline_domain->HTML = '<span id="throughline_domain-container' . $rnd1 . '"></span><input type="hidden" name="throughline_domain" id="throughline_domain' . $rnd1 . '" value="' . html_attr($combo_throughline_domain->SelectedData) . '">';
	$combo_throughline_domain->MatchText = '<span id="throughline_domain-container-readonly' . $rnd1 . '"></span><input type="hidden" name="throughline_domain" id="throughline_domain' . $rnd1 . '" value="' . html_attr($combo_throughline_domain->SelectedData) . '">';
	$combo_concern->HTML = '<span id="concern-container' . $rnd1 . '"></span><input type="hidden" name="concern" id="concern' . $rnd1 . '" value="' . html_attr($combo_concern->SelectedData) . '">';
	$combo_concern->MatchText = '<span id="concern-container-readonly' . $rnd1 . '"></span><input type="hidden" name="concern" id="concern' . $rnd1 . '" value="' . html_attr($combo_concern->SelectedData) . '">';
	$combo_issue->HTML = '<span id="issue-container' . $rnd1 . '"></span><input type="hidden" name="issue" id="issue' . $rnd1 . '" value="' . html_attr($combo_issue->SelectedData) . '">';
	$combo_issue->MatchText = '<span id="issue-container-readonly' . $rnd1 . '"></span><input type="hidden" name="issue" id="issue' . $rnd1 . '" value="' . html_attr($combo_issue->SelectedData) . '">';
	$combo_problem->HTML = '<span id="problem-container' . $rnd1 . '"></span><input type="hidden" name="problem" id="problem' . $rnd1 . '" value="' . html_attr($combo_problem->SelectedData) . '">';
	$combo_problem->MatchText = '<span id="problem-container-readonly' . $rnd1 . '"></span><input type="hidden" name="problem" id="problem' . $rnd1 . '" value="' . html_attr($combo_problem->SelectedData) . '">';
	$combo_solution->HTML = '<span id="solution-container' . $rnd1 . '"></span><input type="hidden" name="solution" id="solution' . $rnd1 . '" value="' . html_attr($combo_solution->SelectedData) . '">';
	$combo_solution->MatchText = '<span id="solution-container-readonly' . $rnd1 . '"></span><input type="hidden" name="solution" id="solution' . $rnd1 . '" value="' . html_attr($combo_solution->SelectedData) . '">';
	$combo_symptom->HTML = '<span id="symptom-container' . $rnd1 . '"></span><input type="hidden" name="symptom" id="symptom' . $rnd1 . '" value="' . html_attr($combo_symptom->SelectedData) . '">';
	$combo_symptom->MatchText = '<span id="symptom-container-readonly' . $rnd1 . '"></span><input type="hidden" name="symptom" id="symptom' . $rnd1 . '" value="' . html_attr($combo_symptom->SelectedData) . '">';
	$combo_response->HTML = '<span id="response-container' . $rnd1 . '"></span><input type="hidden" name="response" id="response' . $rnd1 . '" value="' . html_attr($combo_response->SelectedData) . '">';
	$combo_response->MatchText = '<span id="response-container-readonly' . $rnd1 . '"></span><input type="hidden" name="response" id="response' . $rnd1 . '" value="' . html_attr($combo_response->SelectedData) . '">';
	$combo_catalyst->HTML = '<span id="catalyst-container' . $rnd1 . '"></span><input type="hidden" name="catalyst" id="catalyst' . $rnd1 . '" value="' . html_attr($combo_catalyst->SelectedData) . '">';
	$combo_catalyst->MatchText = '<span id="catalyst-container-readonly' . $rnd1 . '"></span><input type="hidden" name="catalyst" id="catalyst' . $rnd1 . '" value="' . html_attr($combo_catalyst->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_story__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['story'] : $filterer_story); ?>"};
		AppGini.current_throughline__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['throughline'] : $filterer_throughline); ?>"};
		AppGini.current_throughline_domain__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['throughline_domain'] : $filterer_throughline_domain); ?>"};
		AppGini.current_concern__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['concern'] : $filterer_concern); ?>"};
		AppGini.current_issue__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['issue'] : $filterer_issue); ?>"};
		AppGini.current_problem__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['problem'] : $filterer_problem); ?>"};
		AppGini.current_solution__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['solution'] : $filterer_solution); ?>"};
		AppGini.current_symptom__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['symptom'] : $filterer_symptom); ?>"};
		AppGini.current_response__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['response'] : $filterer_response); ?>"};

		jQuery(function() {
			setTimeout(function(){
				if(typeof(story_reload__RAND__) == 'function') story_reload__RAND__();
				if(typeof(throughline_reload__RAND__) == 'function') throughline_reload__RAND__();
				if(typeof(throughline_domain_reload__RAND__) == 'function') throughline_domain_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(concern_reload__RAND__) == \'function\') concern_reload__RAND__(AppGini.current_throughline_domain__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(issue_reload__RAND__) == \'function\') issue_reload__RAND__(AppGini.current_throughline_domain__RAND__.value, AppGini.current_concern__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(problem_reload__RAND__) == \'function\') problem_reload__RAND__(AppGini.current_throughline_domain__RAND__.value, AppGini.current_concern__RAND__.value, AppGini.current_issue__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(solution_reload__RAND__) == \'function\') solution_reload__RAND__(AppGini.current_throughline_domain__RAND__.value, AppGini.current_concern__RAND__.value, AppGini.current_issue__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(symptom_reload__RAND__) == \'function\') symptom_reload__RAND__(AppGini.current_throughline_domain__RAND__.value, AppGini.current_concern__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(response_reload__RAND__) == \'function\') response_reload__RAND__(AppGini.current_throughline_domain__RAND__.value, AppGini.current_concern__RAND__.value);' : ''); ?>
			}, 10); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function story_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#story-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_story__RAND__.value, t: 'storypoints_static', f: 'story' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="story"]').val(resp.results[0].id);
							$j('[id=story-container-readonly__RAND__]').html('<span id="story-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }


							if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'storypoints_static', f: 'story' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_story__RAND__.value = e.added.id;
				AppGini.current_story__RAND__.text = e.added.text;
				$j('[name="story"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }


				if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
			});

			if(!$j("#story-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_story__RAND__.value, t: 'storypoints_static', f: 'story' },
					success: function(resp){
						$j('[name="story"]').val(resp.results[0].id);
						$j('[id=story-container-readonly__RAND__]').html('<span id="story-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }

						if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_story__RAND__.value, t: 'storypoints_static', f: 'story' },
				success: function(resp){
					$j('[id=story-container__RAND__], [id=story-container-readonly__RAND__]').html('<span id="story-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }

					if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function throughline_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#throughline-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_throughline__RAND__.value, t: 'storypoints_static', f: 'throughline' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="throughline"]').val(resp.results[0].id);
							$j('[id=throughline-container-readonly__RAND__]').html('<span id="throughline-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_throughline_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_throughline_view_parent]').show(); }


							if(typeof(throughline_update_autofills__RAND__) == 'function') throughline_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'storypoints_static', f: 'throughline' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_throughline__RAND__.value = e.added.id;
				AppGini.current_throughline__RAND__.text = e.added.text;
				$j('[name="throughline"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_throughline_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_throughline_view_parent]').show(); }


				if(typeof(throughline_update_autofills__RAND__) == 'function') throughline_update_autofills__RAND__();
			});

			if(!$j("#throughline-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_throughline__RAND__.value, t: 'storypoints_static', f: 'throughline' },
					success: function(resp){
						$j('[name="throughline"]').val(resp.results[0].id);
						$j('[id=throughline-container-readonly__RAND__]').html('<span id="throughline-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_throughline_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_throughline_view_parent]').show(); }

						if(typeof(throughline_update_autofills__RAND__) == 'function') throughline_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_throughline__RAND__.value, t: 'storypoints_static', f: 'throughline' },
				success: function(resp){
					$j('[id=throughline-container__RAND__], [id=throughline-container-readonly__RAND__]').html('<span id="throughline-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_throughline_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_throughline_view_parent]').show(); }

					if(typeof(throughline_update_autofills__RAND__) == 'function') throughline_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function throughline_domain_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#throughline_domain-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_throughline_domain__RAND__.value, t: 'storypoints_static', f: 'throughline_domain' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="throughline_domain"]').val(resp.results[0].id);
							$j('[id=throughline_domain-container-readonly__RAND__]').html('<span id="throughline_domain-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_domain_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_domain_view_parent]').show(); }

						if(typeof(concern_reload__RAND__) == 'function') concern_reload__RAND__(AppGini.current_throughline_domain__RAND__.value);

							if(typeof(throughline_domain_update_autofills__RAND__) == 'function') throughline_domain_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'storypoints_static', f: 'throughline_domain' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_throughline_domain__RAND__.value = e.added.id;
				AppGini.current_throughline_domain__RAND__.text = e.added.text;
				$j('[name="throughline_domain"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_domain_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_domain_view_parent]').show(); }

						if(typeof(concern_reload__RAND__) == 'function') concern_reload__RAND__(AppGini.current_throughline_domain__RAND__.value);

				if(typeof(throughline_domain_update_autofills__RAND__) == 'function') throughline_domain_update_autofills__RAND__();
			});

			if(!$j("#throughline_domain-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_throughline_domain__RAND__.value, t: 'storypoints_static', f: 'throughline_domain' },
					success: function(resp){
						$j('[name="throughline_domain"]').val(resp.results[0].id);
						$j('[id=throughline_domain-container-readonly__RAND__]').html('<span id="throughline_domain-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_domain_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_domain_view_parent]').show(); }

						if(typeof(throughline_domain_update_autofills__RAND__) == 'function') throughline_domain_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_throughline_domain__RAND__.value, t: 'storypoints_static', f: 'throughline_domain' },
				success: function(resp){
					$j('[id=throughline_domain-container__RAND__], [id=throughline_domain-container-readonly__RAND__]').html('<span id="throughline_domain-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_domain_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_domain_view_parent]').show(); }

					if(typeof(throughline_domain_update_autofills__RAND__) == 'function') throughline_domain_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function concern_reload__RAND__(filterer_throughline_domain){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#concern-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_throughline_domain: filterer_throughline_domain, id: AppGini.current_concern__RAND__.value, t: 'storypoints_static', f: 'concern' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="concern"]').val(resp.results[0].id);
							$j('[id=concern-container-readonly__RAND__]').html('<span id="concern-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_concern_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_concern_view_parent]').show(); }

						if(typeof(issue_reload__RAND__) == 'function') issue_reload__RAND__($j('#throughline_domain').val(), AppGini.current_concern__RAND__.value);
						if(typeof(symptom_reload__RAND__) == 'function') symptom_reload__RAND__($j('#throughline_domain').val(), AppGini.current_concern__RAND__.value);
						if(typeof(response_reload__RAND__) == 'function') response_reload__RAND__($j('#throughline_domain').val(), AppGini.current_concern__RAND__.value);

							if(typeof(concern_update_autofills__RAND__) == 'function') concern_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_throughline_domain: filterer_throughline_domain, s: term, p: page, t: 'storypoints_static', f: 'concern' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_concern__RAND__.value = e.added.id;
				AppGini.current_concern__RAND__.text = e.added.text;
				$j('[name="concern"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_concern_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_concern_view_parent]').show(); }

						if(typeof(issue_reload__RAND__) == 'function') issue_reload__RAND__($j('#throughline_domain').val(), AppGini.current_concern__RAND__.value);
						if(typeof(symptom_reload__RAND__) == 'function') symptom_reload__RAND__($j('#throughline_domain').val(), AppGini.current_concern__RAND__.value);
						if(typeof(response_reload__RAND__) == 'function') response_reload__RAND__($j('#throughline_domain').val(), AppGini.current_concern__RAND__.value);

				if(typeof(concern_update_autofills__RAND__) == 'function') concern_update_autofills__RAND__();
			});

			if(!$j("#concern-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_concern__RAND__.value, t: 'storypoints_static', f: 'concern' },
					success: function(resp){
						$j('[name="concern"]').val(resp.results[0].id);
						$j('[id=concern-container-readonly__RAND__]').html('<span id="concern-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_concern_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_concern_view_parent]').show(); }

						if(typeof(concern_update_autofills__RAND__) == 'function') concern_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_concern__RAND__.value, t: 'storypoints_static', f: 'concern' },
				success: function(resp){
					$j('[id=concern-container__RAND__], [id=concern-container-readonly__RAND__]').html('<span id="concern-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_concern_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_concern_view_parent]').show(); }

					if(typeof(concern_update_autofills__RAND__) == 'function') concern_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function issue_reload__RAND__(filterer_throughline_domain, filterer_concern){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#issue-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, id: AppGini.current_issue__RAND__.value, t: 'storypoints_static', f: 'issue' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="issue"]').val(resp.results[0].id);
							$j('[id=issue-container-readonly__RAND__]').html('<span id="issue-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_issue_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_issue_view_parent]').show(); }

						if(typeof(problem_reload__RAND__) == 'function') problem_reload__RAND__($j('#throughline_domain').val(), $j('#concern').val(), AppGini.current_issue__RAND__.value);
						if(typeof(solution_reload__RAND__) == 'function') solution_reload__RAND__($j('#throughline_domain').val(), $j('#concern').val(), AppGini.current_issue__RAND__.value);

							if(typeof(issue_update_autofills__RAND__) == 'function') issue_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, s: term, p: page, t: 'storypoints_static', f: 'issue' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_issue__RAND__.value = e.added.id;
				AppGini.current_issue__RAND__.text = e.added.text;
				$j('[name="issue"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_issue_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_issue_view_parent]').show(); }

						if(typeof(problem_reload__RAND__) == 'function') problem_reload__RAND__($j('#throughline_domain').val(), $j('#concern').val(), AppGini.current_issue__RAND__.value);
						if(typeof(solution_reload__RAND__) == 'function') solution_reload__RAND__($j('#throughline_domain').val(), $j('#concern').val(), AppGini.current_issue__RAND__.value);

				if(typeof(issue_update_autofills__RAND__) == 'function') issue_update_autofills__RAND__();
			});

			if(!$j("#issue-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_issue__RAND__.value, t: 'storypoints_static', f: 'issue' },
					success: function(resp){
						$j('[name="issue"]').val(resp.results[0].id);
						$j('[id=issue-container-readonly__RAND__]').html('<span id="issue-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_issue_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_issue_view_parent]').show(); }

						if(typeof(issue_update_autofills__RAND__) == 'function') issue_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_issue__RAND__.value, t: 'storypoints_static', f: 'issue' },
				success: function(resp){
					$j('[id=issue-container__RAND__], [id=issue-container-readonly__RAND__]').html('<span id="issue-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_issue_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_issue_view_parent]').show(); }

					if(typeof(issue_update_autofills__RAND__) == 'function') issue_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function problem_reload__RAND__(filterer_throughline_domain, filterer_concern, filterer_issue){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#problem-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, filterer_issue: filterer_issue, id: AppGini.current_problem__RAND__.value, t: 'storypoints_static', f: 'problem' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="problem"]').val(resp.results[0].id);
							$j('[id=problem-container-readonly__RAND__]').html('<span id="problem-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


							if(typeof(problem_update_autofills__RAND__) == 'function') problem_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, filterer_issue: filterer_issue, s: term, p: page, t: 'storypoints_static', f: 'problem' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_problem__RAND__.value = e.added.id;
				AppGini.current_problem__RAND__.text = e.added.text;
				$j('[name="problem"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


				if(typeof(problem_update_autofills__RAND__) == 'function') problem_update_autofills__RAND__();
			});

			if(!$j("#problem-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_problem__RAND__.value, t: 'storypoints_static', f: 'problem' },
					success: function(resp){
						$j('[name="problem"]').val(resp.results[0].id);
						$j('[id=problem-container-readonly__RAND__]').html('<span id="problem-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

						if(typeof(problem_update_autofills__RAND__) == 'function') problem_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_problem__RAND__.value, t: 'storypoints_static', f: 'problem' },
				success: function(resp){
					$j('[id=problem-container__RAND__], [id=problem-container-readonly__RAND__]').html('<span id="problem-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

					if(typeof(problem_update_autofills__RAND__) == 'function') problem_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function solution_reload__RAND__(filterer_throughline_domain, filterer_concern, filterer_issue){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#solution-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, filterer_issue: filterer_issue, id: AppGini.current_solution__RAND__.value, t: 'storypoints_static', f: 'solution' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="solution"]').val(resp.results[0].id);
							$j('[id=solution-container-readonly__RAND__]').html('<span id="solution-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


							if(typeof(solution_update_autofills__RAND__) == 'function') solution_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, filterer_issue: filterer_issue, s: term, p: page, t: 'storypoints_static', f: 'solution' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_solution__RAND__.value = e.added.id;
				AppGini.current_solution__RAND__.text = e.added.text;
				$j('[name="solution"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


				if(typeof(solution_update_autofills__RAND__) == 'function') solution_update_autofills__RAND__();
			});

			if(!$j("#solution-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_solution__RAND__.value, t: 'storypoints_static', f: 'solution' },
					success: function(resp){
						$j('[name="solution"]').val(resp.results[0].id);
						$j('[id=solution-container-readonly__RAND__]').html('<span id="solution-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

						if(typeof(solution_update_autofills__RAND__) == 'function') solution_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_solution__RAND__.value, t: 'storypoints_static', f: 'solution' },
				success: function(resp){
					$j('[id=solution-container__RAND__], [id=solution-container-readonly__RAND__]').html('<span id="solution-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

					if(typeof(solution_update_autofills__RAND__) == 'function') solution_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function symptom_reload__RAND__(filterer_throughline_domain, filterer_concern){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#symptom-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, id: AppGini.current_symptom__RAND__.value, t: 'storypoints_static', f: 'symptom' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="symptom"]').val(resp.results[0].id);
							$j('[id=symptom-container-readonly__RAND__]').html('<span id="symptom-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


							if(typeof(symptom_update_autofills__RAND__) == 'function') symptom_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, s: term, p: page, t: 'storypoints_static', f: 'symptom' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_symptom__RAND__.value = e.added.id;
				AppGini.current_symptom__RAND__.text = e.added.text;
				$j('[name="symptom"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


				if(typeof(symptom_update_autofills__RAND__) == 'function') symptom_update_autofills__RAND__();
			});

			if(!$j("#symptom-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_symptom__RAND__.value, t: 'storypoints_static', f: 'symptom' },
					success: function(resp){
						$j('[name="symptom"]').val(resp.results[0].id);
						$j('[id=symptom-container-readonly__RAND__]').html('<span id="symptom-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

						if(typeof(symptom_update_autofills__RAND__) == 'function') symptom_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_symptom__RAND__.value, t: 'storypoints_static', f: 'symptom' },
				success: function(resp){
					$j('[id=symptom-container__RAND__], [id=symptom-container-readonly__RAND__]').html('<span id="symptom-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

					if(typeof(symptom_update_autofills__RAND__) == 'function') symptom_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function response_reload__RAND__(filterer_throughline_domain, filterer_concern){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#response-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, id: AppGini.current_response__RAND__.value, t: 'storypoints_static', f: 'response' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="response"]').val(resp.results[0].id);
							$j('[id=response-container-readonly__RAND__]').html('<span id="response-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


							if(typeof(response_update_autofills__RAND__) == 'function') response_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_throughline_domain: filterer_throughline_domain, filterer_concern: filterer_concern, s: term, p: page, t: 'storypoints_static', f: 'response' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_response__RAND__.value = e.added.id;
				AppGini.current_response__RAND__.text = e.added.text;
				$j('[name="response"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }


				if(typeof(response_update_autofills__RAND__) == 'function') response_update_autofills__RAND__();
			});

			if(!$j("#response-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_response__RAND__.value, t: 'storypoints_static', f: 'response' },
					success: function(resp){
						$j('[name="response"]').val(resp.results[0].id);
						$j('[id=response-container-readonly__RAND__]').html('<span id="response-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

						if(typeof(response_update_autofills__RAND__) == 'function') response_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_response__RAND__.value, t: 'storypoints_static', f: 'response' },
				success: function(resp){
					$j('[id=response-container__RAND__], [id=response-container-readonly__RAND__]').html('<span id="response-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_dramatica_themes_view_parent]').hide(); }else{ $j('.btn[id=class_dramatica_themes_view_parent]').show(); }

					if(typeof(response_update_autofills__RAND__) == 'function') response_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/storypoints_static_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	}else{
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/storypoints_static_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert){
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return storypoints_static_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return storypoints_static_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'AppGini.closeParentModal(); return false;';
	}else{
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return storypoints_static_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)){
		$jsReadOnly .= "\tjQuery('#story').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#story_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#throughline').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#throughline_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#throughline_domain').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#throughline_domain_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#concern').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#concern_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#issue').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#issue_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#problem').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#problem_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#solution').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#solution_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#symptom').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#symptom_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#response').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#response_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#catalyst').replaceWith('<div class=\"form-control-static\" id=\"catalyst\">' + (jQuery('#catalyst').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#inhibitor').replaceWith('<div class=\"form-control-static\" id=\"inhibitor\">' + (jQuery('#inhibitor').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#benchmark').replaceWith('<div class=\"form-control-static\" id=\"benchmark\">' + (jQuery('#benchmark').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif($AllowInsert){
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(story)%%>', $combo_story->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(story)%%>', $combo_story->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(story)%%>', urlencode($combo_story->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(throughline)%%>', $combo_throughline->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(throughline)%%>', $combo_throughline->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(throughline)%%>', urlencode($combo_throughline->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(throughline_domain)%%>', $combo_throughline_domain->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(throughline_domain)%%>', $combo_throughline_domain->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(throughline_domain)%%>', urlencode($combo_throughline_domain->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(concern)%%>', $combo_concern->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(concern)%%>', $combo_concern->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(concern)%%>', urlencode($combo_concern->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(issue)%%>', $combo_issue->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(issue)%%>', $combo_issue->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(issue)%%>', urlencode($combo_issue->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(problem)%%>', $combo_problem->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(problem)%%>', $combo_problem->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(problem)%%>', urlencode($combo_problem->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(solution)%%>', $combo_solution->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(solution)%%>', $combo_solution->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(solution)%%>', urlencode($combo_solution->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(symptom)%%>', $combo_symptom->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(symptom)%%>', $combo_symptom->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(symptom)%%>', urlencode($combo_symptom->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(response)%%>', $combo_response->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(response)%%>', $combo_response->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(response)%%>', urlencode($combo_response->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array(  'story' => array('story', 'Story'), 'throughline' => array('class_dramatica_throughline', 'Throughline'), 'throughline_domain' => array('class_dramatica_domain', 'Throughline_domain'), 'concern' => array('class_dramatica_concern', 'Concern'), 'issue' => array('class_dramatica_issue', 'Issue'), 'problem' => array('class_dramatica_themes', 'Problem'), 'solution' => array('class_dramatica_themes', 'Solution'), 'symptom' => array('class_dramatica_themes', 'Symptom'), 'response' => array('class_dramatica_themes', 'Response'));
	foreach($lookup_fields as $luf => $ptfc){
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']){
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']){
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(story)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(throughline)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(throughline_domain)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(concern)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(issue)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(problem)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(solution)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(symptom)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(response)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(catalyst)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(inhibitor)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(benchmark)%%>', '', $templateCode);

	// process values
	if($selected_id){
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(story)%%>', safe_html($urow['story']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(story)%%>', html_attr($row['story']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story)%%>', urlencode($urow['story']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(throughline)%%>', safe_html($urow['throughline']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(throughline)%%>', html_attr($row['throughline']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(throughline)%%>', urlencode($urow['throughline']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(throughline_domain)%%>', safe_html($urow['throughline_domain']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(throughline_domain)%%>', html_attr($row['throughline_domain']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(throughline_domain)%%>', urlencode($urow['throughline_domain']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(concern)%%>', safe_html($urow['concern']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(concern)%%>', html_attr($row['concern']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(concern)%%>', urlencode($urow['concern']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(issue)%%>', safe_html($urow['issue']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(issue)%%>', html_attr($row['issue']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(issue)%%>', urlencode($urow['issue']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(problem)%%>', safe_html($urow['problem']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(problem)%%>', html_attr($row['problem']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(problem)%%>', urlencode($urow['problem']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(solution)%%>', safe_html($urow['solution']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(solution)%%>', html_attr($row['solution']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(solution)%%>', urlencode($urow['solution']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(symptom)%%>', safe_html($urow['symptom']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(symptom)%%>', html_attr($row['symptom']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(symptom)%%>', urlencode($urow['symptom']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(response)%%>', safe_html($urow['response']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(response)%%>', html_attr($row['response']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(response)%%>', urlencode($urow['response']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(catalyst)%%>', safe_html($urow['catalyst']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(catalyst)%%>', html_attr($row['catalyst']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(catalyst)%%>', urlencode($urow['catalyst']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(inhibitor)%%>', safe_html($urow['inhibitor']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(inhibitor)%%>', html_attr($row['inhibitor']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(inhibitor)%%>', urlencode($urow['inhibitor']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(benchmark)%%>', safe_html($urow['benchmark']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(benchmark)%%>', html_attr($row['benchmark']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(benchmark)%%>', urlencode($urow['benchmark']), $templateCode);
	}else{
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(story)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(throughline)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(throughline)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(throughline_domain)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(throughline_domain)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(concern)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(concern)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(issue)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(issue)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(problem)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(problem)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(solution)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(solution)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(symptom)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(symptom)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(response)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(response)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(catalyst)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(catalyst)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(inhibitor)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(inhibitor)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(benchmark)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(benchmark)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode = str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == ''){
		$templateCode .= "\n\n<script>\$j(function(){\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id){
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('storypoints_static');
	if($selected_id){
		$jdata = get_joined_record('storypoints_static', $selected_id);
		if($jdata === false) $jdata = get_defaults('storypoints_static');
		$rdata = $row;
	}
	$templateCode .= loadView('storypoints_static-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: storypoints_static_dv
	if(function_exists('storypoints_static_dv')){
		$args=array();
		storypoints_static_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>