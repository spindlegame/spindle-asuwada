<?php

// Data functions (insert, update, delete, form) for table code_character_development

// This script and data application were generated by AppGini 5.76
// Download AppGini for free from https://bigprof.com/appgini/download/

function code_character_development_insert(){
	global $Translation;

	// mm: can member insert record?
	$arrPerm=getTablePermissions('code_character_development');
	if(!$arrPerm[1]){
		return false;
	}

	$data['agent'] = makeSafe($_REQUEST['agent']);
		if($data['agent'] == empty_lookup_value){ $data['agent'] = ''; }
	$data['story'] = makeSafe($_REQUEST['story']);
		if($data['story'] == empty_lookup_value){ $data['story'] = ''; }
	$data['story_character'] = makeSafe($_REQUEST['story_character']);
		if($data['story_character'] == empty_lookup_value){ $data['story_character'] = ''; }
	$data['author'] = makeSafe($_REQUEST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_REQUEST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_REQUEST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }
	$data['code'] = makeSafe($_REQUEST['code']);
		if($data['code'] == empty_lookup_value){ $data['code'] = ''; }
	$data['character_element'] = makeSafe($_REQUEST['character_element']);
		if($data['character_element'] == empty_lookup_value){ $data['character_element'] = ''; }
	$data['character_elem_value'] = makeSafe($_REQUEST['character_elem_value']);
		if($data['character_elem_value'] == empty_lookup_value){ $data['character_elem_value'] = ''; }
	$data['comment'] = makeSafe($_REQUEST['comment']);
		if($data['comment'] == empty_lookup_value){ $data['comment'] = ''; }

	// hook: code_character_development_before_insert
	if(function_exists('code_character_development_before_insert')){
		$args=array();
		if(!code_character_development_before_insert($data, getMemberInfo(), $args)){ return false; }
	}

	$o = array('silentErrors' => true);
	sql('insert into `code_character_development` set       `agent`=' . (($data['agent'] !== '' && $data['agent'] !== NULL) ? "'{$data['agent']}'" : 'NULL') . ', `story`=' . (($data['story'] !== '' && $data['story'] !== NULL) ? "'{$data['story']}'" : 'NULL') . ', `story_character`=' . (($data['story_character'] !== '' && $data['story_character'] !== NULL) ? "'{$data['story_character']}'" : 'NULL') . ', `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL') . ', `code`=' . (($data['code'] !== '' && $data['code'] !== NULL) ? "'{$data['code']}'" : 'NULL') . ', `character_element`=' . (($data['character_element'] !== '' && $data['character_element'] !== NULL) ? "'{$data['character_element']}'" : 'NULL') . ', `character_elem_value`=' . (($data['character_elem_value'] !== '' && $data['character_elem_value'] !== NULL) ? "'{$data['character_elem_value']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL'), $o);
	if($o['error']!=''){
		echo $o['error'];
		echo "<a href=\"code_character_development_view.php?addNew_x=1\">{$Translation['< back']}</a>";
		exit;
	}

	$recID = db_insert_id(db_link());

	// hook: code_character_development_after_insert
	if(function_exists('code_character_development_after_insert')){
		$res = sql("select * from `code_character_development` where `id`='" . makeSafe($recID, false) . "' limit 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=array();
		if(!code_character_development_after_insert($data, getMemberInfo(), $args)){ return $recID; }
	}

	// mm: save ownership data
	set_record_owner('code_character_development', $recID, getLoggedMemberID());

	return $recID;
}

function code_character_development_delete($selected_id, $AllowDeleteOfParents=false, $skipChecks=false){
	// insure referential integrity ...
	global $Translation;
	$selected_id=makeSafe($selected_id);

	// mm: can member delete record?
	$arrPerm=getTablePermissions('code_character_development');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_character_development' and pkValue='$selected_id'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_character_development' and pkValue='$selected_id'");
	if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
		// delete allowed, so continue ...
	}else{
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: code_character_development_before_delete
	if(function_exists('code_character_development_before_delete')){
		$args=array();
		if(!code_character_development_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'];
	}

	sql("delete from `code_character_development` where `id`='$selected_id'", $eo);

	// hook: code_character_development_after_delete
	if(function_exists('code_character_development_after_delete')){
		$args=array();
		code_character_development_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("delete from membership_userrecords where tableName='code_character_development' and pkValue='$selected_id'", $eo);
}

function code_character_development_update($selected_id){
	global $Translation;

	// mm: can member edit record?
	$arrPerm=getTablePermissions('code_character_development');
	$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_character_development' and pkValue='".makeSafe($selected_id)."'");
	$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_character_development' and pkValue='".makeSafe($selected_id)."'");
	if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){ // allow update?
		// update allowed, so continue ...
	}else{
		return false;
	}

	$data['agent'] = makeSafe($_REQUEST['agent']);
		if($data['agent'] == empty_lookup_value){ $data['agent'] = ''; }
	$data['story'] = makeSafe($_REQUEST['story']);
		if($data['story'] == empty_lookup_value){ $data['story'] = ''; }
	$data['story_character'] = makeSafe($_REQUEST['story_character']);
		if($data['story_character'] == empty_lookup_value){ $data['story_character'] = ''; }
	$data['author'] = makeSafe($_REQUEST['author']);
		if($data['author'] == empty_lookup_value){ $data['author'] = ''; }
	$data['bibliography'] = makeSafe($_REQUEST['bibliography']);
		if($data['bibliography'] == empty_lookup_value){ $data['bibliography'] = ''; }
	$data['transcript'] = makeSafe($_REQUEST['transcript']);
		if($data['transcript'] == empty_lookup_value){ $data['transcript'] = ''; }
	$data['token_sequence'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token_sequence'] == empty_lookup_value){ $data['token_sequence'] = ''; }
	$data['token'] = makeSafe($_REQUEST['token_sequence']);
		if($data['token'] == empty_lookup_value){ $data['token'] = ''; }
	$data['code'] = makeSafe($_REQUEST['code']);
		if($data['code'] == empty_lookup_value){ $data['code'] = ''; }
	$data['character_element'] = makeSafe($_REQUEST['character_element']);
		if($data['character_element'] == empty_lookup_value){ $data['character_element'] = ''; }
	$data['character_elem_value'] = makeSafe($_REQUEST['character_elem_value']);
		if($data['character_elem_value'] == empty_lookup_value){ $data['character_elem_value'] = ''; }
	$data['comment'] = makeSafe($_REQUEST['comment']);
		if($data['comment'] == empty_lookup_value){ $data['comment'] = ''; }
	$data['selectedID']=makeSafe($selected_id);

	// hook: code_character_development_before_update
	if(function_exists('code_character_development_before_update')){
		$args=array();
		if(!code_character_development_before_update($data, getMemberInfo(), $args)){ return false; }
	}

	$o=array('silentErrors' => true);
	sql('update `code_character_development` set       `agent`=' . (($data['agent'] !== '' && $data['agent'] !== NULL) ? "'{$data['agent']}'" : 'NULL') . ', `story`=' . (($data['story'] !== '' && $data['story'] !== NULL) ? "'{$data['story']}'" : 'NULL') . ', `story_character`=' . (($data['story_character'] !== '' && $data['story_character'] !== NULL) ? "'{$data['story_character']}'" : 'NULL') . ', `author`=' . (($data['author'] !== '' && $data['author'] !== NULL) ? "'{$data['author']}'" : 'NULL') . ', `bibliography`=' . (($data['bibliography'] !== '' && $data['bibliography'] !== NULL) ? "'{$data['bibliography']}'" : 'NULL') . ', `transcript`=' . (($data['transcript'] !== '' && $data['transcript'] !== NULL) ? "'{$data['transcript']}'" : 'NULL') . ', `token_sequence`=' . (($data['token_sequence'] !== '' && $data['token_sequence'] !== NULL) ? "'{$data['token_sequence']}'" : 'NULL') . ', `token`=' . (($data['token'] !== '' && $data['token'] !== NULL) ? "'{$data['token']}'" : 'NULL') . ', `code`=' . (($data['code'] !== '' && $data['code'] !== NULL) ? "'{$data['code']}'" : 'NULL') . ', `character_element`=' . (($data['character_element'] !== '' && $data['character_element'] !== NULL) ? "'{$data['character_element']}'" : 'NULL') . ', `character_elem_value`=' . (($data['character_elem_value'] !== '' && $data['character_elem_value'] !== NULL) ? "'{$data['character_elem_value']}'" : 'NULL') . ', `comment`=' . (($data['comment'] !== '' && $data['comment'] !== NULL) ? "'{$data['comment']}'" : 'NULL') . " where `id`='".makeSafe($selected_id)."'", $o);
	if($o['error']!=''){
		echo $o['error'];
		echo '<a href="code_character_development_view.php?SelectedID='.urlencode($selected_id)."\">{$Translation['< back']}</a>";
		exit;
	}


	// hook: code_character_development_after_update
	if(function_exists('code_character_development_after_update')){
		$res = sql("SELECT * FROM `code_character_development` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)){
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = $data['id'];
		$args = array();
		if(!code_character_development_after_update($data, getMemberInfo(), $args)){ return; }
	}

	// mm: update ownership data
	sql("update membership_userrecords set dateUpdated='".time()."' where tableName='code_character_development' and pkValue='".makeSafe($selected_id)."'", $eo);

}

function code_character_development_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = ''){
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm=getTablePermissions('code_character_development');
	if(!$arrPerm[1] && $selected_id==''){ return ''; }
	$AllowInsert = ($arrPerm[1] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != ''){
		$dvprint = true;
	}

	$filterer_story = thisOr(undo_magic_quotes($_REQUEST['filterer_story']), '');
	$filterer_story_character = thisOr(undo_magic_quotes($_REQUEST['filterer_story_character']), '');
	$filterer_author = thisOr(undo_magic_quotes($_REQUEST['filterer_author']), '');
	$filterer_bibliography = thisOr(undo_magic_quotes($_REQUEST['filterer_bibliography']), '');
	$filterer_transcript = thisOr(undo_magic_quotes($_REQUEST['filterer_transcript']), '');
	$filterer_token_sequence = thisOr(undo_magic_quotes($_REQUEST['filterer_token_sequence']), '');
	$filterer_character_element = thisOr(undo_magic_quotes($_REQUEST['filterer_character_element']), '');
	$filterer_character_elem_value = thisOr(undo_magic_quotes($_REQUEST['filterer_character_elem_value']), '');

	// populate filterers, starting from children to grand-parents
	if($filterer_story_character && !$filterer_story) $filterer_story = sqlValue("select story from story_characters where id='" . makeSafe($filterer_story_character) . "'");
	if($filterer_bibliography && !$filterer_author) $filterer_author = sqlValue("select author_id from biblio_doc where id='" . makeSafe($filterer_bibliography) . "'");
	if($filterer_transcript && !$filterer_author) $filterer_author = sqlValue("select author_memberID from biblio_transcript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_transcript && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography_title from biblio_transcript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_token_sequence && !$filterer_author) $filterer_author = sqlValue("select author_id from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: story
	$combo_story = new DataCombo;
	// combobox: story_character, filterable by: story
	$combo_story_character = new DataCombo;
	// combobox: author
	$combo_author = new DataCombo;
	// combobox: bibliography, filterable by: author
	$combo_bibliography = new DataCombo;
	// combobox: transcript, filterable by: author,bibliography
	$combo_transcript = new DataCombo;
	// combobox: token_sequence, filterable by: author,bibliography,transcript
	$combo_token_sequence = new DataCombo;
	// combobox: character_element
	$combo_character_element = new DataCombo;
	// combobox: character_elem_value
	$combo_character_elem_value = new DataCombo;

	if($selected_id){
		// mm: check member permissions
		if(!$arrPerm[2]){
			return "";
		}
		// mm: who is the owner?
		$ownerGroupID=sqlValue("select groupID from membership_userrecords where tableName='code_character_development' and pkValue='".makeSafe($selected_id)."'");
		$ownerMemberID=sqlValue("select lcase(memberID) from membership_userrecords where tableName='code_character_development' and pkValue='".makeSafe($selected_id)."'");
		if($arrPerm[2]==1 && getLoggedMemberID()!=$ownerMemberID){
			return "";
		}
		if($arrPerm[2]==2 && getLoggedGroupID()!=$ownerGroupID){
			return "";
		}

		// can edit?
		if(($arrPerm[3]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[3]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[3]==3){
			$AllowUpdate=1;
		}else{
			$AllowUpdate=0;
		}

		$res = sql("select * from `code_character_development` where `id`='".makeSafe($selected_id)."'", $eo);
		if(!($row = db_fetch_array($res))){
			return error_message($Translation['No records found'], 'code_character_development_view.php', false);
		}
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input();
		$row = $hc->xss_clean($row); /* sanitize data */
		$combo_story->SelectedData = $row['story'];
		$combo_story_character->SelectedData = $row['story_character'];
		$combo_author->SelectedData = $row['author'];
		$combo_bibliography->SelectedData = $row['bibliography'];
		$combo_transcript->SelectedData = $row['transcript'];
		$combo_token_sequence->SelectedData = $row['token_sequence'];
		$combo_character_element->SelectedData = $row['character_element'];
		$combo_character_elem_value->SelectedData = $row['character_elem_value'];
	}else{
		$combo_story->SelectedData = $filterer_story;
		$combo_story_character->SelectedData = $filterer_story_character;
		$combo_author->SelectedData = $filterer_author;
		$combo_bibliography->SelectedData = $filterer_bibliography;
		$combo_transcript->SelectedData = $filterer_transcript;
		$combo_token_sequence->SelectedData = $filterer_token_sequence;
		$combo_character_element->SelectedData = $filterer_character_element;
		$combo_character_elem_value->SelectedData = $filterer_character_elem_value;
	}
	$combo_story->HTML = '<span id="story-container' . $rnd1 . '"></span><input type="hidden" name="story" id="story' . $rnd1 . '" value="' . html_attr($combo_story->SelectedData) . '">';
	$combo_story->MatchText = '<span id="story-container-readonly' . $rnd1 . '"></span><input type="hidden" name="story" id="story' . $rnd1 . '" value="' . html_attr($combo_story->SelectedData) . '">';
	$combo_story_character->HTML = '<span id="story_character-container' . $rnd1 . '"></span><input type="hidden" name="story_character" id="story_character' . $rnd1 . '" value="' . html_attr($combo_story_character->SelectedData) . '">';
	$combo_story_character->MatchText = '<span id="story_character-container-readonly' . $rnd1 . '"></span><input type="hidden" name="story_character" id="story_character' . $rnd1 . '" value="' . html_attr($combo_story_character->SelectedData) . '">';
	$combo_author->HTML = '<span id="author-container' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '" value="' . html_attr($combo_author->SelectedData) . '">';
	$combo_author->MatchText = '<span id="author-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author" id="author' . $rnd1 . '" value="' . html_attr($combo_author->SelectedData) . '">';
	$combo_bibliography->HTML = '<span id="bibliography-container' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '" value="' . html_attr($combo_bibliography->SelectedData) . '">';
	$combo_bibliography->MatchText = '<span id="bibliography-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '" value="' . html_attr($combo_bibliography->SelectedData) . '">';
	$combo_transcript->HTML = '<span id="transcript-container' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '" value="' . html_attr($combo_transcript->SelectedData) . '">';
	$combo_transcript->MatchText = '<span id="transcript-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '" value="' . html_attr($combo_transcript->SelectedData) . '">';
	$combo_token_sequence->HTML = '<span id="token_sequence-container' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '" value="' . html_attr($combo_token_sequence->SelectedData) . '">';
	$combo_token_sequence->MatchText = '<span id="token_sequence-container-readonly' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '" value="' . html_attr($combo_token_sequence->SelectedData) . '">';
	$combo_character_element->HTML = '<span id="character_element-container' . $rnd1 . '"></span><input type="hidden" name="character_element" id="character_element' . $rnd1 . '" value="' . html_attr($combo_character_element->SelectedData) . '">';
	$combo_character_element->MatchText = '<span id="character_element-container-readonly' . $rnd1 . '"></span><input type="hidden" name="character_element" id="character_element' . $rnd1 . '" value="' . html_attr($combo_character_element->SelectedData) . '">';
	$combo_character_elem_value->HTML = '<span id="character_elem_value-container' . $rnd1 . '"></span><input type="hidden" name="character_elem_value" id="character_elem_value' . $rnd1 . '" value="' . html_attr($combo_character_elem_value->SelectedData) . '">';
	$combo_character_elem_value->MatchText = '<span id="character_elem_value-container-readonly' . $rnd1 . '"></span><input type="hidden" name="character_elem_value" id="character_elem_value' . $rnd1 . '" value="' . html_attr($combo_character_elem_value->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_story__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['story'] : $filterer_story); ?>"};
		AppGini.current_story_character__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['story_character'] : $filterer_story_character); ?>"};
		AppGini.current_author__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author'] : $filterer_author); ?>"};
		AppGini.current_bibliography__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliography'] : $filterer_bibliography); ?>"};
		AppGini.current_transcript__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcript'] : $filterer_transcript); ?>"};
		AppGini.current_token_sequence__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['token_sequence'] : $filterer_token_sequence); ?>"};
		AppGini.current_character_element__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['character_element'] : $filterer_character_element); ?>"};
		AppGini.current_character_elem_value__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['character_elem_value'] : $filterer_character_elem_value); ?>"};

		jQuery(function() {
			setTimeout(function(){
				if(typeof(story_reload__RAND__) == 'function') story_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(story_character_reload__RAND__) == \'function\') story_character_reload__RAND__(AppGini.current_story__RAND__.value);' : ''); ?>
				if(typeof(author_reload__RAND__) == 'function') author_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliography_reload__RAND__) == \'function\') bibliography_reload__RAND__(AppGini.current_author__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcript_reload__RAND__) == \'function\') transcript_reload__RAND__(AppGini.current_author__RAND__.value, AppGini.current_bibliography__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(token_sequence_reload__RAND__) == \'function\') token_sequence_reload__RAND__(AppGini.current_author__RAND__.value, AppGini.current_bibliography__RAND__.value, AppGini.current_transcript__RAND__.value);' : ''); ?>
				if(typeof(character_element_reload__RAND__) == 'function') character_element_reload__RAND__();
				if(typeof(character_elem_value_reload__RAND__) == 'function') character_elem_value_reload__RAND__();
			}, 10); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function story_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#story-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_story__RAND__.value, t: 'code_character_development', f: 'story' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="story"]').val(resp.results[0].id);
							$j('[id=story-container-readonly__RAND__]').html('<span id="story-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }

						if(typeof(story_character_reload__RAND__) == 'function') story_character_reload__RAND__(AppGini.current_story__RAND__.value);

							if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'code_character_development', f: 'story' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_story__RAND__.value = e.added.id;
				AppGini.current_story__RAND__.text = e.added.text;
				$j('[name="story"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }

						if(typeof(story_character_reload__RAND__) == 'function') story_character_reload__RAND__(AppGini.current_story__RAND__.value);

				if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
			});

			if(!$j("#story-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_story__RAND__.value, t: 'code_character_development', f: 'story' },
					success: function(resp){
						$j('[name="story"]').val(resp.results[0].id);
						$j('[id=story-container-readonly__RAND__]').html('<span id="story-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }

						if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_story__RAND__.value, t: 'code_character_development', f: 'story' },
				success: function(resp){
					$j('[id=story-container__RAND__], [id=story-container-readonly__RAND__]').html('<span id="story-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_view_parent]').hide(); }else{ $j('.btn[id=story_view_parent]').show(); }

					if(typeof(story_update_autofills__RAND__) == 'function') story_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function story_character_reload__RAND__(filterer_story){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#story_character-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_story: filterer_story, id: AppGini.current_story_character__RAND__.value, t: 'code_character_development', f: 'story_character' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="story_character"]').val(resp.results[0].id);
							$j('[id=story_character-container-readonly__RAND__]').html('<span id="story_character-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_characters_view_parent]').hide(); }else{ $j('.btn[id=story_characters_view_parent]').show(); }


							if(typeof(story_character_update_autofills__RAND__) == 'function') story_character_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_story: filterer_story, s: term, p: page, t: 'code_character_development', f: 'story_character' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_story_character__RAND__.value = e.added.id;
				AppGini.current_story_character__RAND__.text = e.added.text;
				$j('[name="story_character"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_characters_view_parent]').hide(); }else{ $j('.btn[id=story_characters_view_parent]').show(); }


				if(typeof(story_character_update_autofills__RAND__) == 'function') story_character_update_autofills__RAND__();
			});

			if(!$j("#story_character-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_story_character__RAND__.value, t: 'code_character_development', f: 'story_character' },
					success: function(resp){
						$j('[name="story_character"]').val(resp.results[0].id);
						$j('[id=story_character-container-readonly__RAND__]').html('<span id="story_character-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_characters_view_parent]').hide(); }else{ $j('.btn[id=story_characters_view_parent]').show(); }

						if(typeof(story_character_update_autofills__RAND__) == 'function') story_character_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_story_character__RAND__.value, t: 'code_character_development', f: 'story_character' },
				success: function(resp){
					$j('[id=story_character-container__RAND__], [id=story_character-container-readonly__RAND__]').html('<span id="story_character-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=story_characters_view_parent]').hide(); }else{ $j('.btn[id=story_characters_view_parent]').show(); }

					if(typeof(story_character_update_autofills__RAND__) == 'function') story_character_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function author_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#author-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_author__RAND__.value, t: 'code_character_development', f: 'author' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="author"]').val(resp.results[0].id);
							$j('[id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(AppGini.current_author__RAND__.value);
						if(typeof(token_reload__RAND__) == 'function') token_reload__RAND__(AppGini.current_author__RAND__.value);

							if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'code_character_development', f: 'author' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_author__RAND__.value = e.added.id;
				AppGini.current_author__RAND__.text = e.added.text;
				$j('[name="author"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(AppGini.current_author__RAND__.value);
						if(typeof(token_reload__RAND__) == 'function') token_reload__RAND__(AppGini.current_author__RAND__.value);

				if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
			});

			if(!$j("#author-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_author__RAND__.value, t: 'code_character_development', f: 'author' },
					success: function(resp){
						$j('[name="author"]').val(resp.results[0].id);
						$j('[id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_author__RAND__.value, t: 'code_character_development', f: 'author' },
				success: function(resp){
					$j('[id=author-container__RAND__], [id=author-container-readonly__RAND__]').html('<span id="author-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_author_view_parent]').hide(); }else{ $j('.btn[id=biblio_author_view_parent]').show(); }

					if(typeof(author_update_autofills__RAND__) == 'function') author_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function bibliography_reload__RAND__(filterer_author){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#bibliography-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, id: AppGini.current_bibliography__RAND__.value, t: 'code_character_development', f: 'bibliography' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="bibliography"]').val(resp.results[0].id);
							$j('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($j('#author').val(), AppGini.current_bibliography__RAND__.value);

							if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, s: term, p: page, t: 'code_character_development', f: 'bibliography' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_bibliography__RAND__.value = e.added.id;
				AppGini.current_bibliography__RAND__.text = e.added.text;
				$j('[name="bibliography"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($j('#author').val(), AppGini.current_bibliography__RAND__.value);

				if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
			});

			if(!$j("#bibliography-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_bibliography__RAND__.value, t: 'code_character_development', f: 'bibliography' },
					success: function(resp){
						$j('[name="bibliography"]').val(resp.results[0].id);
						$j('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_bibliography__RAND__.value, t: 'code_character_development', f: 'bibliography' },
				success: function(resp){
					$j('[id=bibliography-container__RAND__], [id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_doc_view_parent]').hide(); }else{ $j('.btn[id=biblio_doc_view_parent]').show(); }

					if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function transcript_reload__RAND__(filterer_author, filterer_bibliography){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#transcript-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, id: AppGini.current_transcript__RAND__.value, t: 'code_character_development', f: 'transcript' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="transcript"]').val(resp.results[0].id);
							$j('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($j('#author').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);

							if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, s: term, p: page, t: 'code_character_development', f: 'transcript' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_transcript__RAND__.value = e.added.id;
				AppGini.current_transcript__RAND__.text = e.added.text;
				$j('[name="transcript"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($j('#author').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);

				if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
			});

			if(!$j("#transcript-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_transcript__RAND__.value, t: 'code_character_development', f: 'transcript' },
					success: function(resp){
						$j('[name="transcript"]').val(resp.results[0].id);
						$j('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_transcript__RAND__.value, t: 'code_character_development', f: 'transcript' },
				success: function(resp){
					$j('[id=transcript-container__RAND__], [id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_transcript_view_parent]').hide(); }else{ $j('.btn[id=biblio_transcript_view_parent]').show(); }

					if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function token_sequence_reload__RAND__(filterer_author, filterer_bibliography, filterer_transcript){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#token_sequence-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, id: AppGini.current_token_sequence__RAND__.value, t: 'code_character_development', f: 'token_sequence' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="token_sequence"]').val(resp.results[0].id);
							$j('[id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }


							if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { filterer_author: filterer_author, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, s: term, p: page, t: 'code_character_development', f: 'token_sequence' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_token_sequence__RAND__.value = e.added.id;
				AppGini.current_token_sequence__RAND__.text = e.added.text;
				$j('[name="token_sequence"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }


				if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
			});

			if(!$j("#token_sequence-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_token_sequence__RAND__.value, t: 'code_character_development', f: 'token_sequence' },
					success: function(resp){
						$j('[name="token_sequence"]').val(resp.results[0].id);
						$j('[id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_token_sequence__RAND__.value, t: 'code_character_development', f: 'token_sequence' },
				success: function(resp){
					$j('[id=token_sequence-container__RAND__], [id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=biblio_token_view_parent]').hide(); }else{ $j('.btn[id=biblio_token_view_parent]').show(); }

					if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function character_element_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#character_element-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_character_element__RAND__.value, t: 'code_character_development', f: 'character_element' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="character_element"]').val(resp.results[0].id);
							$j('[id=character_element-container-readonly__RAND__]').html('<span id="character_element-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }


							if(typeof(character_element_update_autofills__RAND__) == 'function') character_element_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'code_character_development', f: 'character_element' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_character_element__RAND__.value = e.added.id;
				AppGini.current_character_element__RAND__.text = e.added.text;
				$j('[name="character_element"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }


				if(typeof(character_element_update_autofills__RAND__) == 'function') character_element_update_autofills__RAND__();
			});

			if(!$j("#character_element-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_character_element__RAND__.value, t: 'code_character_development', f: 'character_element' },
					success: function(resp){
						$j('[name="character_element"]').val(resp.results[0].id);
						$j('[id=character_element-container-readonly__RAND__]').html('<span id="character_element-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }

						if(typeof(character_element_update_autofills__RAND__) == 'function') character_element_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_character_element__RAND__.value, t: 'code_character_development', f: 'character_element' },
				success: function(resp){
					$j('[id=character_element-container__RAND__], [id=character_element-container-readonly__RAND__]').html('<span id="character_element-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }

					if(typeof(character_element_update_autofills__RAND__) == 'function') character_element_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function character_elem_value_reload__RAND__(){
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint){ ?>

			$j("#character_elem_value-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c){
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_character_elem_value__RAND__.value, t: 'code_character_development', f: 'character_elem_value' },
						success: function(resp){
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="character_elem_value"]').val(resp.results[0].id);
							$j('[id=character_elem_value-container-readonly__RAND__]').html('<span id="character_elem_value-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }


							if(typeof(character_elem_value_update_autofills__RAND__) == 'function') character_elem_value_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term){ /* */ return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page){ /* */ return { s: term, p: page, t: 'code_character_development', f: 'character_elem_value' }; },
					results: function(resp, page){ /* */ return resp; }
				},
				escapeMarkup: function(str){ /* */ return str; }
			}).on('change', function(e){
				AppGini.current_character_elem_value__RAND__.value = e.added.id;
				AppGini.current_character_elem_value__RAND__.text = e.added.text;
				$j('[name="character_elem_value"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }


				if(typeof(character_elem_value_update_autofills__RAND__) == 'function') character_elem_value_update_autofills__RAND__();
			});

			if(!$j("#character_elem_value-container__RAND__").length){
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_character_elem_value__RAND__.value, t: 'code_character_development', f: 'character_elem_value' },
					success: function(resp){
						$j('[name="character_elem_value"]').val(resp.results[0].id);
						$j('[id=character_elem_value-container-readonly__RAND__]').html('<span id="character_elem_value-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }

						if(typeof(character_elem_value_update_autofills__RAND__) == 'function') character_elem_value_update_autofills__RAND__();
					}
				});
			}

		<?php }else{ ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_character_elem_value__RAND__.value, t: 'code_character_development', f: 'character_elem_value' },
				success: function(resp){
					$j('[id=character_elem_value-container__RAND__], [id=character_elem_value-container-readonly__RAND__]').html('<span id="character_elem_value-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>'){ $j('.btn[id=class_character_element_view_parent]').hide(); }else{ $j('.btn[id=class_character_element_view_parent]').show(); }

					if(typeof(character_elem_value_update_autofills__RAND__) == 'function') character_elem_value_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint){
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/code_character_development_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	}else{
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/code_character_development_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert){
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return code_character_development_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return code_character_development_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']){
		$backAction = 'AppGini.closeParentModal(); return false;';
	}else{
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id){
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate){
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return code_character_development_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3){ // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		}else{
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	}else{
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)){
		$jsReadOnly .= "\tjQuery('#agent').replaceWith('<div class=\"form-control-static\" id=\"agent\">' + (jQuery('#agent').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#story').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#story_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#story_character').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#story_character_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#author').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcript').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcript_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#code').replaceWith('<div class=\"form-control-static\" id=\"code\">' + (jQuery('#code').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#character_element').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#character_element_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#character_elem_value').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#character_elem_value_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#comment').replaceWith('<div class=\"form-control-static\" id=\"comment\">' + (jQuery('#comment').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	}elseif($AllowInsert){
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(story)%%>', $combo_story->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(story)%%>', $combo_story->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(story)%%>', urlencode($combo_story->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(story_character)%%>', $combo_story_character->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(story_character)%%>', $combo_story_character->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(story_character)%%>', urlencode($combo_story_character->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(author)%%>', $combo_author->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(author)%%>', $combo_author->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(author)%%>', urlencode($combo_author->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(bibliography)%%>', $combo_bibliography->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(bibliography)%%>', $combo_bibliography->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(bibliography)%%>', urlencode($combo_bibliography->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(transcript)%%>', $combo_transcript->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(transcript)%%>', $combo_transcript->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(transcript)%%>', urlencode($combo_transcript->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(token_sequence)%%>', $combo_token_sequence->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(token_sequence)%%>', $combo_token_sequence->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(token_sequence)%%>', urlencode($combo_token_sequence->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(character_element)%%>', $combo_character_element->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(character_element)%%>', $combo_character_element->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(character_element)%%>', urlencode($combo_character_element->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(character_elem_value)%%>', $combo_character_elem_value->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(character_elem_value)%%>', $combo_character_elem_value->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(character_elem_value)%%>', urlencode($combo_character_elem_value->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array(  'story' => array('story', 'Story'), 'story_character' => array('story_characters', 'Story character'), 'author' => array('biblio_author', 'Author'), 'bibliography' => array('biblio_doc', 'Bibliography'), 'transcript' => array('biblio_transcript', 'Transcript'), 'token_sequence' => array('biblio_token', 'Token_sequence'), 'character_element' => array('class_character_element', 'Character_element'), 'character_elem_value' => array('class_character_element', 'Character_elem_value'));
	foreach($lookup_fields as $luf => $ptfc){
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']){
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']){
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(agent)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(story)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(story_character)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(author)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(bibliography)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(transcript)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(token_sequence)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(code)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(character_element)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(character_elem_value)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(comment)%%>', '', $templateCode);

	// process values
	if($selected_id){
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(agent)%%>', safe_html($urow['agent']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(agent)%%>', html_attr($row['agent']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(agent)%%>', urlencode($urow['agent']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(story)%%>', safe_html($urow['story']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(story)%%>', html_attr($row['story']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story)%%>', urlencode($urow['story']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(story_character)%%>', safe_html($urow['story_character']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(story_character)%%>', html_attr($row['story_character']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story_character)%%>', urlencode($urow['story_character']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(author)%%>', safe_html($urow['author']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(author)%%>', html_attr($row['author']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author)%%>', urlencode($urow['author']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(bibliography)%%>', safe_html($urow['bibliography']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(bibliography)%%>', html_attr($row['bibliography']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography)%%>', urlencode($urow['bibliography']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', safe_html($urow['transcript']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', html_attr($row['transcript']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode($urow['transcript']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(token_sequence)%%>', safe_html($urow['token_sequence']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(token_sequence)%%>', html_attr($row['token_sequence']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(token_sequence)%%>', urlencode($urow['token_sequence']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(code)%%>', safe_html($urow['code']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(code)%%>', html_attr($row['code']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(code)%%>', urlencode($urow['code']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(character_element)%%>', safe_html($urow['character_element']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(character_element)%%>', html_attr($row['character_element']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(character_element)%%>', urlencode($urow['character_element']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(character_elem_value)%%>', safe_html($urow['character_elem_value']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(character_elem_value)%%>', html_attr($row['character_elem_value']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(character_elem_value)%%>', urlencode($urow['character_elem_value']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(comment)%%>', safe_html($urow['comment']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(comment)%%>', html_attr($row['comment']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(comment)%%>', urlencode($urow['comment']), $templateCode);
	}else{
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(agent)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(agent)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(story)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(story_character)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story_character)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(author)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(bibliography)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(transcript)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(token_sequence)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(token_sequence)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(code)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(code)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(character_element)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(character_element)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(character_elem_value)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(character_elem_value)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(comment)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(comment)%%>', urlencode(''), $templateCode);
	}

	// process translations
	foreach($Translation as $symbol=>$trans){
		$templateCode = str_replace("<%%TRANSLATION($symbol)%%>", $trans, $templateCode);
	}

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == ''){
		$templateCode .= "\n\n<script>\$j(function(){\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption){
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id){
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\ttoken_sequence_update_autofills$rnd1 = function(){\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'code_character_development_autofill.php?rnd1=$rnd1&mfk=token_sequence&id=' + encodeURIComponent('".addslashes($row['token_sequence'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'code_character_development_autofill.php?rnd1=$rnd1&mfk=token_sequence&id=' + encodeURIComponent(AppGini.current_token_sequence{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#token_sequence$rnd1').prop('disabled', true); \$j('#token_sequenceLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#token_sequence$rnd1').prop('disabled', false); " : "\$j('#token_sequence$rnd1').prop('disabled', true); ")."\$j('#token_sequenceLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#token_sequence_caption').length) \$j('#token_sequence_caption').click(function(){ /* */ token_sequence_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('code_character_development');
	if($selected_id){
		$jdata = get_joined_record('code_character_development', $selected_id);
		if($jdata === false) $jdata = get_defaults('code_character_development');
		$rdata = $row;
	}
	$templateCode .= loadView('code_character_development-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: code_character_development_dv
	if(function_exists('code_character_development_dv')){
		$args=array();
		code_character_development_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}
?>