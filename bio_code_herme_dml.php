<?php

// Data functions (insert, update, delete, form) for table bio_code_herme

// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

function bio_code_herme_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('bio_code_herme');
	if(!$arrPerm['insert']) return false;

	$data = [
		'biography' => Request::val('biography', ''),
		'agent_id' => Request::val('agent_id', ''),
		'agent_name' => Request::lookup('agent_id'),
		'author_id' => Request::val('author_id', ''),
		'author_name' => Request::lookup('author_id'),
		'bibliography' => Request::val('bibliography', ''),
		'transcript' => Request::val('transcript', ''),
		'token_sequence' => Request::val('token_sequence', ''),
		'token' => Request::lookup('token_sequence'),
		'hermeneutic' => br2nl(Request::val('hermeneutic', '')),
		'impression' => Request::val('impression', ''),
		'noetictension' => Request::val('noetictension', ''),
		'quadrilemma' => Request::multipleChoice('quadrilemma', ''),
		'pc' => Request::val('pc', ''),
		'freecode' => Request::val('freecode', ''),
	];


	// hook: bio_code_herme_before_insert
	if(function_exists('bio_code_herme_before_insert')) {
		$args = [];
		if(!bio_code_herme_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('bio_code_herme', backtick_keys_once($data), $error);
	if($error)
		die("{$error}<br><a href=\"#\" onclick=\"history.go(-1);\">{$Translation['< back']}</a>");

	$recID = db_insert_id(db_link());

	update_calc_fields('bio_code_herme', $recID, calculated_fields()['bio_code_herme']);

	// hook: bio_code_herme_after_insert
	if(function_exists('bio_code_herme_after_insert')) {
		$res = sql("SELECT * FROM `bio_code_herme` WHERE `id`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=[];
		if(!bio_code_herme_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('bio_code_herme', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(!empty($_REQUEST['SelectedID'])) bio_code_herme_copy_children($recID, $_REQUEST['SelectedID']);

	return $recID;
}

function bio_code_herme_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function bio_code_herme_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('bio_code_herme', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: bio_code_herme_before_delete
	if(function_exists('bio_code_herme_before_delete')) {
		$args = [];
		if(!bio_code_herme_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	// child table: bio_chr_scene
	$res = sql("SELECT `id` FROM `bio_code_herme` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_chr_scene` WHERE `herme_code`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_chr_scene', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_chr_scene', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'bio_code_herme_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'bio_code_herme_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	sql("DELETE FROM `bio_code_herme` WHERE `id`='{$selected_id}'", $eo);

	// hook: bio_code_herme_after_delete
	if(function_exists('bio_code_herme_after_delete')) {
		$args = [];
		bio_code_herme_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='bio_code_herme' AND `pkValue`='{$selected_id}'", $eo);
}

function bio_code_herme_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('bio_code_herme', $selected_id, 'edit')) return false;

	$data = [
		'biography' => Request::val('biography', ''),
		'agent_id' => Request::val('agent_id', ''),
		'agent_name' => Request::lookup('agent_id'),
		'author_id' => Request::val('author_id', ''),
		'author_name' => Request::lookup('author_id'),
		'bibliography' => Request::val('bibliography', ''),
		'transcript' => Request::val('transcript', ''),
		'token_sequence' => Request::val('token_sequence', ''),
		'token' => Request::lookup('token_sequence'),
		'hermeneutic' => br2nl(Request::val('hermeneutic', '')),
		'impression' => Request::val('impression', ''),
		'noetictension' => Request::val('noetictension', ''),
		'quadrilemma' => Request::multipleChoice('quadrilemma', ''),
		'pc' => Request::val('pc', ''),
		'freecode' => Request::val('freecode', ''),
	];

	// get existing values
	$old_data = getRecord('bio_code_herme', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: bio_code_herme_before_update
	if(function_exists('bio_code_herme_before_update')) {
		$args = ['old_data' => $old_data];
		if(!bio_code_herme_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'bio_code_herme', 
		backtick_keys_once($set), 
		['`id`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="bio_code_herme_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	$eo = ['silentErrors' => true];

	update_calc_fields('bio_code_herme', $data['selectedID'], calculated_fields()['bio_code_herme']);

	// hook: bio_code_herme_after_update
	if(function_exists('bio_code_herme_after_update')) {
		$res = sql("SELECT * FROM `bio_code_herme` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['id'];
		$args = ['old_data' => $old_data];
		if(!bio_code_herme_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "' WHERE `tableName`='bio_code_herme' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);
}

function bio_code_herme_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm = getTablePermissions('bio_code_herme');
	if(!$arrPerm['insert'] && $selected_id=='') { return ''; }
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != '') {
		$dvprint = true;
	}

	$filterer_biography = thisOr($_REQUEST['filterer_biography'], '');
	$filterer_agent_id = thisOr($_REQUEST['filterer_agent_id'], '');
	$filterer_author_id = thisOr($_REQUEST['filterer_author_id'], '');
	$filterer_bibliography = thisOr($_REQUEST['filterer_bibliography'], '');
	$filterer_transcript = thisOr($_REQUEST['filterer_transcript'], '');
	$filterer_token_sequence = thisOr($_REQUEST['filterer_token_sequence'], '');
	$filterer_impression = thisOr($_REQUEST['filterer_impression'], '');
	$filterer_noetictension = thisOr($_REQUEST['filterer_noetictension'], '');
	$filterer_pc = thisOr($_REQUEST['filterer_pc'], '');

	// populate filterers, starting from children to grand-parents
	if($filterer_biography && !$filterer_agent_id) $filterer_agent_id = sqlValue("select agent_id from bio_story where id='" . makeSafe($filterer_biography) . "'");
	if($filterer_bibliography && !$filterer_author_id) $filterer_author_id = sqlValue("select author_id from biblio_doc where id='" . makeSafe($filterer_bibliography) . "'");
	if($filterer_transcript && !$filterer_author_id) $filterer_author_id = sqlValue("select author_memberID from biblio_transcript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_transcript && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography_title from biblio_transcript where id='" . makeSafe($filterer_transcript) . "'");
	if($filterer_token_sequence && !$filterer_author_id) $filterer_author_id = sqlValue("select author_id from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_bibliography) $filterer_bibliography = sqlValue("select bibliography from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");
	if($filterer_token_sequence && !$filterer_transcript) $filterer_transcript = sqlValue("select transcript from biblio_token where id='" . makeSafe($filterer_token_sequence) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: biography, filterable by: agent_id
	$combo_biography = new DataCombo;
	// combobox: agent_id
	$combo_agent_id = new DataCombo;
	// combobox: author_id
	$combo_author_id = new DataCombo;
	// combobox: bibliography, filterable by: author_id
	$combo_bibliography = new DataCombo;
	// combobox: transcript, filterable by: author_id,bibliography
	$combo_transcript = new DataCombo;
	// combobox: token_sequence, filterable by: author_id,bibliography,transcript
	$combo_token_sequence = new DataCombo;
	// combobox: impression
	$combo_impression = new DataCombo;
	// combobox: noetictension
	$combo_noetictension = new DataCombo;
	// combobox: quadrilemma
	$combo_quadrilemma = new Combo;
	$combo_quadrilemma->ListType = 3;
	$combo_quadrilemma->MultipleSeparator = ', ';
	$combo_quadrilemma->ListBoxHeight = 10;
	$combo_quadrilemma->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/bio_code_herme.quadrilemma.csv')) {
		$quadrilemma_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/bio_code_herme.quadrilemma.csv')));
		$combo_quadrilemma->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($quadrilemma_data)));
		$combo_quadrilemma->ListData = $combo_quadrilemma->ListItem;
	} else {
		$combo_quadrilemma->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("self-affirmation;;devotion;world-affirmation;;idealism")));
		$combo_quadrilemma->ListData = $combo_quadrilemma->ListItem;
	}
	$combo_quadrilemma->SelectName = 'quadrilemma';
	// combobox: pc
	$combo_pc = new DataCombo;

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm['view']) return '';

		// mm: who is the owner?
		$ownerGroupID = sqlValue("SELECT `groupID` FROM `membership_userrecords` WHERE `tableName`='bio_code_herme' AND `pkValue`='" . makeSafe($selected_id) . "'");
		$ownerMemberID = sqlValue("SELECT LCASE(`memberID`) FROM `membership_userrecords` WHERE `tableName`='bio_code_herme' AND `pkValue`='" . makeSafe($selected_id) . "'");

		if($arrPerm['view'] == 1 && getLoggedMemberID() != $ownerMemberID) return '';
		if($arrPerm['view'] == 2 && getLoggedGroupID() != $ownerGroupID) return '';

		// can edit?
		$AllowUpdate = 0;
		if(($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3) {
			$AllowUpdate = 1;
		}

		$res = sql("SELECT * FROM `bio_code_herme` WHERE `id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'bio_code_herme_view.php', false);
		}
		$combo_biography->SelectedData = $row['biography'];
		$combo_agent_id->SelectedData = $row['agent_id'];
		$combo_author_id->SelectedData = $row['author_id'];
		$combo_bibliography->SelectedData = $row['bibliography'];
		$combo_transcript->SelectedData = $row['transcript'];
		$combo_token_sequence->SelectedData = $row['token_sequence'];
		$combo_impression->SelectedData = $row['impression'];
		$combo_noetictension->SelectedData = $row['noetictension'];
		$combo_quadrilemma->SelectedData = $row['quadrilemma'];
		$combo_pc->SelectedData = $row['pc'];
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input(datalist_db_encoding);
		$row = $hc->xss_clean($row); /* sanitize data */
	} else {
		$combo_biography->SelectedData = $filterer_biography;
		$combo_agent_id->SelectedData = $filterer_agent_id;
		$combo_author_id->SelectedData = $filterer_author_id;
		$combo_bibliography->SelectedData = $filterer_bibliography;
		$combo_transcript->SelectedData = $filterer_transcript;
		$combo_token_sequence->SelectedData = $filterer_token_sequence;
		$combo_impression->SelectedData = $filterer_impression;
		$combo_noetictension->SelectedData = $filterer_noetictension;
		$combo_pc->SelectedData = $filterer_pc;
	}
	$combo_biography->HTML = '<span id="biography-container' . $rnd1 . '"></span><input type="hidden" name="biography" id="biography' . $rnd1 . '" value="' . html_attr($combo_biography->SelectedData) . '">';
	$combo_biography->MatchText = '<span id="biography-container-readonly' . $rnd1 . '"></span><input type="hidden" name="biography" id="biography' . $rnd1 . '" value="' . html_attr($combo_biography->SelectedData) . '">';
	$combo_agent_id->HTML = '<span id="agent_id-container' . $rnd1 . '"></span><input type="hidden" name="agent_id" id="agent_id' . $rnd1 . '" value="' . html_attr($combo_agent_id->SelectedData) . '">';
	$combo_agent_id->MatchText = '<span id="agent_id-container-readonly' . $rnd1 . '"></span><input type="hidden" name="agent_id" id="agent_id' . $rnd1 . '" value="' . html_attr($combo_agent_id->SelectedData) . '">';
	$combo_author_id->HTML = '<span id="author_id-container' . $rnd1 . '"></span><input type="hidden" name="author_id" id="author_id' . $rnd1 . '" value="' . html_attr($combo_author_id->SelectedData) . '">';
	$combo_author_id->MatchText = '<span id="author_id-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author_id" id="author_id' . $rnd1 . '" value="' . html_attr($combo_author_id->SelectedData) . '">';
	$combo_bibliography->HTML = '<span id="bibliography-container' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '" value="' . html_attr($combo_bibliography->SelectedData) . '">';
	$combo_bibliography->MatchText = '<span id="bibliography-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliography" id="bibliography' . $rnd1 . '" value="' . html_attr($combo_bibliography->SelectedData) . '">';
	$combo_transcript->HTML = '<span id="transcript-container' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '" value="' . html_attr($combo_transcript->SelectedData) . '">';
	$combo_transcript->MatchText = '<span id="transcript-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcript" id="transcript' . $rnd1 . '" value="' . html_attr($combo_transcript->SelectedData) . '">';
	$combo_token_sequence->HTML = '<span id="token_sequence-container' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '" value="' . html_attr($combo_token_sequence->SelectedData) . '">';
	$combo_token_sequence->MatchText = '<span id="token_sequence-container-readonly' . $rnd1 . '"></span><input type="hidden" name="token_sequence" id="token_sequence' . $rnd1 . '" value="' . html_attr($combo_token_sequence->SelectedData) . '">';
	$combo_impression->HTML = '<span id="impression-container' . $rnd1 . '"></span><input type="hidden" name="impression" id="impression' . $rnd1 . '" value="' . html_attr($combo_impression->SelectedData) . '">';
	$combo_impression->MatchText = '<span id="impression-container-readonly' . $rnd1 . '"></span><input type="hidden" name="impression" id="impression' . $rnd1 . '" value="' . html_attr($combo_impression->SelectedData) . '">';
	$combo_noetictension->HTML = '<span id="noetictension-container' . $rnd1 . '"></span><input type="hidden" name="noetictension" id="noetictension' . $rnd1 . '" value="' . html_attr($combo_noetictension->SelectedData) . '">';
	$combo_noetictension->MatchText = '<span id="noetictension-container-readonly' . $rnd1 . '"></span><input type="hidden" name="noetictension" id="noetictension' . $rnd1 . '" value="' . html_attr($combo_noetictension->SelectedData) . '">';
	$combo_quadrilemma->Render();
	$combo_pc->HTML = '<span id="pc-container' . $rnd1 . '"></span><input type="hidden" name="pc" id="pc' . $rnd1 . '" value="' . html_attr($combo_pc->SelectedData) . '">';
	$combo_pc->MatchText = '<span id="pc-container-readonly' . $rnd1 . '"></span><input type="hidden" name="pc" id="pc' . $rnd1 . '" value="' . html_attr($combo_pc->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_biography__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['biography'] : $filterer_biography); ?>"};
		AppGini.current_agent_id__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['agent_id'] : $filterer_agent_id); ?>"};
		AppGini.current_author_id__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author_id'] : $filterer_author_id); ?>"};
		AppGini.current_bibliography__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliography'] : $filterer_bibliography); ?>"};
		AppGini.current_transcript__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcript'] : $filterer_transcript); ?>"};
		AppGini.current_token_sequence__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['token_sequence'] : $filterer_token_sequence); ?>"};
		AppGini.current_impression__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['impression'] : $filterer_impression); ?>"};
		AppGini.current_noetictension__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['noetictension'] : $filterer_noetictension); ?>"};
		AppGini.current_pc__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['pc'] : $filterer_pc); ?>"};

		jQuery(function() {
			setTimeout(function() {
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(biography_reload__RAND__) == \'function\') biography_reload__RAND__(AppGini.current_agent_id__RAND__.value);' : ''); ?>
				if(typeof(agent_id_reload__RAND__) == 'function') agent_id_reload__RAND__();
				if(typeof(author_id_reload__RAND__) == 'function') author_id_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliography_reload__RAND__) == \'function\') bibliography_reload__RAND__(AppGini.current_author_id__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcript_reload__RAND__) == \'function\') transcript_reload__RAND__(AppGini.current_author_id__RAND__.value, AppGini.current_bibliography__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(token_sequence_reload__RAND__) == \'function\') token_sequence_reload__RAND__(AppGini.current_author_id__RAND__.value, AppGini.current_bibliography__RAND__.value, AppGini.current_transcript__RAND__.value);' : ''); ?>
				if(typeof(impression_reload__RAND__) == 'function') impression_reload__RAND__();
				if(typeof(noetictension_reload__RAND__) == 'function') noetictension_reload__RAND__();
				if(typeof(pc_reload__RAND__) == 'function') pc_reload__RAND__();
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function biography_reload__RAND__(filterer_agent_id) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#biography-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_agent_id: filterer_agent_id, id: AppGini.current_biography__RAND__.value, t: 'bio_code_herme', f: 'biography' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="biography"]').val(resp.results[0].id);
							$j('[id=biography-container-readonly__RAND__]').html('<span id="biography-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_story_view_parent]').hide(); } else { $j('.btn[id=bio_story_view_parent]').show(); }


							if(typeof(biography_update_autofills__RAND__) == 'function') biography_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_agent_id: filterer_agent_id, s: term, p: page, t: 'bio_code_herme', f: 'biography' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_biography__RAND__.value = e.added.id;
				AppGini.current_biography__RAND__.text = e.added.text;
				$j('[name="biography"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_story_view_parent]').hide(); } else { $j('.btn[id=bio_story_view_parent]').show(); }


				if(typeof(biography_update_autofills__RAND__) == 'function') biography_update_autofills__RAND__();
			});

			if(!$j("#biography-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_biography__RAND__.value, t: 'bio_code_herme', f: 'biography' },
					success: function(resp) {
						$j('[name="biography"]').val(resp.results[0].id);
						$j('[id=biography-container-readonly__RAND__]').html('<span id="biography-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_story_view_parent]').hide(); } else { $j('.btn[id=bio_story_view_parent]').show(); }

						if(typeof(biography_update_autofills__RAND__) == 'function') biography_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_biography__RAND__.value, t: 'bio_code_herme', f: 'biography' },
				success: function(resp) {
					$j('[id=biography-container__RAND__], [id=biography-container-readonly__RAND__]').html('<span id="biography-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_story_view_parent]').hide(); } else { $j('.btn[id=bio_story_view_parent]').show(); }

					if(typeof(biography_update_autofills__RAND__) == 'function') biography_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function agent_id_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#agent_id-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_agent_id__RAND__.value, t: 'bio_code_herme', f: 'agent_id' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="agent_id"]').val(resp.results[0].id);
							$j('[id=agent_id-container-readonly__RAND__]').html('<span id="agent_id-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(biography_reload__RAND__) == 'function') biography_reload__RAND__(AppGini.current_agent_id__RAND__.value);

							if(typeof(agent_id_update_autofills__RAND__) == 'function') agent_id_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_code_herme', f: 'agent_id' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_agent_id__RAND__.value = e.added.id;
				AppGini.current_agent_id__RAND__.text = e.added.text;
				$j('[name="agent_id"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(biography_reload__RAND__) == 'function') biography_reload__RAND__(AppGini.current_agent_id__RAND__.value);

				if(typeof(agent_id_update_autofills__RAND__) == 'function') agent_id_update_autofills__RAND__();
			});

			if(!$j("#agent_id-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_agent_id__RAND__.value, t: 'bio_code_herme', f: 'agent_id' },
					success: function(resp) {
						$j('[name="agent_id"]').val(resp.results[0].id);
						$j('[id=agent_id-container-readonly__RAND__]').html('<span id="agent_id-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(agent_id_update_autofills__RAND__) == 'function') agent_id_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_agent_id__RAND__.value, t: 'bio_code_herme', f: 'agent_id' },
				success: function(resp) {
					$j('[id=agent_id-container__RAND__], [id=agent_id-container-readonly__RAND__]').html('<span id="agent_id-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

					if(typeof(agent_id_update_autofills__RAND__) == 'function') agent_id_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function author_id_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#author_id-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_author_id__RAND__.value, t: 'bio_code_herme', f: 'author_id' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="author_id"]').val(resp.results[0].id);
							$j('[id=author_id-container-readonly__RAND__]').html('<span id="author_id-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(AppGini.current_author_id__RAND__.value);

							if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_code_herme', f: 'author_id' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_author_id__RAND__.value = e.added.id;
				AppGini.current_author_id__RAND__.text = e.added.text;
				$j('[name="author_id"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_reload__RAND__) == 'function') bibliography_reload__RAND__(AppGini.current_author_id__RAND__.value);

				if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
			});

			if(!$j("#author_id-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_author_id__RAND__.value, t: 'bio_code_herme', f: 'author_id' },
					success: function(resp) {
						$j('[name="author_id"]').val(resp.results[0].id);
						$j('[id=author_id-container-readonly__RAND__]').html('<span id="author_id-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_author_id__RAND__.value, t: 'bio_code_herme', f: 'author_id' },
				success: function(resp) {
					$j('[id=author_id-container__RAND__], [id=author_id-container-readonly__RAND__]').html('<span id="author_id-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

					if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function bibliography_reload__RAND__(filterer_author_id) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#bibliography-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author_id: filterer_author_id, id: AppGini.current_bibliography__RAND__.value, t: 'bio_code_herme', f: 'bibliography' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="bibliography"]').val(resp.results[0].id);
							$j('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($j('#author_id').val(), AppGini.current_bibliography__RAND__.value);

							if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_author_id: filterer_author_id, s: term, p: page, t: 'bio_code_herme', f: 'bibliography' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_bibliography__RAND__.value = e.added.id;
				AppGini.current_bibliography__RAND__.text = e.added.text;
				$j('[name="bibliography"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcript_reload__RAND__) == 'function') transcript_reload__RAND__($j('#author_id').val(), AppGini.current_bibliography__RAND__.value);

				if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
			});

			if(!$j("#bibliography-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_bibliography__RAND__.value, t: 'bio_code_herme', f: 'bibliography' },
					success: function(resp) {
						$j('[name="bibliography"]').val(resp.results[0].id);
						$j('[id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_bibliography__RAND__.value, t: 'bio_code_herme', f: 'bibliography' },
				success: function(resp) {
					$j('[id=bibliography-container__RAND__], [id=bibliography-container-readonly__RAND__]').html('<span id="bibliography-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

					if(typeof(bibliography_update_autofills__RAND__) == 'function') bibliography_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function transcript_reload__RAND__(filterer_author_id, filterer_bibliography) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#transcript-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author_id: filterer_author_id, filterer_bibliography: filterer_bibliography, id: AppGini.current_transcript__RAND__.value, t: 'bio_code_herme', f: 'transcript' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="transcript"]').val(resp.results[0].id);
							$j('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($j('#author_id').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);
						if(typeof(token_reload__RAND__) == 'function') token_reload__RAND__($j('#author_id').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);

							if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_author_id: filterer_author_id, filterer_bibliography: filterer_bibliography, s: term, p: page, t: 'bio_code_herme', f: 'transcript' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_transcript__RAND__.value = e.added.id;
				AppGini.current_transcript__RAND__.text = e.added.text;
				$j('[name="transcript"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(token_sequence_reload__RAND__) == 'function') token_sequence_reload__RAND__($j('#author_id').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);
						if(typeof(token_reload__RAND__) == 'function') token_reload__RAND__($j('#author_id').val(), $j('#bibliography').val(), AppGini.current_transcript__RAND__.value);

				if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
			});

			if(!$j("#transcript-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_transcript__RAND__.value, t: 'bio_code_herme', f: 'transcript' },
					success: function(resp) {
						$j('[name="transcript"]').val(resp.results[0].id);
						$j('[id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_transcript__RAND__.value, t: 'bio_code_herme', f: 'transcript' },
				success: function(resp) {
					$j('[id=transcript-container__RAND__], [id=transcript-container-readonly__RAND__]').html('<span id="transcript-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

					if(typeof(transcript_update_autofills__RAND__) == 'function') transcript_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function token_sequence_reload__RAND__(filterer_author_id, filterer_bibliography, filterer_transcript) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#token_sequence-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author_id: filterer_author_id, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, id: AppGini.current_token_sequence__RAND__.value, t: 'bio_code_herme', f: 'token_sequence' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="token_sequence"]').val(resp.results[0].id);
							$j('[id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }


							if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_author_id: filterer_author_id, filterer_bibliography: filterer_bibliography, filterer_transcript: filterer_transcript, s: term, p: page, t: 'bio_code_herme', f: 'token_sequence' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_token_sequence__RAND__.value = e.added.id;
				AppGini.current_token_sequence__RAND__.text = e.added.text;
				$j('[name="token_sequence"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }


				if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
			});

			if(!$j("#token_sequence-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_token_sequence__RAND__.value, t: 'bio_code_herme', f: 'token_sequence' },
					success: function(resp) {
						$j('[name="token_sequence"]').val(resp.results[0].id);
						$j('[id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_token_sequence__RAND__.value, t: 'bio_code_herme', f: 'token_sequence' },
				success: function(resp) {
					$j('[id=token_sequence-container__RAND__], [id=token_sequence-container-readonly__RAND__]').html('<span id="token_sequence-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

					if(typeof(token_sequence_update_autofills__RAND__) == 'function') token_sequence_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function impression_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#impression-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_impression__RAND__.value, t: 'bio_code_herme', f: 'impression' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="impression"]').val(resp.results[0].id);
							$j('[id=impression-container-readonly__RAND__]').html('<span id="impression-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_im_view_parent]').hide(); } else { $j('.btn[id=class_im_view_parent]').show(); }


							if(typeof(impression_update_autofills__RAND__) == 'function') impression_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_code_herme', f: 'impression' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_impression__RAND__.value = e.added.id;
				AppGini.current_impression__RAND__.text = e.added.text;
				$j('[name="impression"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_im_view_parent]').hide(); } else { $j('.btn[id=class_im_view_parent]').show(); }


				if(typeof(impression_update_autofills__RAND__) == 'function') impression_update_autofills__RAND__();
			});

			if(!$j("#impression-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_impression__RAND__.value, t: 'bio_code_herme', f: 'impression' },
					success: function(resp) {
						$j('[name="impression"]').val(resp.results[0].id);
						$j('[id=impression-container-readonly__RAND__]').html('<span id="impression-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_im_view_parent]').hide(); } else { $j('.btn[id=class_im_view_parent]').show(); }

						if(typeof(impression_update_autofills__RAND__) == 'function') impression_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_impression__RAND__.value, t: 'bio_code_herme', f: 'impression' },
				success: function(resp) {
					$j('[id=impression-container__RAND__], [id=impression-container-readonly__RAND__]').html('<span id="impression-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_im_view_parent]').hide(); } else { $j('.btn[id=class_im_view_parent]').show(); }

					if(typeof(impression_update_autofills__RAND__) == 'function') impression_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function noetictension_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#noetictension-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_noetictension__RAND__.value, t: 'bio_code_herme', f: 'noetictension' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="noetictension"]').val(resp.results[0].id);
							$j('[id=noetictension-container-readonly__RAND__]').html('<span id="noetictension-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_nt_view_parent]').hide(); } else { $j('.btn[id=class_nt_view_parent]').show(); }


							if(typeof(noetictension_update_autofills__RAND__) == 'function') noetictension_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_code_herme', f: 'noetictension' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_noetictension__RAND__.value = e.added.id;
				AppGini.current_noetictension__RAND__.text = e.added.text;
				$j('[name="noetictension"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_nt_view_parent]').hide(); } else { $j('.btn[id=class_nt_view_parent]').show(); }


				if(typeof(noetictension_update_autofills__RAND__) == 'function') noetictension_update_autofills__RAND__();
			});

			if(!$j("#noetictension-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_noetictension__RAND__.value, t: 'bio_code_herme', f: 'noetictension' },
					success: function(resp) {
						$j('[name="noetictension"]').val(resp.results[0].id);
						$j('[id=noetictension-container-readonly__RAND__]').html('<span id="noetictension-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_nt_view_parent]').hide(); } else { $j('.btn[id=class_nt_view_parent]').show(); }

						if(typeof(noetictension_update_autofills__RAND__) == 'function') noetictension_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_noetictension__RAND__.value, t: 'bio_code_herme', f: 'noetictension' },
				success: function(resp) {
					$j('[id=noetictension-container__RAND__], [id=noetictension-container-readonly__RAND__]').html('<span id="noetictension-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_nt_view_parent]').hide(); } else { $j('.btn[id=class_nt_view_parent]').show(); }

					if(typeof(noetictension_update_autofills__RAND__) == 'function') noetictension_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function pc_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#pc-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_pc__RAND__.value, t: 'bio_code_herme', f: 'pc' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="pc"]').val(resp.results[0].id);
							$j('[id=pc-container-readonly__RAND__]').html('<span id="pc-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_pc_view_parent]').hide(); } else { $j('.btn[id=class_pc_view_parent]').show(); }


							if(typeof(pc_update_autofills__RAND__) == 'function') pc_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_code_herme', f: 'pc' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_pc__RAND__.value = e.added.id;
				AppGini.current_pc__RAND__.text = e.added.text;
				$j('[name="pc"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_pc_view_parent]').hide(); } else { $j('.btn[id=class_pc_view_parent]').show(); }


				if(typeof(pc_update_autofills__RAND__) == 'function') pc_update_autofills__RAND__();
			});

			if(!$j("#pc-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_pc__RAND__.value, t: 'bio_code_herme', f: 'pc' },
					success: function(resp) {
						$j('[name="pc"]').val(resp.results[0].id);
						$j('[id=pc-container-readonly__RAND__]').html('<span id="pc-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_pc_view_parent]').hide(); } else { $j('.btn[id=class_pc_view_parent]').show(); }

						if(typeof(pc_update_autofills__RAND__) == 'function') pc_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_pc__RAND__.value, t: 'bio_code_herme', f: 'pc' },
				success: function(resp) {
					$j('[id=pc-container__RAND__], [id=pc-container-readonly__RAND__]').html('<span id="pc-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_pc_view_parent]').hide(); } else { $j('.btn[id=class_pc_view_parent]').show(); }

					if(typeof(pc_update_autofills__RAND__) == 'function') pc_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/bio_code_herme_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/bio_code_herme_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert) {
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return bio_code_herme_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return bio_code_herme_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return bio_code_herme_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly .= "\tjQuery('#biography').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#biography_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#agent_id').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#agent_id_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#author_id').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_id_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcript').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcript_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#token_sequence_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#hermeneutic').replaceWith('<div class=\"form-control-static\" id=\"hermeneutic\">' + (jQuery('#hermeneutic').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#impression').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#impression_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#noetictension').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#noetictension_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#quadrilemma').replaceWith('<div class=\"form-control-static\" id=\"quadrilemma\">' + (jQuery('#quadrilemma').val() || '') + '</div>'); jQuery('#quadrilemma-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#s2id_quadrilemma').remove();\n";
		$jsReadOnly .= "\tjQuery('#pc').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#pc_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#freecode').replaceWith('<div class=\"form-control-static\" id=\"freecode\">' + (jQuery('#freecode').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif($AllowInsert) {
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(biography)%%>', $combo_biography->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(biography)%%>', $combo_biography->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(biography)%%>', urlencode($combo_biography->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(agent_id)%%>', $combo_agent_id->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(agent_id)%%>', $combo_agent_id->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(agent_id)%%>', urlencode($combo_agent_id->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(author_id)%%>', $combo_author_id->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(author_id)%%>', $combo_author_id->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(author_id)%%>', urlencode($combo_author_id->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(bibliography)%%>', $combo_bibliography->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(bibliography)%%>', $combo_bibliography->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(bibliography)%%>', urlencode($combo_bibliography->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(transcript)%%>', $combo_transcript->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(transcript)%%>', $combo_transcript->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(transcript)%%>', urlencode($combo_transcript->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(token_sequence)%%>', $combo_token_sequence->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(token_sequence)%%>', $combo_token_sequence->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(token_sequence)%%>', urlencode($combo_token_sequence->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(impression)%%>', $combo_impression->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(impression)%%>', $combo_impression->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(impression)%%>', urlencode($combo_impression->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(noetictension)%%>', $combo_noetictension->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(noetictension)%%>', $combo_noetictension->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(noetictension)%%>', urlencode($combo_noetictension->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(quadrilemma)%%>', $combo_quadrilemma->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(quadrilemma)%%>', $combo_quadrilemma->SelectedData, $templateCode);
	$templateCode = str_replace('<%%COMBO(pc)%%>', $combo_pc->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(pc)%%>', $combo_pc->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(pc)%%>', urlencode($combo_pc->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array('biography' => array('bio_story', 'Biography'), 'agent_id' => array('game_agent', 'Agent id'), 'author_id' => array('biblio_author', 'Author'), 'bibliography' => array('biblio_doc', 'Bibliography'), 'transcript' => array('biblio_transcript', 'Transcript'), 'token_sequence' => array('biblio_token', 'Token_sequence'), 'impression' => array('class_im', 'Impression'), 'noetictension' => array('class_nt', 'Noetic tension'), 'pc' => array('class_pc', 'Performative contradiction'), );
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(biography)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(agent_id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(author_id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(bibliography)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(transcript)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(token_sequence)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(hermeneutic)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(impression)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(noetictension)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(quadrilemma)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(pc)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(freecode)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(biography)%%>', safe_html($urow['biography']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(biography)%%>', html_attr($row['biography']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(biography)%%>', urlencode($urow['biography']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(agent_id)%%>', safe_html($urow['agent_id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(agent_id)%%>', html_attr($row['agent_id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(agent_id)%%>', urlencode($urow['agent_id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(author_id)%%>', safe_html($urow['author_id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(author_id)%%>', html_attr($row['author_id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_id)%%>', urlencode($urow['author_id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(bibliography)%%>', safe_html($urow['bibliography']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(bibliography)%%>', html_attr($row['bibliography']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography)%%>', urlencode($urow['bibliography']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', safe_html($urow['transcript']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', html_attr($row['transcript']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode($urow['transcript']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(token_sequence)%%>', safe_html($urow['token_sequence']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(token_sequence)%%>', html_attr($row['token_sequence']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(token_sequence)%%>', urlencode($urow['token_sequence']), $templateCode);
		if($dvprint || (!$AllowUpdate && !$AllowInsert)) {
			$templateCode = str_replace('<%%VALUE(hermeneutic)%%>', safe_html($urow['hermeneutic']), $templateCode);
		} else {
			$templateCode = str_replace('<%%VALUE(hermeneutic)%%>', html_attr($row['hermeneutic']), $templateCode);
		}
		$templateCode = str_replace('<%%URLVALUE(hermeneutic)%%>', urlencode($urow['hermeneutic']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(impression)%%>', safe_html($urow['impression']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(impression)%%>', html_attr($row['impression']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(impression)%%>', urlencode($urow['impression']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(noetictension)%%>', safe_html($urow['noetictension']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(noetictension)%%>', html_attr($row['noetictension']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(noetictension)%%>', urlencode($urow['noetictension']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(quadrilemma)%%>', safe_html($urow['quadrilemma']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(quadrilemma)%%>', html_attr($row['quadrilemma']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(quadrilemma)%%>', urlencode($urow['quadrilemma']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(pc)%%>', safe_html($urow['pc']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(pc)%%>', html_attr($row['pc']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(pc)%%>', urlencode($urow['pc']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(freecode)%%>', safe_html($urow['freecode']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(freecode)%%>', html_attr($row['freecode']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(freecode)%%>', urlencode($urow['freecode']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(biography)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(biography)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(agent_id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(agent_id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(author_id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(bibliography)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(transcript)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(token_sequence)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(token_sequence)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(hermeneutic)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(hermeneutic)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(impression)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(impression)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(noetictension)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(noetictension)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(quadrilemma)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(quadrilemma)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(pc)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(pc)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(freecode)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(freecode)%%>', urlencode(''), $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\tagent_id_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'bio_code_herme_autofill.php?rnd1=$rnd1&mfk=agent_id&id=' + encodeURIComponent('".addslashes($row['agent_id'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'bio_code_herme_autofill.php?rnd1=$rnd1&mfk=agent_id&id=' + encodeURIComponent(AppGini.current_agent_id{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#agent_id$rnd1').prop('disabled', true); \$j('#agent_idLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#agent_id$rnd1').prop('disabled', false); " : "\$j('#agent_id$rnd1').prop('disabled', true); ")."\$j('#agent_idLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#agent_id_caption').length) \$j('#agent_id_caption').click(function() { agent_id_update_autofills$rnd1(); });\n";

	$templateCode .= "\tauthor_id_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'bio_code_herme_autofill.php?rnd1=$rnd1&mfk=author_id&id=' + encodeURIComponent('".addslashes($row['author_id'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'bio_code_herme_autofill.php?rnd1=$rnd1&mfk=author_id&id=' + encodeURIComponent(AppGini.current_author_id{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#author_id$rnd1').prop('disabled', true); \$j('#author_idLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#author_id$rnd1').prop('disabled', false); " : "\$j('#author_id$rnd1').prop('disabled', true); ")."\$j('#author_idLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#author_id_caption').length) \$j('#author_id_caption').click(function() { author_id_update_autofills$rnd1(); });\n";

	$templateCode .= "\ttoken_sequence_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'bio_code_herme_autofill.php?rnd1=$rnd1&mfk=token_sequence&id=' + encodeURIComponent('".addslashes($row['token_sequence'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'bio_code_herme_autofill.php?rnd1=$rnd1&mfk=token_sequence&id=' + encodeURIComponent(AppGini.current_token_sequence{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#token_sequence$rnd1').prop('disabled', true); \$j('#token_sequenceLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#token_sequence$rnd1').prop('disabled', false); " : "\$j('#token_sequence$rnd1').prop('disabled', true); ")."\$j('#token_sequenceLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#token_sequence_caption').length) \$j('#token_sequence_caption').click(function() { token_sequence_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('bio_code_herme');
	if($selected_id) {
		$jdata = get_joined_record('bio_code_herme', $selected_id);
		if($jdata === false) $jdata = get_defaults('bio_code_herme');
		$rdata = $row;
	}
	$templateCode .= loadView('bio_code_herme-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: bio_code_herme_dv
	if(function_exists('bio_code_herme_dv')) {
		$args=[];
		bio_code_herme_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}