<?php

// Data functions (insert, update, delete, form) for table biblio_doc

// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

function biblio_doc_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('biblio_doc');
	if(!$arrPerm['insert']) return false;

	$data = [
		'img' => Request::fileUpload('img', [
			'maxSize' => 102400,
			'types' => 'jpg|jpeg|gif|png',
			'noRename' => false,
			'dir' => '',
			'success' => function($name, $selected_id) {
				createThumbnail($name, getThumbnailSpecs('biblio_doc', 'img', 'tv'));
				createThumbnail($name, getThumbnailSpecs('biblio_doc', 'img', 'dv'));
			},
			'failure' => function($selected_id, $fileRemoved) {
				if(!isset($_REQUEST['SelectedID'])) return '';

				/* for empty upload fields, when saving a copy of an existing record, copy the original upload field */
				return existing_value('biblio_doc', 'img', $_REQUEST['SelectedID']);
			},
		]),
		'author_name' => Request::lookup('author_id'),
		'author_id' => Request::val('author_id', ''),
		'type' => Request::val('type', ''),
		'genre' => Request::val('genre', ''),
		'created' => mysql_datetime(Request::val('created', '')),
		'published' => mysql_datetime(Request::val('published', '')),
		'title' => br2nl(Request::val('title', '')),
		'subtitle' => Request::val('subtitle', ''),
		'publisher' => Request::val('publisher', ''),
		'location' => Request::val('location', ''),
		'citation' => Request::val('citation', ''),
		'description' => Request::val('description', ''),
		'source' => Request::val('source', ''),
		'medium' => Request::val('medium', ''),
		'language' => Request::val('language', ''),
		'format' => Request::val('format', ''),
		'subject' => Request::val('subject', ''),
		'rights' => Request::val('rights', ''),
		'rights_holder' => Request::val('rights_holder', ''),
		'data_evaluation' => Request::val('data_evaluation', ''),
		'world_cat_no' => Request::val('world_cat_no', ''),
		'authority_record' => Request::val('authority_record', ''),
		'authority_organization' => Request::val('authority_organization', ''),
		'pdf_book' => Request::fileUpload('pdf_book', [
			'maxSize' => 10240000,
			'types' => 'txt|doc|docx|docm|odt|pdf|rtf',
			'noRename' => false,
			'dir' => '',
			'success' => function($name, $selected_id) {
			},
			'failure' => function($selected_id, $fileRemoved) {
				if(!isset($_REQUEST['SelectedID'])) return '';

				/* for empty upload fields, when saving a copy of an existing record, copy the original upload field */
				return existing_value('biblio_doc', 'pdf_book', $_REQUEST['SelectedID']);
			},
		]),
		'ext_source' => Request::val('ext_source', ''),
		'tags' => Request::multipleChoice('tags', ''),
		'team' => Request::val('team', ''),
		'biblio_lead' => Request::val('biblio_lead', ''),
	];

	if($data['author_id'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Author_id': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['title'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Title': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}

	// hook: biblio_doc_before_insert
	if(function_exists('biblio_doc_before_insert')) {
		$args = [];
		if(!biblio_doc_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('biblio_doc', backtick_keys_once($data), $error);
	if($error)
		die("{$error}<br><a href=\"#\" onclick=\"history.go(-1);\">{$Translation['< back']}</a>");

	$recID = db_insert_id(db_link());

	update_calc_fields('biblio_doc', $recID, calculated_fields()['biblio_doc']);

	// hook: biblio_doc_after_insert
	if(function_exists('biblio_doc_after_insert')) {
		$res = sql("SELECT * FROM `biblio_doc` WHERE `id`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=[];
		if(!biblio_doc_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('biblio_doc', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(!empty($_REQUEST['SelectedID'])) biblio_doc_copy_children($recID, $_REQUEST['SelectedID']);

	return $recID;
}

function biblio_doc_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function biblio_doc_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('biblio_doc', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: biblio_doc_before_delete
	if(function_exists('biblio_doc_before_delete')) {
		$args = [];
		if(!biblio_doc_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	// child table: biblio_transcript
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `biblio_transcript` WHERE `bibliography_title`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_transcript', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_transcript', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: biblio_token
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `biblio_token` WHERE `bibliography`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_token', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_token', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: biblio_code_invivo
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `biblio_code_invivo` WHERE `bibliography`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_invivo', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_invivo', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: biblio_code_demo
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `biblio_code_demo` WHERE `bibliography`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_demo', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_demo', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_storyline
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_storyline` WHERE `bibliography`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_storyline', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_storyline', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_chr_scene
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_chr_scene` WHERE `bibliography`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_chr_scene', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_chr_scene', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_encounter
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_encounter` WHERE `bibliographyA`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_encounter
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_encounter` WHERE `bibliographyB`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_code_herme
	$res = sql("SELECT `id` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_code_herme` WHERE `bibliography`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_code_herme', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_code_herme', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// delete file stored in the 'pdf_book' field
	$res = sql("SELECT `pdf_book` FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);
	if($row = @db_fetch_row($res)) {
		if($row[0] != '') {
			@unlink(getUploadDir('') . $row[0]);
		}
	}

	sql("DELETE FROM `biblio_doc` WHERE `id`='{$selected_id}'", $eo);

	// hook: biblio_doc_after_delete
	if(function_exists('biblio_doc_after_delete')) {
		$args = [];
		biblio_doc_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='biblio_doc' AND `pkValue`='{$selected_id}'", $eo);
}

function biblio_doc_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('biblio_doc', $selected_id, 'edit')) return false;

	$data = [
		'img' => Request::fileUpload('img', [
			'maxSize' => 102400,
			'types' => 'jpg|jpeg|gif|png',
			'noRename' => false,
			'dir' => '',
			'id' => $selected_id,
			'success' => function($name, $selected_id) {
				createThumbnail($name, getThumbnailSpecs('biblio_doc', 'img', 'tv'));
				createThumbnail($name, getThumbnailSpecs('biblio_doc', 'img', 'dv'));
			},
			'failure' => function($selected_id, $fileRemoved) {
				if($fileRemoved) return '';
				return existing_value('biblio_doc', 'img', $selected_id);
			},
		]),
		'author_name' => Request::lookup('author_id'),
		'author_id' => Request::val('author_id', ''),
		'type' => Request::val('type', ''),
		'genre' => Request::val('genre', ''),
		'created' => mysql_datetime(Request::val('created', '')),
		'published' => mysql_datetime(Request::val('published', '')),
		'title' => br2nl(Request::val('title', '')),
		'subtitle' => Request::val('subtitle', ''),
		'publisher' => Request::val('publisher', ''),
		'location' => Request::val('location', ''),
		'citation' => Request::val('citation', ''),
		'description' => Request::val('description', ''),
		'source' => Request::val('source', ''),
		'medium' => Request::val('medium', ''),
		'language' => Request::val('language', ''),
		'format' => Request::val('format', ''),
		'subject' => Request::val('subject', ''),
		'rights' => Request::val('rights', ''),
		'rights_holder' => Request::val('rights_holder', ''),
		'data_evaluation' => Request::val('data_evaluation', ''),
		'world_cat_no' => Request::val('world_cat_no', ''),
		'authority_record' => Request::val('authority_record', ''),
		'authority_organization' => Request::val('authority_organization', ''),
		'pdf_book' => Request::fileUpload('pdf_book', [
			'maxSize' => 10240000,
			'types' => 'txt|doc|docx|docm|odt|pdf|rtf',
			'noRename' => false,
			'dir' => '',
			'id' => $selected_id,
			'success' => function($name, $selected_id) {
			},
			'removeOnSuccess' => true,
			'removeOnRequest' => true,
			'remove' => function($selected_id) {
				// delete old file from server
				$oldFile = existing_value('biblio_doc', 'pdf_book', $selected_id);
				if(!$oldFile) return;

				@unlink(getUploadDir('') . $oldFile);
			},
			'failure' => function($selected_id, $fileRemoved) {
				if($fileRemoved) return '';
				return existing_value('biblio_doc', 'pdf_book', $selected_id);
			},
		]),
		'ext_source' => Request::val('ext_source', ''),
		'tags' => Request::multipleChoice('tags', ''),
		'team' => Request::val('team', ''),
		'biblio_lead' => Request::val('biblio_lead', ''),
	];

	if($data['author_id'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Author_id': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['title'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Title': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	// get existing values
	$old_data = getRecord('biblio_doc', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: biblio_doc_before_update
	if(function_exists('biblio_doc_before_update')) {
		$args = ['old_data' => $old_data];
		if(!biblio_doc_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'biblio_doc', 
		backtick_keys_once($set), 
		['`id`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="biblio_doc_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	$eo = ['silentErrors' => true];

	update_calc_fields('biblio_doc', $data['selectedID'], calculated_fields()['biblio_doc']);

	// hook: biblio_doc_after_update
	if(function_exists('biblio_doc_after_update')) {
		$res = sql("SELECT * FROM `biblio_doc` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['id'];
		$args = ['old_data' => $old_data];
		if(!biblio_doc_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "' WHERE `tableName`='biblio_doc' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);
}

function biblio_doc_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm = getTablePermissions('biblio_doc');
	if(!$arrPerm['insert'] && $selected_id=='') { return ''; }
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != '') {
		$dvprint = true;
	}

	$filterer_author_id = thisOr($_REQUEST['filterer_author_id'], '');
	$filterer_type = thisOr($_REQUEST['filterer_type'], '');
	$filterer_genre = thisOr($_REQUEST['filterer_genre'], '');
	$filterer_language = thisOr($_REQUEST['filterer_language'], '');
	$filterer_rights = thisOr($_REQUEST['filterer_rights'], '');
	$filterer_data_evaluation = thisOr($_REQUEST['filterer_data_evaluation'], '');
	$filterer_authority_organization = thisOr($_REQUEST['filterer_authority_organization'], '');
	$filterer_team = thisOr($_REQUEST['filterer_team'], '');
	$filterer_biblio_lead = thisOr($_REQUEST['filterer_biblio_lead'], '');

	// populate filterers, starting from children to grand-parents
	if($filterer_biblio_lead && !$filterer_team) $filterer_team = sqlValue("select team from biblio_analyst where id='" . makeSafe($filterer_biblio_lead) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: author_id
	$combo_author_id = new DataCombo;
	// combobox: type
	$combo_type = new DataCombo;
	// combobox: genre
	$combo_genre = new DataCombo;
	// combobox: language
	$combo_language = new DataCombo;
	// combobox: rights
	$combo_rights = new DataCombo;
	// combobox: data_evaluation
	$combo_data_evaluation = new DataCombo;
	// combobox: authority_organization
	$combo_authority_organization = new DataCombo;
	// combobox: tags
	$combo_tags = new Combo;
	$combo_tags->ListType = 3;
	$combo_tags->MultipleSeparator = ', ';
	$combo_tags->ListBoxHeight = 10;
	$combo_tags->RadiosPerLine = 1;
	if(is_file(dirname(__FILE__).'/hooks/biblio_doc.tags.csv')) {
		$tags_data = addslashes(implode('', @file(dirname(__FILE__).'/hooks/biblio_doc.tags.csv')));
		$combo_tags->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions($tags_data)));
		$combo_tags->ListData = $combo_tags->ListItem;
	} else {
		$combo_tags->ListItem = explode('||', entitiesToUTF8(convertLegacyOptions("schweiz;;helvetia;;republik;;freiheit;;nation;;")));
		$combo_tags->ListData = $combo_tags->ListItem;
	}
	$combo_tags->SelectName = 'tags';
	// combobox: team
	$combo_team = new DataCombo;
	// combobox: biblio_lead, filterable by: team
	$combo_biblio_lead = new DataCombo;

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm['view']) return '';

		// mm: who is the owner?
		$ownerGroupID = sqlValue("SELECT `groupID` FROM `membership_userrecords` WHERE `tableName`='biblio_doc' AND `pkValue`='" . makeSafe($selected_id) . "'");
		$ownerMemberID = sqlValue("SELECT LCASE(`memberID`) FROM `membership_userrecords` WHERE `tableName`='biblio_doc' AND `pkValue`='" . makeSafe($selected_id) . "'");

		if($arrPerm['view'] == 1 && getLoggedMemberID() != $ownerMemberID) return '';
		if($arrPerm['view'] == 2 && getLoggedGroupID() != $ownerGroupID) return '';

		// can edit?
		$AllowUpdate = 0;
		if(($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3) {
			$AllowUpdate = 1;
		}

		$res = sql("SELECT * FROM `biblio_doc` WHERE `id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'biblio_doc_view.php', false);
		}
		$combo_author_id->SelectedData = $row['author_id'];
		$combo_type->SelectedData = $row['type'];
		$combo_genre->SelectedData = $row['genre'];
		$combo_language->SelectedData = $row['language'];
		$combo_rights->SelectedData = $row['rights'];
		$combo_data_evaluation->SelectedData = $row['data_evaluation'];
		$combo_authority_organization->SelectedData = $row['authority_organization'];
		$combo_tags->SelectedData = $row['tags'];
		$combo_team->SelectedData = $row['team'];
		$combo_biblio_lead->SelectedData = $row['biblio_lead'];
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input(datalist_db_encoding);
		$row = $hc->xss_clean($row); /* sanitize data */
	} else {
		$combo_author_id->SelectedData = $filterer_author_id;
		$combo_type->SelectedData = $filterer_type;
		$combo_genre->SelectedData = $filterer_genre;
		$combo_language->SelectedData = $filterer_language;
		$combo_rights->SelectedData = $filterer_rights;
		$combo_data_evaluation->SelectedData = $filterer_data_evaluation;
		$combo_authority_organization->SelectedData = $filterer_authority_organization;
		$combo_team->SelectedData = $filterer_team;
		$combo_biblio_lead->SelectedData = $filterer_biblio_lead;
	}
	$combo_author_id->HTML = '<span id="author_id-container' . $rnd1 . '"></span><input type="hidden" name="author_id" id="author_id' . $rnd1 . '" value="' . html_attr($combo_author_id->SelectedData) . '">';
	$combo_author_id->MatchText = '<span id="author_id-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author_id" id="author_id' . $rnd1 . '" value="' . html_attr($combo_author_id->SelectedData) . '">';
	$combo_type->HTML = '<span id="type-container' . $rnd1 . '"></span><input type="hidden" name="type" id="type' . $rnd1 . '" value="' . html_attr($combo_type->SelectedData) . '">';
	$combo_type->MatchText = '<span id="type-container-readonly' . $rnd1 . '"></span><input type="hidden" name="type" id="type' . $rnd1 . '" value="' . html_attr($combo_type->SelectedData) . '">';
	$combo_genre->HTML = '<span id="genre-container' . $rnd1 . '"></span><input type="hidden" name="genre" id="genre' . $rnd1 . '" value="' . html_attr($combo_genre->SelectedData) . '">';
	$combo_genre->MatchText = '<span id="genre-container-readonly' . $rnd1 . '"></span><input type="hidden" name="genre" id="genre' . $rnd1 . '" value="' . html_attr($combo_genre->SelectedData) . '">';
	$combo_language->HTML = '<span id="language-container' . $rnd1 . '"></span><input type="hidden" name="language" id="language' . $rnd1 . '" value="' . html_attr($combo_language->SelectedData) . '">';
	$combo_language->MatchText = '<span id="language-container-readonly' . $rnd1 . '"></span><input type="hidden" name="language" id="language' . $rnd1 . '" value="' . html_attr($combo_language->SelectedData) . '">';
	$combo_rights->HTML = '<span id="rights-container' . $rnd1 . '"></span><input type="hidden" name="rights" id="rights' . $rnd1 . '" value="' . html_attr($combo_rights->SelectedData) . '">';
	$combo_rights->MatchText = '<span id="rights-container-readonly' . $rnd1 . '"></span><input type="hidden" name="rights" id="rights' . $rnd1 . '" value="' . html_attr($combo_rights->SelectedData) . '">';
	$combo_data_evaluation->HTML = '<span id="data_evaluation-container' . $rnd1 . '"></span><input type="hidden" name="data_evaluation" id="data_evaluation' . $rnd1 . '" value="' . html_attr($combo_data_evaluation->SelectedData) . '">';
	$combo_data_evaluation->MatchText = '<span id="data_evaluation-container-readonly' . $rnd1 . '"></span><input type="hidden" name="data_evaluation" id="data_evaluation' . $rnd1 . '" value="' . html_attr($combo_data_evaluation->SelectedData) . '">';
	$combo_authority_organization->HTML = '<span id="authority_organization-container' . $rnd1 . '"></span><input type="hidden" name="authority_organization" id="authority_organization' . $rnd1 . '" value="' . html_attr($combo_authority_organization->SelectedData) . '">';
	$combo_authority_organization->MatchText = '<span id="authority_organization-container-readonly' . $rnd1 . '"></span><input type="hidden" name="authority_organization" id="authority_organization' . $rnd1 . '" value="' . html_attr($combo_authority_organization->SelectedData) . '">';
	$combo_tags->Render();
	$combo_team->HTML = '<span id="team-container' . $rnd1 . '"></span><input type="hidden" name="team" id="team' . $rnd1 . '" value="' . html_attr($combo_team->SelectedData) . '">';
	$combo_team->MatchText = '<span id="team-container-readonly' . $rnd1 . '"></span><input type="hidden" name="team" id="team' . $rnd1 . '" value="' . html_attr($combo_team->SelectedData) . '">';
	$combo_biblio_lead->HTML = '<span id="biblio_lead-container' . $rnd1 . '"></span><input type="hidden" name="biblio_lead" id="biblio_lead' . $rnd1 . '" value="' . html_attr($combo_biblio_lead->SelectedData) . '">';
	$combo_biblio_lead->MatchText = '<span id="biblio_lead-container-readonly' . $rnd1 . '"></span><input type="hidden" name="biblio_lead" id="biblio_lead' . $rnd1 . '" value="' . html_attr($combo_biblio_lead->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_author_id__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author_id'] : $filterer_author_id); ?>"};
		AppGini.current_type__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['type'] : $filterer_type); ?>"};
		AppGini.current_genre__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['genre'] : $filterer_genre); ?>"};
		AppGini.current_language__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['language'] : $filterer_language); ?>"};
		AppGini.current_rights__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['rights'] : $filterer_rights); ?>"};
		AppGini.current_data_evaluation__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['data_evaluation'] : $filterer_data_evaluation); ?>"};
		AppGini.current_authority_organization__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['authority_organization'] : $filterer_authority_organization); ?>"};
		AppGini.current_team__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['team'] : $filterer_team); ?>"};
		AppGini.current_biblio_lead__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['biblio_lead'] : $filterer_biblio_lead); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(author_id_reload__RAND__) == 'function') author_id_reload__RAND__();
				if(typeof(type_reload__RAND__) == 'function') type_reload__RAND__();
				if(typeof(genre_reload__RAND__) == 'function') genre_reload__RAND__();
				if(typeof(language_reload__RAND__) == 'function') language_reload__RAND__();
				if(typeof(rights_reload__RAND__) == 'function') rights_reload__RAND__();
				if(typeof(data_evaluation_reload__RAND__) == 'function') data_evaluation_reload__RAND__();
				if(typeof(authority_organization_reload__RAND__) == 'function') authority_organization_reload__RAND__();
				if(typeof(team_reload__RAND__) == 'function') team_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(biblio_lead_reload__RAND__) == \'function\') biblio_lead_reload__RAND__(AppGini.current_team__RAND__.value);' : ''); ?>
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function author_id_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#author_id-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_author_id__RAND__.value, t: 'biblio_doc', f: 'author_id' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="author_id"]').val(resp.results[0].id);
							$j('[id=author_id-container-readonly__RAND__]').html('<span id="author_id-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }


							if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'author_id' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_author_id__RAND__.value = e.added.id;
				AppGini.current_author_id__RAND__.text = e.added.text;
				$j('[name="author_id"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }


				if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
			});

			if(!$j("#author_id-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_author_id__RAND__.value, t: 'biblio_doc', f: 'author_id' },
					success: function(resp) {
						$j('[name="author_id"]').val(resp.results[0].id);
						$j('[id=author_id-container-readonly__RAND__]').html('<span id="author_id-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_author_id__RAND__.value, t: 'biblio_doc', f: 'author_id' },
				success: function(resp) {
					$j('[id=author_id-container__RAND__], [id=author_id-container-readonly__RAND__]').html('<span id="author_id-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

					if(typeof(author_id_update_autofills__RAND__) == 'function') author_id_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function type_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#type-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_type__RAND__.value, t: 'biblio_doc', f: 'type' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="type"]').val(resp.results[0].id);
							$j('[id=type-container-readonly__RAND__]').html('<span id="type-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_type_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_type_view_parent]').show(); }


							if(typeof(type_update_autofills__RAND__) == 'function') type_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'type' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_type__RAND__.value = e.added.id;
				AppGini.current_type__RAND__.text = e.added.text;
				$j('[name="type"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_type_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_type_view_parent]').show(); }


				if(typeof(type_update_autofills__RAND__) == 'function') type_update_autofills__RAND__();
			});

			if(!$j("#type-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_type__RAND__.value, t: 'biblio_doc', f: 'type' },
					success: function(resp) {
						$j('[name="type"]').val(resp.results[0].id);
						$j('[id=type-container-readonly__RAND__]').html('<span id="type-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_type_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_type_view_parent]').show(); }

						if(typeof(type_update_autofills__RAND__) == 'function') type_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_type__RAND__.value, t: 'biblio_doc', f: 'type' },
				success: function(resp) {
					$j('[id=type-container__RAND__], [id=type-container-readonly__RAND__]').html('<span id="type-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_type_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_type_view_parent]').show(); }

					if(typeof(type_update_autofills__RAND__) == 'function') type_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function genre_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#genre-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_genre__RAND__.value, t: 'biblio_doc', f: 'genre' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="genre"]').val(resp.results[0].id);
							$j('[id=genre-container-readonly__RAND__]').html('<span id="genre-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_genre_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_genre_view_parent]').show(); }


							if(typeof(genre_update_autofills__RAND__) == 'function') genre_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'genre' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_genre__RAND__.value = e.added.id;
				AppGini.current_genre__RAND__.text = e.added.text;
				$j('[name="genre"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_genre_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_genre_view_parent]').show(); }


				if(typeof(genre_update_autofills__RAND__) == 'function') genre_update_autofills__RAND__();
			});

			if(!$j("#genre-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_genre__RAND__.value, t: 'biblio_doc', f: 'genre' },
					success: function(resp) {
						$j('[name="genre"]').val(resp.results[0].id);
						$j('[id=genre-container-readonly__RAND__]').html('<span id="genre-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_genre_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_genre_view_parent]').show(); }

						if(typeof(genre_update_autofills__RAND__) == 'function') genre_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_genre__RAND__.value, t: 'biblio_doc', f: 'genre' },
				success: function(resp) {
					$j('[id=genre-container__RAND__], [id=genre-container-readonly__RAND__]').html('<span id="genre-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_bibliography_genre_view_parent]').hide(); } else { $j('.btn[id=class_bibliography_genre_view_parent]').show(); }

					if(typeof(genre_update_autofills__RAND__) == 'function') genre_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function language_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#language-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_language__RAND__.value, t: 'biblio_doc', f: 'language' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="language"]').val(resp.results[0].id);
							$j('[id=language-container-readonly__RAND__]').html('<span id="language-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_language_view_parent]').hide(); } else { $j('.btn[id=class_language_view_parent]').show(); }


							if(typeof(language_update_autofills__RAND__) == 'function') language_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'language' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_language__RAND__.value = e.added.id;
				AppGini.current_language__RAND__.text = e.added.text;
				$j('[name="language"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_language_view_parent]').hide(); } else { $j('.btn[id=class_language_view_parent]').show(); }


				if(typeof(language_update_autofills__RAND__) == 'function') language_update_autofills__RAND__();
			});

			if(!$j("#language-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_language__RAND__.value, t: 'biblio_doc', f: 'language' },
					success: function(resp) {
						$j('[name="language"]').val(resp.results[0].id);
						$j('[id=language-container-readonly__RAND__]').html('<span id="language-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_language_view_parent]').hide(); } else { $j('.btn[id=class_language_view_parent]').show(); }

						if(typeof(language_update_autofills__RAND__) == 'function') language_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_language__RAND__.value, t: 'biblio_doc', f: 'language' },
				success: function(resp) {
					$j('[id=language-container__RAND__], [id=language-container-readonly__RAND__]').html('<span id="language-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_language_view_parent]').hide(); } else { $j('.btn[id=class_language_view_parent]').show(); }

					if(typeof(language_update_autofills__RAND__) == 'function') language_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function rights_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#rights-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_rights__RAND__.value, t: 'biblio_doc', f: 'rights' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="rights"]').val(resp.results[0].id);
							$j('[id=rights-container-readonly__RAND__]').html('<span id="rights-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }


							if(typeof(rights_update_autofills__RAND__) == 'function') rights_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'rights' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_rights__RAND__.value = e.added.id;
				AppGini.current_rights__RAND__.text = e.added.text;
				$j('[name="rights"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }


				if(typeof(rights_update_autofills__RAND__) == 'function') rights_update_autofills__RAND__();
			});

			if(!$j("#rights-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_rights__RAND__.value, t: 'biblio_doc', f: 'rights' },
					success: function(resp) {
						$j('[name="rights"]').val(resp.results[0].id);
						$j('[id=rights-container-readonly__RAND__]').html('<span id="rights-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }

						if(typeof(rights_update_autofills__RAND__) == 'function') rights_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_rights__RAND__.value, t: 'biblio_doc', f: 'rights' },
				success: function(resp) {
					$j('[id=rights-container__RAND__], [id=rights-container-readonly__RAND__]').html('<span id="rights-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }

					if(typeof(rights_update_autofills__RAND__) == 'function') rights_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function data_evaluation_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#data_evaluation-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_data_evaluation__RAND__.value, t: 'biblio_doc', f: 'data_evaluation' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="data_evaluation"]').val(resp.results[0].id);
							$j('[id=data_evaluation-container-readonly__RAND__]').html('<span id="data_evaluation-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }


							if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'data_evaluation' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_data_evaluation__RAND__.value = e.added.id;
				AppGini.current_data_evaluation__RAND__.text = e.added.text;
				$j('[name="data_evaluation"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }


				if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
			});

			if(!$j("#data_evaluation-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_data_evaluation__RAND__.value, t: 'biblio_doc', f: 'data_evaluation' },
					success: function(resp) {
						$j('[name="data_evaluation"]').val(resp.results[0].id);
						$j('[id=data_evaluation-container-readonly__RAND__]').html('<span id="data_evaluation-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }

						if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_data_evaluation__RAND__.value, t: 'biblio_doc', f: 'data_evaluation' },
				success: function(resp) {
					$j('[id=data_evaluation-container__RAND__], [id=data_evaluation-container-readonly__RAND__]').html('<span id="data_evaluation-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }

					if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function authority_organization_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#authority_organization-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_authority_organization__RAND__.value, t: 'biblio_doc', f: 'authority_organization' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="authority_organization"]').val(resp.results[0].id);
							$j('[id=authority_organization-container-readonly__RAND__]').html('<span id="authority_organization-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_authority_library_view_parent]').hide(); } else { $j('.btn[id=class_authority_library_view_parent]').show(); }


							if(typeof(authority_organization_update_autofills__RAND__) == 'function') authority_organization_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'authority_organization' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_authority_organization__RAND__.value = e.added.id;
				AppGini.current_authority_organization__RAND__.text = e.added.text;
				$j('[name="authority_organization"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_authority_library_view_parent]').hide(); } else { $j('.btn[id=class_authority_library_view_parent]').show(); }


				if(typeof(authority_organization_update_autofills__RAND__) == 'function') authority_organization_update_autofills__RAND__();
			});

			if(!$j("#authority_organization-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_authority_organization__RAND__.value, t: 'biblio_doc', f: 'authority_organization' },
					success: function(resp) {
						$j('[name="authority_organization"]').val(resp.results[0].id);
						$j('[id=authority_organization-container-readonly__RAND__]').html('<span id="authority_organization-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_authority_library_view_parent]').hide(); } else { $j('.btn[id=class_authority_library_view_parent]').show(); }

						if(typeof(authority_organization_update_autofills__RAND__) == 'function') authority_organization_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_authority_organization__RAND__.value, t: 'biblio_doc', f: 'authority_organization' },
				success: function(resp) {
					$j('[id=authority_organization-container__RAND__], [id=authority_organization-container-readonly__RAND__]').html('<span id="authority_organization-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_authority_library_view_parent]').hide(); } else { $j('.btn[id=class_authority_library_view_parent]').show(); }

					if(typeof(authority_organization_update_autofills__RAND__) == 'function') authority_organization_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function team_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#team-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_team__RAND__.value, t: 'biblio_doc', f: 'team' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="team"]').val(resp.results[0].id);
							$j('[id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

						if(typeof(biblio_lead_reload__RAND__) == 'function') biblio_lead_reload__RAND__(AppGini.current_team__RAND__.value);

							if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_doc', f: 'team' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_team__RAND__.value = e.added.id;
				AppGini.current_team__RAND__.text = e.added.text;
				$j('[name="team"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

						if(typeof(biblio_lead_reload__RAND__) == 'function') biblio_lead_reload__RAND__(AppGini.current_team__RAND__.value);

				if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
			});

			if(!$j("#team-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_team__RAND__.value, t: 'biblio_doc', f: 'team' },
					success: function(resp) {
						$j('[name="team"]').val(resp.results[0].id);
						$j('[id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

						if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_team__RAND__.value, t: 'biblio_doc', f: 'team' },
				success: function(resp) {
					$j('[id=team-container__RAND__], [id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

					if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function biblio_lead_reload__RAND__(filterer_team) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#biblio_lead-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_team: filterer_team, id: AppGini.current_biblio_lead__RAND__.value, t: 'biblio_doc', f: 'biblio_lead' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="biblio_lead"]').val(resp.results[0].id);
							$j('[id=biblio_lead-container-readonly__RAND__]').html('<span id="biblio_lead-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }


							if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_team: filterer_team, s: term, p: page, t: 'biblio_doc', f: 'biblio_lead' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_biblio_lead__RAND__.value = e.added.id;
				AppGini.current_biblio_lead__RAND__.text = e.added.text;
				$j('[name="biblio_lead"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }


				if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
			});

			if(!$j("#biblio_lead-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_biblio_lead__RAND__.value, t: 'biblio_doc', f: 'biblio_lead' },
					success: function(resp) {
						$j('[name="biblio_lead"]').val(resp.results[0].id);
						$j('[id=biblio_lead-container-readonly__RAND__]').html('<span id="biblio_lead-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }

						if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_biblio_lead__RAND__.value, t: 'biblio_doc', f: 'biblio_lead' },
				success: function(resp) {
					$j('[id=biblio_lead-container__RAND__], [id=biblio_lead-container-readonly__RAND__]').html('<span id="biblio_lead-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }

					if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/biblio_doc_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/biblio_doc_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert) {
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return biblio_doc_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return biblio_doc_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return biblio_doc_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly .= "\tjQuery('#img').replaceWith('<div class=\"form-control-static\" id=\"img\">' + (jQuery('#img').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#author_id').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_id_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#type').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#type_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#genre').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#genre_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#created').parents('.input-group').replaceWith('<div class=\"form-control-static\" id=\"created\">' + (jQuery('#created').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#published').parents('.input-group').replaceWith('<div class=\"form-control-static\" id=\"published\">' + (jQuery('#published').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#title').replaceWith('<div class=\"form-control-static\" id=\"title\">' + (jQuery('#title').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#subtitle').replaceWith('<div class=\"form-control-static\" id=\"subtitle\">' + (jQuery('#subtitle').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#publisher').replaceWith('<div class=\"form-control-static\" id=\"publisher\">' + (jQuery('#publisher').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#location').replaceWith('<div class=\"form-control-static\" id=\"location\">' + (jQuery('#location').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#citation').replaceWith('<div class=\"form-control-static\" id=\"citation\">' + (jQuery('#citation').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#description').replaceWith('<div class=\"form-control-static\" id=\"description\">' + (jQuery('#description').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#source').replaceWith('<div class=\"form-control-static\" id=\"source\">' + (jQuery('#source').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#medium').replaceWith('<div class=\"form-control-static\" id=\"medium\">' + (jQuery('#medium').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#language').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#language_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#format').replaceWith('<div class=\"form-control-static\" id=\"format\">' + (jQuery('#format').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#subject').replaceWith('<div class=\"form-control-static\" id=\"subject\">' + (jQuery('#subject').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#rights').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#rights_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#rights_holder').replaceWith('<div class=\"form-control-static\" id=\"rights_holder\">' + (jQuery('#rights_holder').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#data_evaluation').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#data_evaluation_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#world_cat_no').replaceWith('<div class=\"form-control-static\" id=\"world_cat_no\">' + (jQuery('#world_cat_no').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#authority_record').replaceWith('<div class=\"form-control-static\" id=\"authority_record\">' + (jQuery('#authority_record').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#authority_organization').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#authority_organization_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#pdf_book').replaceWith('<div class=\"form-control-static\" id=\"pdf_book\">' + (jQuery('#pdf_book').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#pdf_book, #pdf_book-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('#ext_source').replaceWith('<div class=\"form-control-static\" id=\"ext_source\">' + (jQuery('#ext_source').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#tags').replaceWith('<div class=\"form-control-static\" id=\"tags\">' + (jQuery('#tags').val() || '') + '</div>'); jQuery('#tags-multi-selection-help').hide();\n";
		$jsReadOnly .= "\tjQuery('#s2id_tags').remove();\n";
		$jsReadOnly .= "\tjQuery('#team').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#team_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#biblio_lead').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#biblio_lead_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif($AllowInsert) {
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
		$locale = isset($Translation['datetimepicker locale']) ? ", locale: '{$Translation['datetimepicker locale']}'" : '';
		$jsEditable .= "\tjQuery('#created').addClass('always_shown').parents('.input-group').datetimepicker({ toolbarPlacement: 'top', sideBySide: true, showClear: true, showTodayButton: true, showClose: true, icons: { close: 'glyphicon glyphicon-ok' }, format: AppGini.datetimeFormat('dt') {$locale} });";
		$locale = isset($Translation['datetimepicker locale']) ? ", locale: '{$Translation['datetimepicker locale']}'" : '';
		$jsEditable .= "\tjQuery('#published').addClass('always_shown').parents('.input-group').datetimepicker({ toolbarPlacement: 'top', sideBySide: true, showClear: true, showTodayButton: true, showClose: true, icons: { close: 'glyphicon glyphicon-ok' }, format: AppGini.datetimeFormat('dt') {$locale} });";
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(author_id)%%>', $combo_author_id->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(author_id)%%>', $combo_author_id->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(author_id)%%>', urlencode($combo_author_id->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(type)%%>', $combo_type->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(type)%%>', $combo_type->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(type)%%>', urlencode($combo_type->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(genre)%%>', $combo_genre->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(genre)%%>', $combo_genre->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(genre)%%>', urlencode($combo_genre->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(language)%%>', $combo_language->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(language)%%>', $combo_language->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(language)%%>', urlencode($combo_language->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(rights)%%>', $combo_rights->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(rights)%%>', $combo_rights->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(rights)%%>', urlencode($combo_rights->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(data_evaluation)%%>', $combo_data_evaluation->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(data_evaluation)%%>', $combo_data_evaluation->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(data_evaluation)%%>', urlencode($combo_data_evaluation->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(authority_organization)%%>', $combo_authority_organization->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(authority_organization)%%>', $combo_authority_organization->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(authority_organization)%%>', urlencode($combo_authority_organization->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(tags)%%>', $combo_tags->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(tags)%%>', $combo_tags->SelectedData, $templateCode);
	$templateCode = str_replace('<%%COMBO(team)%%>', $combo_team->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(team)%%>', $combo_team->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(team)%%>', urlencode($combo_team->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(biblio_lead)%%>', $combo_biblio_lead->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(biblio_lead)%%>', $combo_biblio_lead->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(biblio_lead)%%>', urlencode($combo_biblio_lead->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array('author_id' => array('biblio_author', 'Author_id'), 'type' => array('class_bibliography_type', 'Type'), 'genre' => array('class_bibliography_genre', 'Genre'), 'language' => array('class_language', 'Language'), 'rights' => array('class_rights', 'Rights'), 'data_evaluation' => array('class_evaluation', 'Data evaluation'), 'authority_organization' => array('class_authority_library', 'Authority organization'), 'team' => array('biblio_team', 'Team'), 'biblio_lead' => array('biblio_analyst', 'Analyst'), );
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(img)%%>', ($noUploads ? '' : "<div>{$Translation['upload image']}</div>" . '<i class="glyphicon glyphicon-remove text-danger clear-upload hidden"></i> <input type="file" name="img" id="img" data-filetypes="jpg|jpeg|gif|png" data-maxsize="102400" accept=".jpg,.jpeg,.gif,.png">'), $templateCode);
	if($AllowUpdate && $row['img'] != '') {
		$templateCode = str_replace('<%%REMOVEFILE(img)%%>', '<br><input type="checkbox" name="img_remove" id="img_remove" value="1"> <label for="img_remove" style="color: red; font-weight: bold;">'.$Translation['remove image'].'</label>', $templateCode);
	} else {
		$templateCode = str_replace('<%%REMOVEFILE(img)%%>', '', $templateCode);
	}
	$templateCode = str_replace('<%%UPLOADFILE(author_id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(type)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(genre)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(created)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(published)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(title)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(subtitle)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(publisher)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(location)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(citation)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(description)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(source)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(medium)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(language)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(format)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(subject)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(rights)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(rights_holder)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(data_evaluation)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(world_cat_no)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(authority_record)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(authority_organization)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(pdf_book)%%>', ($noUploads ? '' : "<div>{$Translation['upload image']}</div>" . '<i class="glyphicon glyphicon-remove text-danger clear-upload hidden"></i> <input type="file" name="pdf_book" id="pdf_book" data-filetypes="txt|doc|docx|docm|odt|pdf|rtf" data-maxsize="10240000" accept=".txt,.doc,.docx,.docm,.odt,.pdf,.rtf">'), $templateCode);
	if($AllowUpdate && $row['pdf_book'] != '') {
		$templateCode = str_replace('<%%REMOVEFILE(pdf_book)%%>', '<br><input type="checkbox" name="pdf_book_remove" id="pdf_book_remove" value="1"> <label for="pdf_book_remove" style="color: red; font-weight: bold;">'.$Translation['remove image'].'</label>', $templateCode);
	} else {
		$templateCode = str_replace('<%%REMOVEFILE(pdf_book)%%>', '', $templateCode);
	}
	$templateCode = str_replace('<%%UPLOADFILE(ext_source)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(tags)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(team)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(biblio_lead)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		$row['img'] = ($row['img'] != '' ? $row['img'] : 'blank.gif');
		if( $dvprint) $templateCode = str_replace('<%%VALUE(img)%%>', safe_html($urow['img']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(img)%%>', html_attr($row['img']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(img)%%>', urlencode($urow['img']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(author_id)%%>', safe_html($urow['author_id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(author_id)%%>', html_attr($row['author_id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_id)%%>', urlencode($urow['author_id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(type)%%>', safe_html($urow['type']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(type)%%>', html_attr($row['type']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(type)%%>', urlencode($urow['type']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(genre)%%>', safe_html($urow['genre']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(genre)%%>', html_attr($row['genre']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(genre)%%>', urlencode($urow['genre']), $templateCode);
		$templateCode = str_replace('<%%VALUE(created)%%>', app_datetime($row['created'], 'dt'), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created)%%>', urlencode(app_datetime($urow['created'], 'dt')), $templateCode);
		$templateCode = str_replace('<%%VALUE(published)%%>', app_datetime($row['published'], 'dt'), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(published)%%>', urlencode(app_datetime($urow['published'], 'dt')), $templateCode);
		if($dvprint || (!$AllowUpdate && !$AllowInsert)) {
			$templateCode = str_replace('<%%VALUE(title)%%>', safe_html($urow['title']), $templateCode);
		} else {
			$templateCode = str_replace('<%%VALUE(title)%%>', html_attr($row['title']), $templateCode);
		}
		$templateCode = str_replace('<%%URLVALUE(title)%%>', urlencode($urow['title']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(subtitle)%%>', safe_html($urow['subtitle']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(subtitle)%%>', html_attr($row['subtitle']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(subtitle)%%>', urlencode($urow['subtitle']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(publisher)%%>', safe_html($urow['publisher']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(publisher)%%>', html_attr($row['publisher']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(publisher)%%>', urlencode($urow['publisher']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(location)%%>', safe_html($urow['location']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(location)%%>', html_attr($row['location']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(location)%%>', urlencode($urow['location']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(citation)%%>', safe_html($urow['citation']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(citation)%%>', html_attr($row['citation']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(citation)%%>', urlencode($urow['citation']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(description)%%>', safe_html($urow['description']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(description)%%>', html_attr($row['description']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(description)%%>', urlencode($urow['description']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(source)%%>', safe_html($urow['source']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(source)%%>', html_attr($row['source']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(source)%%>', urlencode($urow['source']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(medium)%%>', safe_html($urow['medium']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(medium)%%>', html_attr($row['medium']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(medium)%%>', urlencode($urow['medium']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(language)%%>', safe_html($urow['language']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(language)%%>', html_attr($row['language']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(language)%%>', urlencode($urow['language']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(format)%%>', safe_html($urow['format']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(format)%%>', html_attr($row['format']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(format)%%>', urlencode($urow['format']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(subject)%%>', safe_html($urow['subject']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(subject)%%>', html_attr($row['subject']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(subject)%%>', urlencode($urow['subject']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(rights)%%>', safe_html($urow['rights']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(rights)%%>', html_attr($row['rights']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(rights)%%>', urlencode($urow['rights']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(rights_holder)%%>', safe_html($urow['rights_holder']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(rights_holder)%%>', html_attr($row['rights_holder']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(rights_holder)%%>', urlencode($urow['rights_holder']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(data_evaluation)%%>', safe_html($urow['data_evaluation']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(data_evaluation)%%>', html_attr($row['data_evaluation']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(data_evaluation)%%>', urlencode($urow['data_evaluation']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(world_cat_no)%%>', safe_html($urow['world_cat_no']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(world_cat_no)%%>', html_attr($row['world_cat_no']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(world_cat_no)%%>', urlencode($urow['world_cat_no']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(authority_record)%%>', safe_html($urow['authority_record']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(authority_record)%%>', html_attr($row['authority_record']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authority_record)%%>', urlencode($urow['authority_record']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(authority_organization)%%>', safe_html($urow['authority_organization']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(authority_organization)%%>', html_attr($row['authority_organization']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authority_organization)%%>', urlencode($urow['authority_organization']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(pdf_book)%%>', safe_html($urow['pdf_book']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(pdf_book)%%>', html_attr($row['pdf_book']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(pdf_book)%%>', urlencode($urow['pdf_book']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(ext_source)%%>', safe_html($urow['ext_source']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(ext_source)%%>', html_attr($row['ext_source']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(ext_source)%%>', urlencode($urow['ext_source']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(tags)%%>', safe_html($urow['tags']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(tags)%%>', html_attr($row['tags']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tags)%%>', urlencode($urow['tags']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(team)%%>', safe_html($urow['team']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(team)%%>', html_attr($row['team']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(team)%%>', urlencode($urow['team']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(biblio_lead)%%>', safe_html($urow['biblio_lead']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(biblio_lead)%%>', html_attr($row['biblio_lead']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(biblio_lead)%%>', urlencode($urow['biblio_lead']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(img)%%>', 'blank.gif', $templateCode);
		$templateCode = str_replace('<%%VALUE(author_id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(type)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(type)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(genre)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(genre)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(created)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(published)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(published)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(title)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(title)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(subtitle)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(subtitle)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(publisher)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(publisher)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(location)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(location)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(citation)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(citation)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(description)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(description)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(source)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(source)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(medium)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(medium)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(language)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(language)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(format)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(format)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(subject)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(subject)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(rights)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(rights)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(rights_holder)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(rights_holder)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(data_evaluation)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(data_evaluation)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(world_cat_no)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(world_cat_no)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(authority_record)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authority_record)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(authority_organization)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authority_organization)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(pdf_book)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(pdf_book)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(ext_source)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(ext_source)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(tags)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tags)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(team)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(team)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(biblio_lead)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(biblio_lead)%%>', urlencode(''), $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
			$templateCode.="\n\tif(document.getElementById('pdf_bookEdit')) { document.getElementById('pdf_bookEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('pdf_bookEditLink')) { document.getElementById('pdf_bookEditLink').style.display='none'; }";
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\tauthor_id_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'biblio_doc_autofill.php?rnd1=$rnd1&mfk=author_id&id=' + encodeURIComponent('".addslashes($row['author_id'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'biblio_doc_autofill.php?rnd1=$rnd1&mfk=author_id&id=' + encodeURIComponent(AppGini.current_author_id{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#author_id$rnd1').prop('disabled', true); \$j('#author_idLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#author_id$rnd1').prop('disabled', false); " : "\$j('#author_id$rnd1').prop('disabled', true); ")."\$j('#author_idLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#author_id_caption').length) \$j('#author_id_caption').click(function() { author_id_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('biblio_doc');
	if($selected_id) {
		$jdata = get_joined_record('biblio_doc', $selected_id);
		if($jdata === false) $jdata = get_defaults('biblio_doc');
		$rdata = $row;
	}
	$templateCode .= loadView('biblio_doc-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: biblio_doc_dv
	if(function_exists('biblio_doc_dv')) {
		$args=[];
		biblio_doc_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}