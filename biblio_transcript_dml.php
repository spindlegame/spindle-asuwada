<?php

// Data functions (insert, update, delete, form) for table biblio_transcript

// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

function biblio_transcript_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('biblio_transcript');
	if(!$arrPerm['insert']) return false;

	$data = [
		'author' => Request::lookup('author_memberID'),
		'author_memberID' => Request::val('author_memberID', ''),
		'bibliography_id' => Request::lookup('bibliography_title'),
		'bibliography_title' => Request::val('bibliography_title', ''),
		'transcript_title' => Request::val('transcript_title', ''),
		'transcript' => Request::fileUpload('transcript', [
			'maxSize' => 5120000,
			'types' => 'txt|doc|docx|docm|odt|pdf|rtf',
			'noRename' => false,
			'dir' => '',
			'success' => function($name, $selected_id) {
			},
			'failure' => function($selected_id, $fileRemoved) {
				if(!isset($_REQUEST['SelectedID'])) return '';

				/* for empty upload fields, when saving a copy of an existing record, copy the original upload field */
				return existing_value('biblio_transcript', 'transcript', $_REQUEST['SelectedID']);
			},
		]),
		'credits' => br2nl(Request::val('credits', '')),
		'ip_rights' => Request::val('ip_rights', ''),
		'team' => Request::val('team', ''),
		'biblio_lead' => Request::val('biblio_lead', ''),
		'data_evaluation' => Request::val('data_evaluation', ''),
	];

	if($data['author_memberID'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'ID de autor': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['bibliography_title'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'T&#237;tulo de texto': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['transcript_title'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'T&#237;tulo de la transcripci&#243;n': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['transcript'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Transcripci&#243;n': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['ip_rights'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Drechos de propiedad intelectual': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}

	// hook: biblio_transcript_before_insert
	if(function_exists('biblio_transcript_before_insert')) {
		$args = [];
		if(!biblio_transcript_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('biblio_transcript', backtick_keys_once($data), $error);
	if($error)
		die("{$error}<br><a href=\"#\" onclick=\"history.go(-1);\">{$Translation['< back']}</a>");

	$recID = db_insert_id(db_link());

	update_calc_fields('biblio_transcript', $recID, calculated_fields()['biblio_transcript']);

	// hook: biblio_transcript_after_insert
	if(function_exists('biblio_transcript_after_insert')) {
		$res = sql("SELECT * FROM `biblio_transcript` WHERE `id`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=[];
		if(!biblio_transcript_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('biblio_transcript', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(!empty($_REQUEST['SelectedID'])) biblio_transcript_copy_children($recID, $_REQUEST['SelectedID']);

	return $recID;
}

function biblio_transcript_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function biblio_transcript_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('biblio_transcript', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: biblio_transcript_before_delete
	if(function_exists('biblio_transcript_before_delete')) {
		$args = [];
		if(!biblio_transcript_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	// child table: biblio_token
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `biblio_token` WHERE `transcript`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_token', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_token', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: biblio_code_invivo
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `biblio_code_invivo` WHERE `transcript`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_invivo', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_invivo', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: biblio_code_demo
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `biblio_code_demo` WHERE `transcript`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_demo', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'biblio_code_demo', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_chr_scene
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_chr_scene` WHERE `transcript`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_chr_scene', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_chr_scene', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_storyline
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_storyline` WHERE `transcript`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_storyline', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_storyline', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_encounter
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_encounter` WHERE `transcriptA`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_encounter
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_encounter` WHERE `transcriptB`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_encounter', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: bio_code_herme
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `bio_code_herme` WHERE `transcript`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_code_herme', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'bio_code_herme', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	// child table: assignments
	$res = sql("SELECT `id` FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);
	$id = db_fetch_row($res);
	$rires = sql("SELECT COUNT(1) FROM `assignments` WHERE `biblio_trascript`='" . makeSafe($id[0]) . "'", $eo);
	$rirow = db_fetch_row($rires);
	if($rirow[0] && !$AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation["couldn't delete"];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'assignments', $RetMsg);
		return $RetMsg;
	} elseif($rirow[0] && $AllowDeleteOfParents && !$skipChecks) {
		$RetMsg = $Translation['confirm delete'];
		$RetMsg = str_replace('<RelatedRecords>', $rirow[0], $RetMsg);
		$RetMsg = str_replace('<TableName>', 'assignments', $RetMsg);
		$RetMsg = str_replace('<Delete>', '<input type="button" class="button" value="' . $Translation['yes'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '&delete_x=1&confirmed=1\';">', $RetMsg);
		$RetMsg = str_replace('<Cancel>', '<input type="button" class="button" value="' . $Translation[ 'no'] . '" onClick="window.location = \'biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . '\';">', $RetMsg);
		return $RetMsg;
	}

	sql("DELETE FROM `biblio_transcript` WHERE `id`='{$selected_id}'", $eo);

	// hook: biblio_transcript_after_delete
	if(function_exists('biblio_transcript_after_delete')) {
		$args = [];
		biblio_transcript_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='biblio_transcript' AND `pkValue`='{$selected_id}'", $eo);
}

function biblio_transcript_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('biblio_transcript', $selected_id, 'edit')) return false;

	$data = [
		'author' => Request::lookup('author_memberID'),
		'author_memberID' => Request::val('author_memberID', ''),
		'bibliography_id' => Request::lookup('bibliography_title'),
		'bibliography_title' => Request::val('bibliography_title', ''),
		'transcript_title' => Request::val('transcript_title', ''),
		'transcript' => Request::fileUpload('transcript', [
			'maxSize' => 5120000,
			'types' => 'txt|doc|docx|docm|odt|pdf|rtf',
			'noRename' => false,
			'dir' => '',
			'id' => $selected_id,
			'success' => function($name, $selected_id) {
			},
			'failure' => function($selected_id, $fileRemoved) {
				if($fileRemoved) return '';
				return existing_value('biblio_transcript', 'transcript', $selected_id);
			},
		]),
		'credits' => br2nl(Request::val('credits', '')),
		'ip_rights' => Request::val('ip_rights', ''),
		'team' => Request::val('team', ''),
		'biblio_lead' => Request::val('biblio_lead', ''),
		'data_evaluation' => Request::val('data_evaluation', ''),
	];

	if($data['author_memberID'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'ID de autor': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['bibliography_title'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'T&#237;tulo de texto': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['transcript_title'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'T&#237;tulo de la transcripci&#243;n': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['transcript'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Transcripci&#243;n': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	if($data['ip_rights'] === '') {
		echo StyleSheet() . "\n\n<div class=\"alert alert-danger\">{$Translation['error:']} 'Drechos de propiedad intelectual': {$Translation['field not null']}<br><br>";
		echo '<a href="" onclick="history.go(-1); return false;">' . $Translation['< back'] . '</a></div>';
		exit;
	}
	// get existing values
	$old_data = getRecord('biblio_transcript', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: biblio_transcript_before_update
	if(function_exists('biblio_transcript_before_update')) {
		$args = ['old_data' => $old_data];
		if(!biblio_transcript_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'biblio_transcript', 
		backtick_keys_once($set), 
		['`id`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="biblio_transcript_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	$eo = ['silentErrors' => true];

	update_calc_fields('biblio_transcript', $data['selectedID'], calculated_fields()['biblio_transcript']);

	// hook: biblio_transcript_after_update
	if(function_exists('biblio_transcript_after_update')) {
		$res = sql("SELECT * FROM `biblio_transcript` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['id'];
		$args = ['old_data' => $old_data];
		if(!biblio_transcript_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "' WHERE `tableName`='biblio_transcript' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);
}

function biblio_transcript_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm = getTablePermissions('biblio_transcript');
	if(!$arrPerm['insert'] && $selected_id=='') { return ''; }
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != '') {
		$dvprint = true;
	}

	$filterer_author_memberID = thisOr($_REQUEST['filterer_author_memberID'], '');
	$filterer_bibliography_title = thisOr($_REQUEST['filterer_bibliography_title'], '');
	$filterer_ip_rights = thisOr($_REQUEST['filterer_ip_rights'], '');
	$filterer_team = thisOr($_REQUEST['filterer_team'], '');
	$filterer_biblio_lead = thisOr($_REQUEST['filterer_biblio_lead'], '');
	$filterer_data_evaluation = thisOr($_REQUEST['filterer_data_evaluation'], '');

	// populate filterers, starting from children to grand-parents
	if($filterer_bibliography_title && !$filterer_author_memberID) $filterer_author_memberID = sqlValue("select author_id from biblio_doc where id='" . makeSafe($filterer_bibliography_title) . "'");
	if($filterer_biblio_lead && !$filterer_team) $filterer_team = sqlValue("select team from biblio_analyst where id='" . makeSafe($filterer_biblio_lead) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: author_memberID
	$combo_author_memberID = new DataCombo;
	// combobox: bibliography_title, filterable by: author_memberID
	$combo_bibliography_title = new DataCombo;
	// combobox: ip_rights
	$combo_ip_rights = new DataCombo;
	// combobox: team
	$combo_team = new DataCombo;
	// combobox: biblio_lead, filterable by: team
	$combo_biblio_lead = new DataCombo;
	// combobox: data_evaluation
	$combo_data_evaluation = new DataCombo;

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm['view']) return '';

		// mm: who is the owner?
		$ownerGroupID = sqlValue("SELECT `groupID` FROM `membership_userrecords` WHERE `tableName`='biblio_transcript' AND `pkValue`='" . makeSafe($selected_id) . "'");
		$ownerMemberID = sqlValue("SELECT LCASE(`memberID`) FROM `membership_userrecords` WHERE `tableName`='biblio_transcript' AND `pkValue`='" . makeSafe($selected_id) . "'");

		if($arrPerm['view'] == 1 && getLoggedMemberID() != $ownerMemberID) return '';
		if($arrPerm['view'] == 2 && getLoggedGroupID() != $ownerGroupID) return '';

		// can edit?
		$AllowUpdate = 0;
		if(($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3) {
			$AllowUpdate = 1;
		}

		$res = sql("SELECT * FROM `biblio_transcript` WHERE `id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'biblio_transcript_view.php', false);
		}
		$combo_author_memberID->SelectedData = $row['author_memberID'];
		$combo_bibliography_title->SelectedData = $row['bibliography_title'];
		$combo_ip_rights->SelectedData = $row['ip_rights'];
		$combo_team->SelectedData = $row['team'];
		$combo_biblio_lead->SelectedData = $row['biblio_lead'];
		$combo_data_evaluation->SelectedData = $row['data_evaluation'];
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input(datalist_db_encoding);
		$row = $hc->xss_clean($row); /* sanitize data */
	} else {
		$combo_author_memberID->SelectedData = $filterer_author_memberID;
		$combo_bibliography_title->SelectedData = $filterer_bibliography_title;
		$combo_ip_rights->SelectedData = $filterer_ip_rights;
		$combo_team->SelectedData = $filterer_team;
		$combo_biblio_lead->SelectedData = $filterer_biblio_lead;
		$combo_data_evaluation->SelectedData = $filterer_data_evaluation;
	}
	$combo_author_memberID->HTML = '<span id="author_memberID-container' . $rnd1 . '"></span><input type="hidden" name="author_memberID" id="author_memberID' . $rnd1 . '" value="' . html_attr($combo_author_memberID->SelectedData) . '">';
	$combo_author_memberID->MatchText = '<span id="author_memberID-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author_memberID" id="author_memberID' . $rnd1 . '" value="' . html_attr($combo_author_memberID->SelectedData) . '">';
	$combo_bibliography_title->HTML = '<span id="bibliography_title-container' . $rnd1 . '"></span><input type="hidden" name="bibliography_title" id="bibliography_title' . $rnd1 . '" value="' . html_attr($combo_bibliography_title->SelectedData) . '">';
	$combo_bibliography_title->MatchText = '<span id="bibliography_title-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliography_title" id="bibliography_title' . $rnd1 . '" value="' . html_attr($combo_bibliography_title->SelectedData) . '">';
	$combo_ip_rights->HTML = '<span id="ip_rights-container' . $rnd1 . '"></span><input type="hidden" name="ip_rights" id="ip_rights' . $rnd1 . '" value="' . html_attr($combo_ip_rights->SelectedData) . '">';
	$combo_ip_rights->MatchText = '<span id="ip_rights-container-readonly' . $rnd1 . '"></span><input type="hidden" name="ip_rights" id="ip_rights' . $rnd1 . '" value="' . html_attr($combo_ip_rights->SelectedData) . '">';
	$combo_team->HTML = '<span id="team-container' . $rnd1 . '"></span><input type="hidden" name="team" id="team' . $rnd1 . '" value="' . html_attr($combo_team->SelectedData) . '">';
	$combo_team->MatchText = '<span id="team-container-readonly' . $rnd1 . '"></span><input type="hidden" name="team" id="team' . $rnd1 . '" value="' . html_attr($combo_team->SelectedData) . '">';
	$combo_biblio_lead->HTML = '<span id="biblio_lead-container' . $rnd1 . '"></span><input type="hidden" name="biblio_lead" id="biblio_lead' . $rnd1 . '" value="' . html_attr($combo_biblio_lead->SelectedData) . '">';
	$combo_biblio_lead->MatchText = '<span id="biblio_lead-container-readonly' . $rnd1 . '"></span><input type="hidden" name="biblio_lead" id="biblio_lead' . $rnd1 . '" value="' . html_attr($combo_biblio_lead->SelectedData) . '">';
	$combo_data_evaluation->HTML = '<span id="data_evaluation-container' . $rnd1 . '"></span><input type="hidden" name="data_evaluation" id="data_evaluation' . $rnd1 . '" value="' . html_attr($combo_data_evaluation->SelectedData) . '">';
	$combo_data_evaluation->MatchText = '<span id="data_evaluation-container-readonly' . $rnd1 . '"></span><input type="hidden" name="data_evaluation" id="data_evaluation' . $rnd1 . '" value="' . html_attr($combo_data_evaluation->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_author_memberID__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author_memberID'] : $filterer_author_memberID); ?>"};
		AppGini.current_bibliography_title__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliography_title'] : $filterer_bibliography_title); ?>"};
		AppGini.current_ip_rights__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['ip_rights'] : $filterer_ip_rights); ?>"};
		AppGini.current_team__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['team'] : $filterer_team); ?>"};
		AppGini.current_biblio_lead__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['biblio_lead'] : $filterer_biblio_lead); ?>"};
		AppGini.current_data_evaluation__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['data_evaluation'] : $filterer_data_evaluation); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(author_memberID_reload__RAND__) == 'function') author_memberID_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliography_title_reload__RAND__) == \'function\') bibliography_title_reload__RAND__(AppGini.current_author_memberID__RAND__.value);' : ''); ?>
				if(typeof(ip_rights_reload__RAND__) == 'function') ip_rights_reload__RAND__();
				if(typeof(team_reload__RAND__) == 'function') team_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(biblio_lead_reload__RAND__) == \'function\') biblio_lead_reload__RAND__(AppGini.current_team__RAND__.value);' : ''); ?>
				if(typeof(data_evaluation_reload__RAND__) == 'function') data_evaluation_reload__RAND__();
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function author_memberID_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#author_memberID-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_author_memberID__RAND__.value, t: 'biblio_transcript', f: 'author_memberID' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="author_memberID"]').val(resp.results[0].id);
							$j('[id=author_memberID-container-readonly__RAND__]').html('<span id="author_memberID-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_id_reload__RAND__) == 'function') bibliography_id_reload__RAND__(AppGini.current_author_memberID__RAND__.value);
						if(typeof(bibliography_title_reload__RAND__) == 'function') bibliography_title_reload__RAND__(AppGini.current_author_memberID__RAND__.value);

							if(typeof(author_memberID_update_autofills__RAND__) == 'function') author_memberID_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_transcript', f: 'author_memberID' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_author_memberID__RAND__.value = e.added.id;
				AppGini.current_author_memberID__RAND__.text = e.added.text;
				$j('[name="author_memberID"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(bibliography_id_reload__RAND__) == 'function') bibliography_id_reload__RAND__(AppGini.current_author_memberID__RAND__.value);
						if(typeof(bibliography_title_reload__RAND__) == 'function') bibliography_title_reload__RAND__(AppGini.current_author_memberID__RAND__.value);

				if(typeof(author_memberID_update_autofills__RAND__) == 'function') author_memberID_update_autofills__RAND__();
			});

			if(!$j("#author_memberID-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_author_memberID__RAND__.value, t: 'biblio_transcript', f: 'author_memberID' },
					success: function(resp) {
						$j('[name="author_memberID"]').val(resp.results[0].id);
						$j('[id=author_memberID-container-readonly__RAND__]').html('<span id="author_memberID-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

						if(typeof(author_memberID_update_autofills__RAND__) == 'function') author_memberID_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_author_memberID__RAND__.value, t: 'biblio_transcript', f: 'author_memberID' },
				success: function(resp) {
					$j('[id=author_memberID-container__RAND__], [id=author_memberID-container-readonly__RAND__]').html('<span id="author_memberID-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_author_view_parent]').hide(); } else { $j('.btn[id=biblio_author_view_parent]').show(); }

					if(typeof(author_memberID_update_autofills__RAND__) == 'function') author_memberID_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function bibliography_title_reload__RAND__(filterer_author_memberID) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#bibliography_title-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_author_memberID: filterer_author_memberID, id: AppGini.current_bibliography_title__RAND__.value, t: 'biblio_transcript', f: 'bibliography_title' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="bibliography_title"]').val(resp.results[0].id);
							$j('[id=bibliography_title-container-readonly__RAND__]').html('<span id="bibliography_title-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }


							if(typeof(bibliography_title_update_autofills__RAND__) == 'function') bibliography_title_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_author_memberID: filterer_author_memberID, s: term, p: page, t: 'biblio_transcript', f: 'bibliography_title' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_bibliography_title__RAND__.value = e.added.id;
				AppGini.current_bibliography_title__RAND__.text = e.added.text;
				$j('[name="bibliography_title"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }


				if(typeof(bibliography_title_update_autofills__RAND__) == 'function') bibliography_title_update_autofills__RAND__();
			});

			if(!$j("#bibliography_title-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_bibliography_title__RAND__.value, t: 'biblio_transcript', f: 'bibliography_title' },
					success: function(resp) {
						$j('[name="bibliography_title"]').val(resp.results[0].id);
						$j('[id=bibliography_title-container-readonly__RAND__]').html('<span id="bibliography_title-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(bibliography_title_update_autofills__RAND__) == 'function') bibliography_title_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_bibliography_title__RAND__.value, t: 'biblio_transcript', f: 'bibliography_title' },
				success: function(resp) {
					$j('[id=bibliography_title-container__RAND__], [id=bibliography_title-container-readonly__RAND__]').html('<span id="bibliography_title-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

					if(typeof(bibliography_title_update_autofills__RAND__) == 'function') bibliography_title_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function ip_rights_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#ip_rights-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_ip_rights__RAND__.value, t: 'biblio_transcript', f: 'ip_rights' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="ip_rights"]').val(resp.results[0].id);
							$j('[id=ip_rights-container-readonly__RAND__]').html('<span id="ip_rights-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }


							if(typeof(ip_rights_update_autofills__RAND__) == 'function') ip_rights_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_transcript', f: 'ip_rights' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_ip_rights__RAND__.value = e.added.id;
				AppGini.current_ip_rights__RAND__.text = e.added.text;
				$j('[name="ip_rights"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }


				if(typeof(ip_rights_update_autofills__RAND__) == 'function') ip_rights_update_autofills__RAND__();
			});

			if(!$j("#ip_rights-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_ip_rights__RAND__.value, t: 'biblio_transcript', f: 'ip_rights' },
					success: function(resp) {
						$j('[name="ip_rights"]').val(resp.results[0].id);
						$j('[id=ip_rights-container-readonly__RAND__]').html('<span id="ip_rights-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }

						if(typeof(ip_rights_update_autofills__RAND__) == 'function') ip_rights_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_ip_rights__RAND__.value, t: 'biblio_transcript', f: 'ip_rights' },
				success: function(resp) {
					$j('[id=ip_rights-container__RAND__], [id=ip_rights-container-readonly__RAND__]').html('<span id="ip_rights-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_rights_view_parent]').hide(); } else { $j('.btn[id=class_rights_view_parent]').show(); }

					if(typeof(ip_rights_update_autofills__RAND__) == 'function') ip_rights_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function team_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#team-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_team__RAND__.value, t: 'biblio_transcript', f: 'team' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="team"]').val(resp.results[0].id);
							$j('[id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

						if(typeof(biblio_lead_reload__RAND__) == 'function') biblio_lead_reload__RAND__(AppGini.current_team__RAND__.value);

							if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_transcript', f: 'team' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_team__RAND__.value = e.added.id;
				AppGini.current_team__RAND__.text = e.added.text;
				$j('[name="team"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

						if(typeof(biblio_lead_reload__RAND__) == 'function') biblio_lead_reload__RAND__(AppGini.current_team__RAND__.value);

				if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
			});

			if(!$j("#team-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_team__RAND__.value, t: 'biblio_transcript', f: 'team' },
					success: function(resp) {
						$j('[name="team"]').val(resp.results[0].id);
						$j('[id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

						if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_team__RAND__.value, t: 'biblio_transcript', f: 'team' },
				success: function(resp) {
					$j('[id=team-container__RAND__], [id=team-container-readonly__RAND__]').html('<span id="team-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_team_view_parent]').hide(); } else { $j('.btn[id=biblio_team_view_parent]').show(); }

					if(typeof(team_update_autofills__RAND__) == 'function') team_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function biblio_lead_reload__RAND__(filterer_team) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#biblio_lead-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_team: filterer_team, id: AppGini.current_biblio_lead__RAND__.value, t: 'biblio_transcript', f: 'biblio_lead' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="biblio_lead"]').val(resp.results[0].id);
							$j('[id=biblio_lead-container-readonly__RAND__]').html('<span id="biblio_lead-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }


							if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_team: filterer_team, s: term, p: page, t: 'biblio_transcript', f: 'biblio_lead' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_biblio_lead__RAND__.value = e.added.id;
				AppGini.current_biblio_lead__RAND__.text = e.added.text;
				$j('[name="biblio_lead"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }


				if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
			});

			if(!$j("#biblio_lead-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_biblio_lead__RAND__.value, t: 'biblio_transcript', f: 'biblio_lead' },
					success: function(resp) {
						$j('[name="biblio_lead"]').val(resp.results[0].id);
						$j('[id=biblio_lead-container-readonly__RAND__]').html('<span id="biblio_lead-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }

						if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_biblio_lead__RAND__.value, t: 'biblio_transcript', f: 'biblio_lead' },
				success: function(resp) {
					$j('[id=biblio_lead-container__RAND__], [id=biblio_lead-container-readonly__RAND__]').html('<span id="biblio_lead-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_analyst_view_parent]').hide(); } else { $j('.btn[id=biblio_analyst_view_parent]').show(); }

					if(typeof(biblio_lead_update_autofills__RAND__) == 'function') biblio_lead_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function data_evaluation_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#data_evaluation-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_data_evaluation__RAND__.value, t: 'biblio_transcript', f: 'data_evaluation' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="data_evaluation"]').val(resp.results[0].id);
							$j('[id=data_evaluation-container-readonly__RAND__]').html('<span id="data_evaluation-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }


							if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'biblio_transcript', f: 'data_evaluation' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_data_evaluation__RAND__.value = e.added.id;
				AppGini.current_data_evaluation__RAND__.text = e.added.text;
				$j('[name="data_evaluation"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }


				if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
			});

			if(!$j("#data_evaluation-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_data_evaluation__RAND__.value, t: 'biblio_transcript', f: 'data_evaluation' },
					success: function(resp) {
						$j('[name="data_evaluation"]').val(resp.results[0].id);
						$j('[id=data_evaluation-container-readonly__RAND__]').html('<span id="data_evaluation-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }

						if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_data_evaluation__RAND__.value, t: 'biblio_transcript', f: 'data_evaluation' },
				success: function(resp) {
					$j('[id=data_evaluation-container__RAND__], [id=data_evaluation-container-readonly__RAND__]').html('<span id="data_evaluation-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=class_evaluation_view_parent]').hide(); } else { $j('.btn[id=class_evaluation_view_parent]').show(); }

					if(typeof(data_evaluation_update_autofills__RAND__) == 'function') data_evaluation_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/biblio_transcript_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/biblio_transcript_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert) {
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return biblio_transcript_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return biblio_transcript_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return biblio_transcript_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly .= "\tjQuery('#author_memberID').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_memberID_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography_title').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliography_title_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcript_title').replaceWith('<div class=\"form-control-static\" id=\"transcript_title\">' + (jQuery('#transcript_title').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#transcript').replaceWith('<div class=\"form-control-static\" id=\"transcript\">' + (jQuery('#transcript').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#transcript, #transcript-edit-link').hide();\n";
		$jsReadOnly .= "\tjQuery('#credits').replaceWith('<div class=\"form-control-static\" id=\"credits\">' + (jQuery('#credits').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#ip_rights').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#ip_rights_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#team').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#team_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#biblio_lead').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#biblio_lead_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#data_evaluation').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#data_evaluation_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif($AllowInsert) {
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(author_memberID)%%>', $combo_author_memberID->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(author_memberID)%%>', $combo_author_memberID->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(author_memberID)%%>', urlencode($combo_author_memberID->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(bibliography_title)%%>', $combo_bibliography_title->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(bibliography_title)%%>', $combo_bibliography_title->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(bibliography_title)%%>', urlencode($combo_bibliography_title->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(ip_rights)%%>', $combo_ip_rights->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(ip_rights)%%>', $combo_ip_rights->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(ip_rights)%%>', urlencode($combo_ip_rights->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(team)%%>', $combo_team->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(team)%%>', $combo_team->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(team)%%>', urlencode($combo_team->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(biblio_lead)%%>', $combo_biblio_lead->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(biblio_lead)%%>', $combo_biblio_lead->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(biblio_lead)%%>', urlencode($combo_biblio_lead->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(data_evaluation)%%>', $combo_data_evaluation->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(data_evaluation)%%>', $combo_data_evaluation->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(data_evaluation)%%>', urlencode($combo_data_evaluation->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array('author_memberID' => array('biblio_author', 'ID de autor'), 'bibliography_title' => array('biblio_doc', 'T&#237;tulo de texto'), 'ip_rights' => array('class_rights', 'Drechos de propiedad intelectual'), 'team' => array('biblio_team', 'Equipo bibliogr&#225;fico'), 'biblio_lead' => array('biblio_analyst', 'Transcriptora principal'), 'data_evaluation' => array('class_evaluation', 'Evaluaci&#243;n de datos'), );
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(author_memberID)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(bibliography_title)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(transcript_title)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(transcript)%%>', ($noUploads ? '' : "<div>{$Translation['upload image']}</div>" . '<i class="glyphicon glyphicon-remove text-danger clear-upload hidden"></i> <input type="file" name="transcript" id="transcript" data-filetypes="txt|doc|docx|docm|odt|pdf|rtf" data-maxsize="5120000" accept=".txt,.doc,.docx,.docm,.odt,.pdf,.rtf">'), $templateCode);
	if($AllowUpdate && $row['transcript'] != '') {
		$templateCode = str_replace('<%%REMOVEFILE(transcript)%%>', '<br><input type="checkbox" name="transcript_remove" id="transcript_remove" value="1"> <label for="transcript_remove" style="color: red; font-weight: bold;">'.$Translation['remove image'].'</label>', $templateCode);
	} else {
		$templateCode = str_replace('<%%REMOVEFILE(transcript)%%>', '', $templateCode);
	}
	$templateCode = str_replace('<%%UPLOADFILE(credits)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(ip_rights)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(team)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(biblio_lead)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(data_evaluation)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(author_memberID)%%>', safe_html($urow['author_memberID']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(author_memberID)%%>', html_attr($row['author_memberID']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_memberID)%%>', urlencode($urow['author_memberID']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(bibliography_title)%%>', safe_html($urow['bibliography_title']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(bibliography_title)%%>', html_attr($row['bibliography_title']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography_title)%%>', urlencode($urow['bibliography_title']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(transcript_title)%%>', safe_html($urow['transcript_title']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(transcript_title)%%>', html_attr($row['transcript_title']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript_title)%%>', urlencode($urow['transcript_title']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', safe_html($urow['transcript']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(transcript)%%>', html_attr($row['transcript']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode($urow['transcript']), $templateCode);
		if($dvprint || (!$AllowUpdate && !$AllowInsert)) {
			$templateCode = str_replace('<%%VALUE(credits)%%>', safe_html($urow['credits']), $templateCode);
		} else {
			$templateCode = str_replace('<%%VALUE(credits)%%>', html_attr($row['credits']), $templateCode);
		}
		$templateCode = str_replace('<%%URLVALUE(credits)%%>', urlencode($urow['credits']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(ip_rights)%%>', safe_html($urow['ip_rights']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(ip_rights)%%>', html_attr($row['ip_rights']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(ip_rights)%%>', urlencode($urow['ip_rights']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(team)%%>', safe_html($urow['team']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(team)%%>', html_attr($row['team']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(team)%%>', urlencode($urow['team']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(biblio_lead)%%>', safe_html($urow['biblio_lead']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(biblio_lead)%%>', html_attr($row['biblio_lead']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(biblio_lead)%%>', urlencode($urow['biblio_lead']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(data_evaluation)%%>', safe_html($urow['data_evaluation']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(data_evaluation)%%>', html_attr($row['data_evaluation']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(data_evaluation)%%>', urlencode($urow['data_evaluation']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(author_memberID)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_memberID)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(bibliography_title)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliography_title)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(transcript_title)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript_title)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(transcript)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcript)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(credits)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(credits)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(ip_rights)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(ip_rights)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(team)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(team)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(biblio_lead)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(biblio_lead)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(data_evaluation)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(data_evaluation)%%>', urlencode(''), $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
			$templateCode.="\n\tif(document.getElementById('transcriptEdit')) { document.getElementById('transcriptEdit').style.display='inline'; }";
			$templateCode.="\n\tif(document.getElementById('transcriptEditLink')) { document.getElementById('transcriptEditLink').style.display='none'; }";
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';

	$templateCode .= "\tauthor_memberID_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'biblio_transcript_autofill.php?rnd1=$rnd1&mfk=author_memberID&id=' + encodeURIComponent('".addslashes($row['author_memberID'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'biblio_transcript_autofill.php?rnd1=$rnd1&mfk=author_memberID&id=' + encodeURIComponent(AppGini.current_author_memberID{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#author_memberID$rnd1').prop('disabled', true); \$j('#author_memberIDLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#author_memberID$rnd1').prop('disabled', false); " : "\$j('#author_memberID$rnd1').prop('disabled', true); ")."\$j('#author_memberIDLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#author_memberID_caption').length) \$j('#author_memberID_caption').click(function() { author_memberID_update_autofills$rnd1(); });\n";

	$templateCode .= "\tbibliography_title_update_autofills$rnd1 = function() {\n";
	$templateCode .= "\t\t\$j.ajax({\n";
	if($dvprint) {
		$templateCode .= "\t\t\turl: 'biblio_transcript_autofill.php?rnd1=$rnd1&mfk=bibliography_title&id=' + encodeURIComponent('".addslashes($row['bibliography_title'])."'),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET'\n";
	} else {
		$templateCode .= "\t\t\turl: 'biblio_transcript_autofill.php?rnd1=$rnd1&mfk=bibliography_title&id=' + encodeURIComponent(AppGini.current_bibliography_title{$rnd1}.value),\n";
		$templateCode .= "\t\t\tcontentType: 'application/x-www-form-urlencoded; charset=" . datalist_db_encoding . "',\n";
		$templateCode .= "\t\t\ttype: 'GET',\n";
		$templateCode .= "\t\t\tbeforeSend: function() { \$j('#bibliography_title$rnd1').prop('disabled', true); \$j('#bibliography_titleLoading').html('<img src=loading.gif align=top>'); },\n";
		$templateCode .= "\t\t\tcomplete: function() { " . (($arrPerm[1] || (($arrPerm[3] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm[3] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm[3] == 3)) ? "\$j('#bibliography_title$rnd1').prop('disabled', false); " : "\$j('#bibliography_title$rnd1').prop('disabled', true); ")."\$j('#bibliography_titleLoading').html(''); \$j(window).resize(); }\n";
	}
	$templateCode .= "\t\t});\n";
	$templateCode .= "\t};\n";
	if(!$dvprint) $templateCode .= "\tif(\$j('#bibliography_title_caption').length) \$j('#bibliography_title_caption').click(function() { bibliography_title_update_autofills$rnd1(); });\n";


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('biblio_transcript');
	if($selected_id) {
		$jdata = get_joined_record('biblio_transcript', $selected_id);
		if($jdata === false) $jdata = get_defaults('biblio_transcript');
		$rdata = $row;
	}
	$templateCode .= loadView('biblio_transcript-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: biblio_transcript_dv
	if(function_exists('biblio_transcript_dv')) {
		$args=[];
		biblio_transcript_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}