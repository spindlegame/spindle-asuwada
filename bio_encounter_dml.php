<?php

// Data functions (insert, update, delete, form) for table bio_encounter

// This script and data application were generated by AppGini 5.94
// Download AppGini for free from https://bigprof.com/appgini/download/

function bio_encounter_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('bio_encounter');
	if(!$arrPerm['insert']) return false;

	$data = [
		'authorA' => Request::val('authorA', ''),
		'author_nameA' => Request::val('author_nameA', ''),
		'bibliographyA' => Request::val('bibliographyA', ''),
		'transcriptA' => Request::val('transcriptA', ''),
		'tokenA' => Request::val('tokenA', ''),
		'sceneA' => Request::val('sceneA', ''),
		'authorB' => Request::val('authorB', ''),
		'authornameB' => Request::val('authornameB', ''),
		'bibliographyB' => Request::val('bibliographyB', ''),
		'transcriptB' => Request::val('transcriptB', ''),
		'tokenB' => Request::val('tokenB', ''),
		'sceneB' => Request::val('sceneB', ''),
		'relation_description' => br2nl(Request::val('relation_description', '')),
		'type' => Request::val('type', ''),
		'conflicttype' => Request::val('conflicttype', ''),
		'story_scene' => Request::val('story_scene', ''),
		'nd_color' => Request::val('nd_color', ''),
		'nd_width' => Request::val('nd_width', ''),
		'nd_style' => Request::val('nd_style', ''),
		'nd_opacity' => Request::val('nd_opacity', ''),
		'nd_visibility' => Request::val('nd_visibility', ''),
		'lbl_lable' => Request::val('lbl_lable', ''),
		'lbl_color' => Request::val('lbl_color', ''),
		'lbl_size' => Request::val('lbl_size', ''),
	];


	// hook: bio_encounter_before_insert
	if(function_exists('bio_encounter_before_insert')) {
		$args = [];
		if(!bio_encounter_before_insert($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$error = '';
	// set empty fields to NULL
	$data = array_map(function($v) { return ($v === '' ? NULL : $v); }, $data);
	insert('bio_encounter', backtick_keys_once($data), $error);
	if($error)
		die("{$error}<br><a href=\"#\" onclick=\"history.go(-1);\">{$Translation['< back']}</a>");

	$recID = db_insert_id(db_link());

	update_calc_fields('bio_encounter', $recID, calculated_fields()['bio_encounter']);

	// hook: bio_encounter_after_insert
	if(function_exists('bio_encounter_after_insert')) {
		$res = sql("SELECT * FROM `bio_encounter` WHERE `id`='" . makeSafe($recID, false) . "' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) {
			$data = array_map('makeSafe', $row);
		}
		$data['selectedID'] = makeSafe($recID, false);
		$args=[];
		if(!bio_encounter_after_insert($data, getMemberInfo(), $args)) { return $recID; }
	}

	// mm: save ownership data
	set_record_owner('bio_encounter', $recID, getLoggedMemberID());

	// if this record is a copy of another record, copy children if applicable
	if(!empty($_REQUEST['SelectedID'])) bio_encounter_copy_children($recID, $_REQUEST['SelectedID']);

	return $recID;
}

function bio_encounter_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);

	// launch requests, asynchronously
	curl_batch($requests);
}

function bio_encounter_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('bio_encounter', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: bio_encounter_before_delete
	if(function_exists('bio_encounter_before_delete')) {
		$args = [];
		if(!bio_encounter_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: '' 
			);
	}

	sql("DELETE FROM `bio_encounter` WHERE `id`='{$selected_id}'", $eo);

	// hook: bio_encounter_after_delete
	if(function_exists('bio_encounter_after_delete')) {
		$args = [];
		bio_encounter_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='bio_encounter' AND `pkValue`='{$selected_id}'", $eo);
}

function bio_encounter_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('bio_encounter', $selected_id, 'edit')) return false;

	$data = [
		'authorA' => Request::val('authorA', ''),
		'author_nameA' => Request::val('author_nameA', ''),
		'bibliographyA' => Request::val('bibliographyA', ''),
		'transcriptA' => Request::val('transcriptA', ''),
		'tokenA' => Request::val('tokenA', ''),
		'sceneA' => Request::val('sceneA', ''),
		'authorB' => Request::val('authorB', ''),
		'authornameB' => Request::val('authornameB', ''),
		'bibliographyB' => Request::val('bibliographyB', ''),
		'transcriptB' => Request::val('transcriptB', ''),
		'tokenB' => Request::val('tokenB', ''),
		'sceneB' => Request::val('sceneB', ''),
		'relation_description' => br2nl(Request::val('relation_description', '')),
		'type' => Request::val('type', ''),
		'conflicttype' => Request::val('conflicttype', ''),
		'story_scene' => Request::val('story_scene', ''),
		'nd_color' => Request::val('nd_color', ''),
		'nd_width' => Request::val('nd_width', ''),
		'nd_style' => Request::val('nd_style', ''),
		'nd_opacity' => Request::val('nd_opacity', ''),
		'nd_visibility' => Request::val('nd_visibility', ''),
		'lbl_lable' => Request::val('lbl_lable', ''),
		'lbl_color' => Request::val('lbl_color', ''),
		'lbl_size' => Request::val('lbl_size', ''),
	];

	// get existing values
	$old_data = getRecord('bio_encounter', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: bio_encounter_before_update
	if(function_exists('bio_encounter_before_update')) {
		$args = ['old_data' => $old_data];
		if(!bio_encounter_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'bio_encounter', 
		backtick_keys_once($set), 
		['`id`' => $selected_id], 
		$error_message
	)) {
		echo $error_message;
		echo '<a href="bio_encounter_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	$eo = ['silentErrors' => true];

	update_calc_fields('bio_encounter', $data['selectedID'], calculated_fields()['bio_encounter']);

	// hook: bio_encounter_after_update
	if(function_exists('bio_encounter_after_update')) {
		$res = sql("SELECT * FROM `bio_encounter` WHERE `id`='{$data['selectedID']}' LIMIT 1", $eo);
		if($row = db_fetch_assoc($res)) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['id'];
		$args = ['old_data' => $old_data];
		if(!bio_encounter_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update ownership data
	sql("UPDATE `membership_userrecords` SET `dateUpdated`='" . time() . "' WHERE `tableName`='bio_encounter' AND `pkValue`='" . makeSafe($selected_id) . "'", $eo);
}

function bio_encounter_form($selected_id = '', $AllowUpdate = 1, $AllowInsert = 1, $AllowDelete = 1, $ShowCancel = 0, $TemplateDV = '', $TemplateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selected_id. If $selected_id
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;

	// mm: get table permissions
	$arrPerm = getTablePermissions('bio_encounter');
	if(!$arrPerm['insert'] && $selected_id=='') { return ''; }
	$AllowInsert = ($arrPerm['insert'] ? true : false);
	// print preview?
	$dvprint = false;
	if($selected_id && $_REQUEST['dvprint_x'] != '') {
		$dvprint = true;
	}

	$filterer_authorA = thisOr($_REQUEST['filterer_authorA'], '');
	$filterer_author_nameA = thisOr($_REQUEST['filterer_author_nameA'], '');
	$filterer_bibliographyA = thisOr($_REQUEST['filterer_bibliographyA'], '');
	$filterer_transcriptA = thisOr($_REQUEST['filterer_transcriptA'], '');
	$filterer_tokenA = thisOr($_REQUEST['filterer_tokenA'], '');
	$filterer_sceneA = thisOr($_REQUEST['filterer_sceneA'], '');
	$filterer_authorB = thisOr($_REQUEST['filterer_authorB'], '');
	$filterer_authornameB = thisOr($_REQUEST['filterer_authornameB'], '');
	$filterer_bibliographyB = thisOr($_REQUEST['filterer_bibliographyB'], '');
	$filterer_transcriptB = thisOr($_REQUEST['filterer_transcriptB'], '');
	$filterer_tokenB = thisOr($_REQUEST['filterer_tokenB'], '');
	$filterer_sceneB = thisOr($_REQUEST['filterer_sceneB'], '');

	// populate filterers, starting from children to grand-parents
	if($filterer_bibliographyA && !$filterer_authorA) $filterer_authorA = sqlValue("select  from biblio_doc where id='" . makeSafe($filterer_bibliographyA) . "'");
	if($filterer_transcriptA && !$filterer_authorA) $filterer_authorA = sqlValue("select  from biblio_transcript where id='" . makeSafe($filterer_transcriptA) . "'");
	if($filterer_transcriptA && !$filterer_bibliographyA) $filterer_bibliographyA = sqlValue("select bibliography_title from biblio_transcript where id='" . makeSafe($filterer_transcriptA) . "'");
	if($filterer_tokenA && !$filterer_authorA) $filterer_authorA = sqlValue("select  from biblio_token where id='" . makeSafe($filterer_tokenA) . "'");
	if($filterer_tokenA && !$filterer_bibliographyA) $filterer_bibliographyA = sqlValue("select bibliography from biblio_token where id='" . makeSafe($filterer_tokenA) . "'");
	if($filterer_tokenA && !$filterer_transcriptA) $filterer_transcriptA = sqlValue("select transcript from biblio_token where id='" . makeSafe($filterer_tokenA) . "'");
	if($filterer_sceneA && !$filterer_authorA) $filterer_authorA = sqlValue("select  from bio_chr_scene where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_sceneA && !$filterer_bibliographyA) $filterer_bibliographyA = sqlValue("select bibliography from bio_chr_scene where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_sceneA && !$filterer_transcriptA) $filterer_transcriptA = sqlValue("select transcript from bio_chr_scene where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_sceneA && !$filterer_tokenA) $filterer_tokenA = sqlValue("select token from bio_chr_scene where id='" . makeSafe($filterer_sceneA) . "'");
	if($filterer_bibliographyB && !$filterer_authorB) $filterer_authorB = sqlValue("select  from biblio_doc where id='" . makeSafe($filterer_bibliographyB) . "'");
	if($filterer_transcriptB && !$filterer_authorB) $filterer_authorB = sqlValue("select  from biblio_transcript where id='" . makeSafe($filterer_transcriptB) . "'");
	if($filterer_tokenB && !$filterer_authorB) $filterer_authorB = sqlValue("select  from biblio_token where id='" . makeSafe($filterer_tokenB) . "'");

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: authorA
	$combo_authorA = new DataCombo;
	// combobox: author_nameA
	$combo_author_nameA = new DataCombo;
	// combobox: bibliographyA, filterable by: authorA
	$combo_bibliographyA = new DataCombo;
	// combobox: transcriptA, filterable by: authorA,bibliographyA
	$combo_transcriptA = new DataCombo;
	// combobox: tokenA, filterable by: authorA,bibliographyA,transcriptA
	$combo_tokenA = new DataCombo;
	// combobox: sceneA, filterable by: authorA,bibliographyA,transcriptA,tokenA
	$combo_sceneA = new DataCombo;
	// combobox: authorB
	$combo_authorB = new DataCombo;
	// combobox: authornameB
	$combo_authornameB = new DataCombo;
	// combobox: bibliographyB, filterable by: authorB
	$combo_bibliographyB = new DataCombo;
	// combobox: transcriptB, filterable by: authorB
	$combo_transcriptB = new DataCombo;
	// combobox: tokenB, filterable by: authorB
	$combo_tokenB = new DataCombo;
	// combobox: sceneB
	$combo_sceneB = new DataCombo;

	if($selected_id) {
		// mm: check member permissions
		if(!$arrPerm['view']) return '';

		// mm: who is the owner?
		$ownerGroupID = sqlValue("SELECT `groupID` FROM `membership_userrecords` WHERE `tableName`='bio_encounter' AND `pkValue`='" . makeSafe($selected_id) . "'");
		$ownerMemberID = sqlValue("SELECT LCASE(`memberID`) FROM `membership_userrecords` WHERE `tableName`='bio_encounter' AND `pkValue`='" . makeSafe($selected_id) . "'");

		if($arrPerm['view'] == 1 && getLoggedMemberID() != $ownerMemberID) return '';
		if($arrPerm['view'] == 2 && getLoggedGroupID() != $ownerGroupID) return '';

		// can edit?
		$AllowUpdate = 0;
		if(($arrPerm['edit'] == 1 && $ownerMemberID == getLoggedMemberID()) || ($arrPerm['edit'] == 2 && $ownerGroupID == getLoggedGroupID()) || $arrPerm['edit'] == 3) {
			$AllowUpdate = 1;
		}

		$res = sql("SELECT * FROM `bio_encounter` WHERE `id`='" . makeSafe($selected_id) . "'", $eo);
		if(!($row = db_fetch_array($res))) {
			return error_message($Translation['No records found'], 'bio_encounter_view.php', false);
		}
		$combo_authorA->SelectedData = $row['authorA'];
		$combo_author_nameA->SelectedData = $row['author_nameA'];
		$combo_bibliographyA->SelectedData = $row['bibliographyA'];
		$combo_transcriptA->SelectedData = $row['transcriptA'];
		$combo_tokenA->SelectedData = $row['tokenA'];
		$combo_sceneA->SelectedData = $row['sceneA'];
		$combo_authorB->SelectedData = $row['authorB'];
		$combo_authornameB->SelectedData = $row['authornameB'];
		$combo_bibliographyB->SelectedData = $row['bibliographyB'];
		$combo_transcriptB->SelectedData = $row['transcriptB'];
		$combo_tokenB->SelectedData = $row['tokenB'];
		$combo_sceneB->SelectedData = $row['sceneB'];
		$urow = $row; /* unsanitized data */
		$hc = new CI_Input(datalist_db_encoding);
		$row = $hc->xss_clean($row); /* sanitize data */
	} else {
		$combo_authorA->SelectedData = $filterer_authorA;
		$combo_author_nameA->SelectedData = $filterer_author_nameA;
		$combo_bibliographyA->SelectedData = $filterer_bibliographyA;
		$combo_transcriptA->SelectedData = $filterer_transcriptA;
		$combo_tokenA->SelectedData = $filterer_tokenA;
		$combo_sceneA->SelectedData = $filterer_sceneA;
		$combo_authorB->SelectedData = $filterer_authorB;
		$combo_authornameB->SelectedData = $filterer_authornameB;
		$combo_bibliographyB->SelectedData = $filterer_bibliographyB;
		$combo_transcriptB->SelectedData = $filterer_transcriptB;
		$combo_tokenB->SelectedData = $filterer_tokenB;
		$combo_sceneB->SelectedData = $filterer_sceneB;
	}
	$combo_authorA->HTML = '<span id="authorA-container' . $rnd1 . '"></span><input type="hidden" name="authorA" id="authorA' . $rnd1 . '" value="' . html_attr($combo_authorA->SelectedData) . '">';
	$combo_authorA->MatchText = '<span id="authorA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="authorA" id="authorA' . $rnd1 . '" value="' . html_attr($combo_authorA->SelectedData) . '">';
	$combo_author_nameA->HTML = '<span id="author_nameA-container' . $rnd1 . '"></span><input type="hidden" name="author_nameA" id="author_nameA' . $rnd1 . '" value="' . html_attr($combo_author_nameA->SelectedData) . '">';
	$combo_author_nameA->MatchText = '<span id="author_nameA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="author_nameA" id="author_nameA' . $rnd1 . '" value="' . html_attr($combo_author_nameA->SelectedData) . '">';
	$combo_bibliographyA->HTML = '<span id="bibliographyA-container' . $rnd1 . '"></span><input type="hidden" name="bibliographyA" id="bibliographyA' . $rnd1 . '" value="' . html_attr($combo_bibliographyA->SelectedData) . '">';
	$combo_bibliographyA->MatchText = '<span id="bibliographyA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliographyA" id="bibliographyA' . $rnd1 . '" value="' . html_attr($combo_bibliographyA->SelectedData) . '">';
	$combo_transcriptA->HTML = '<span id="transcriptA-container' . $rnd1 . '"></span><input type="hidden" name="transcriptA" id="transcriptA' . $rnd1 . '" value="' . html_attr($combo_transcriptA->SelectedData) . '">';
	$combo_transcriptA->MatchText = '<span id="transcriptA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcriptA" id="transcriptA' . $rnd1 . '" value="' . html_attr($combo_transcriptA->SelectedData) . '">';
	$combo_tokenA->HTML = '<span id="tokenA-container' . $rnd1 . '"></span><input type="hidden" name="tokenA" id="tokenA' . $rnd1 . '" value="' . html_attr($combo_tokenA->SelectedData) . '">';
	$combo_tokenA->MatchText = '<span id="tokenA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="tokenA" id="tokenA' . $rnd1 . '" value="' . html_attr($combo_tokenA->SelectedData) . '">';
	$combo_sceneA->HTML = '<span id="sceneA-container' . $rnd1 . '"></span><input type="hidden" name="sceneA" id="sceneA' . $rnd1 . '" value="' . html_attr($combo_sceneA->SelectedData) . '">';
	$combo_sceneA->MatchText = '<span id="sceneA-container-readonly' . $rnd1 . '"></span><input type="hidden" name="sceneA" id="sceneA' . $rnd1 . '" value="' . html_attr($combo_sceneA->SelectedData) . '">';
	$combo_authorB->HTML = '<span id="authorB-container' . $rnd1 . '"></span><input type="hidden" name="authorB" id="authorB' . $rnd1 . '" value="' . html_attr($combo_authorB->SelectedData) . '">';
	$combo_authorB->MatchText = '<span id="authorB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="authorB" id="authorB' . $rnd1 . '" value="' . html_attr($combo_authorB->SelectedData) . '">';
	$combo_authornameB->HTML = '<span id="authornameB-container' . $rnd1 . '"></span><input type="hidden" name="authornameB" id="authornameB' . $rnd1 . '" value="' . html_attr($combo_authornameB->SelectedData) . '">';
	$combo_authornameB->MatchText = '<span id="authornameB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="authornameB" id="authornameB' . $rnd1 . '" value="' . html_attr($combo_authornameB->SelectedData) . '">';
	$combo_bibliographyB->HTML = '<span id="bibliographyB-container' . $rnd1 . '"></span><input type="hidden" name="bibliographyB" id="bibliographyB' . $rnd1 . '" value="' . html_attr($combo_bibliographyB->SelectedData) . '">';
	$combo_bibliographyB->MatchText = '<span id="bibliographyB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="bibliographyB" id="bibliographyB' . $rnd1 . '" value="' . html_attr($combo_bibliographyB->SelectedData) . '">';
	$combo_transcriptB->HTML = '<span id="transcriptB-container' . $rnd1 . '"></span><input type="hidden" name="transcriptB" id="transcriptB' . $rnd1 . '" value="' . html_attr($combo_transcriptB->SelectedData) . '">';
	$combo_transcriptB->MatchText = '<span id="transcriptB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="transcriptB" id="transcriptB' . $rnd1 . '" value="' . html_attr($combo_transcriptB->SelectedData) . '">';
	$combo_tokenB->HTML = '<span id="tokenB-container' . $rnd1 . '"></span><input type="hidden" name="tokenB" id="tokenB' . $rnd1 . '" value="' . html_attr($combo_tokenB->SelectedData) . '">';
	$combo_tokenB->MatchText = '<span id="tokenB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="tokenB" id="tokenB' . $rnd1 . '" value="' . html_attr($combo_tokenB->SelectedData) . '">';
	$combo_sceneB->HTML = '<span id="sceneB-container' . $rnd1 . '"></span><input type="hidden" name="sceneB" id="sceneB' . $rnd1 . '" value="' . html_attr($combo_sceneB->SelectedData) . '">';
	$combo_sceneB->MatchText = '<span id="sceneB-container-readonly' . $rnd1 . '"></span><input type="hidden" name="sceneB" id="sceneB' . $rnd1 . '" value="' . html_attr($combo_sceneB->SelectedData) . '">';

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_authorA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['authorA'] : $filterer_authorA); ?>"};
		AppGini.current_author_nameA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['author_nameA'] : $filterer_author_nameA); ?>"};
		AppGini.current_bibliographyA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliographyA'] : $filterer_bibliographyA); ?>"};
		AppGini.current_transcriptA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcriptA'] : $filterer_transcriptA); ?>"};
		AppGini.current_tokenA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['tokenA'] : $filterer_tokenA); ?>"};
		AppGini.current_sceneA__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['sceneA'] : $filterer_sceneA); ?>"};
		AppGini.current_authorB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['authorB'] : $filterer_authorB); ?>"};
		AppGini.current_authornameB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['authornameB'] : $filterer_authornameB); ?>"};
		AppGini.current_bibliographyB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['bibliographyB'] : $filterer_bibliographyB); ?>"};
		AppGini.current_transcriptB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['transcriptB'] : $filterer_transcriptB); ?>"};
		AppGini.current_tokenB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['tokenB'] : $filterer_tokenB); ?>"};
		AppGini.current_sceneB__RAND__ = { text: "", value: "<?php echo addslashes($selected_id ? $urow['sceneB'] : $filterer_sceneB); ?>"};

		jQuery(function() {
			setTimeout(function() {
				if(typeof(authorA_reload__RAND__) == 'function') authorA_reload__RAND__();
				if(typeof(author_nameA_reload__RAND__) == 'function') author_nameA_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliographyA_reload__RAND__) == \'function\') bibliographyA_reload__RAND__(AppGini.current_authorA__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcriptA_reload__RAND__) == \'function\') transcriptA_reload__RAND__(AppGini.current_authorA__RAND__.value, AppGini.current_bibliographyA__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(tokenA_reload__RAND__) == \'function\') tokenA_reload__RAND__(AppGini.current_authorA__RAND__.value, AppGini.current_bibliographyA__RAND__.value, AppGini.current_transcriptA__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(sceneA_reload__RAND__) == \'function\') sceneA_reload__RAND__(AppGini.current_authorA__RAND__.value, AppGini.current_bibliographyA__RAND__.value, AppGini.current_transcriptA__RAND__.value, AppGini.current_tokenA__RAND__.value);' : ''); ?>
				if(typeof(authorB_reload__RAND__) == 'function') authorB_reload__RAND__();
				if(typeof(authornameB_reload__RAND__) == 'function') authornameB_reload__RAND__();
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(bibliographyB_reload__RAND__) == \'function\') bibliographyB_reload__RAND__(AppGini.current_authorB__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(transcriptB_reload__RAND__) == \'function\') transcriptB_reload__RAND__(AppGini.current_authorB__RAND__.value);' : ''); ?>
				<?php echo (!$AllowUpdate || $dvprint ? 'if(typeof(tokenB_reload__RAND__) == \'function\') tokenB_reload__RAND__(AppGini.current_authorB__RAND__.value);' : ''); ?>
				if(typeof(sceneB_reload__RAND__) == 'function') sceneB_reload__RAND__();
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function authorA_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#authorA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_authorA__RAND__.value, t: 'bio_encounter', f: 'authorA' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="authorA"]').val(resp.results[0].id);
							$j('[id=authorA-container-readonly__RAND__]').html('<span id="authorA-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(bibliographyA_reload__RAND__) == 'function') bibliographyA_reload__RAND__(AppGini.current_authorA__RAND__.value);

							if(typeof(authorA_update_autofills__RAND__) == 'function') authorA_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_encounter', f: 'authorA' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_authorA__RAND__.value = e.added.id;
				AppGini.current_authorA__RAND__.text = e.added.text;
				$j('[name="authorA"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(bibliographyA_reload__RAND__) == 'function') bibliographyA_reload__RAND__(AppGini.current_authorA__RAND__.value);

				if(typeof(authorA_update_autofills__RAND__) == 'function') authorA_update_autofills__RAND__();
			});

			if(!$j("#authorA-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_authorA__RAND__.value, t: 'bio_encounter', f: 'authorA' },
					success: function(resp) {
						$j('[name="authorA"]').val(resp.results[0].id);
						$j('[id=authorA-container-readonly__RAND__]').html('<span id="authorA-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(authorA_update_autofills__RAND__) == 'function') authorA_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_authorA__RAND__.value, t: 'bio_encounter', f: 'authorA' },
				success: function(resp) {
					$j('[id=authorA-container__RAND__], [id=authorA-container-readonly__RAND__]').html('<span id="authorA-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

					if(typeof(authorA_update_autofills__RAND__) == 'function') authorA_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function author_nameA_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#author_nameA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_author_nameA__RAND__.value, t: 'bio_encounter', f: 'author_nameA' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="author_nameA"]').val(resp.results[0].id);
							$j('[id=author_nameA-container-readonly__RAND__]').html('<span id="author_nameA-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }


							if(typeof(author_nameA_update_autofills__RAND__) == 'function') author_nameA_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_encounter', f: 'author_nameA' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_author_nameA__RAND__.value = e.added.id;
				AppGini.current_author_nameA__RAND__.text = e.added.text;
				$j('[name="author_nameA"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }


				if(typeof(author_nameA_update_autofills__RAND__) == 'function') author_nameA_update_autofills__RAND__();
			});

			if(!$j("#author_nameA-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_author_nameA__RAND__.value, t: 'bio_encounter', f: 'author_nameA' },
					success: function(resp) {
						$j('[name="author_nameA"]').val(resp.results[0].id);
						$j('[id=author_nameA-container-readonly__RAND__]').html('<span id="author_nameA-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(author_nameA_update_autofills__RAND__) == 'function') author_nameA_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_author_nameA__RAND__.value, t: 'bio_encounter', f: 'author_nameA' },
				success: function(resp) {
					$j('[id=author_nameA-container__RAND__], [id=author_nameA-container-readonly__RAND__]').html('<span id="author_nameA-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

					if(typeof(author_nameA_update_autofills__RAND__) == 'function') author_nameA_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function bibliographyA_reload__RAND__(filterer_authorA) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#bibliographyA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, id: AppGini.current_bibliographyA__RAND__.value, t: 'bio_encounter', f: 'bibliographyA' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="bibliographyA"]').val(resp.results[0].id);
							$j('[id=bibliographyA-container-readonly__RAND__]').html('<span id="bibliographyA-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcriptA_reload__RAND__) == 'function') transcriptA_reload__RAND__($j('#authorA').val(), AppGini.current_bibliographyA__RAND__.value);

							if(typeof(bibliographyA_update_autofills__RAND__) == 'function') bibliographyA_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_authorA: filterer_authorA, s: term, p: page, t: 'bio_encounter', f: 'bibliographyA' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_bibliographyA__RAND__.value = e.added.id;
				AppGini.current_bibliographyA__RAND__.text = e.added.text;
				$j('[name="bibliographyA"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(transcriptA_reload__RAND__) == 'function') transcriptA_reload__RAND__($j('#authorA').val(), AppGini.current_bibliographyA__RAND__.value);

				if(typeof(bibliographyA_update_autofills__RAND__) == 'function') bibliographyA_update_autofills__RAND__();
			});

			if(!$j("#bibliographyA-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_bibliographyA__RAND__.value, t: 'bio_encounter', f: 'bibliographyA' },
					success: function(resp) {
						$j('[name="bibliographyA"]').val(resp.results[0].id);
						$j('[id=bibliographyA-container-readonly__RAND__]').html('<span id="bibliographyA-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(bibliographyA_update_autofills__RAND__) == 'function') bibliographyA_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_bibliographyA__RAND__.value, t: 'bio_encounter', f: 'bibliographyA' },
				success: function(resp) {
					$j('[id=bibliographyA-container__RAND__], [id=bibliographyA-container-readonly__RAND__]').html('<span id="bibliographyA-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

					if(typeof(bibliographyA_update_autofills__RAND__) == 'function') bibliographyA_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function transcriptA_reload__RAND__(filterer_authorA, filterer_bibliographyA) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#transcriptA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, id: AppGini.current_transcriptA__RAND__.value, t: 'bio_encounter', f: 'transcriptA' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="transcriptA"]').val(resp.results[0].id);
							$j('[id=transcriptA-container-readonly__RAND__]').html('<span id="transcriptA-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(tokenA_reload__RAND__) == 'function') tokenA_reload__RAND__($j('#authorA').val(), $j('#bibliographyA').val(), AppGini.current_transcriptA__RAND__.value);

							if(typeof(transcriptA_update_autofills__RAND__) == 'function') transcriptA_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, s: term, p: page, t: 'bio_encounter', f: 'transcriptA' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_transcriptA__RAND__.value = e.added.id;
				AppGini.current_transcriptA__RAND__.text = e.added.text;
				$j('[name="transcriptA"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(tokenA_reload__RAND__) == 'function') tokenA_reload__RAND__($j('#authorA').val(), $j('#bibliographyA').val(), AppGini.current_transcriptA__RAND__.value);

				if(typeof(transcriptA_update_autofills__RAND__) == 'function') transcriptA_update_autofills__RAND__();
			});

			if(!$j("#transcriptA-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_transcriptA__RAND__.value, t: 'bio_encounter', f: 'transcriptA' },
					success: function(resp) {
						$j('[name="transcriptA"]').val(resp.results[0].id);
						$j('[id=transcriptA-container-readonly__RAND__]').html('<span id="transcriptA-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(transcriptA_update_autofills__RAND__) == 'function') transcriptA_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_transcriptA__RAND__.value, t: 'bio_encounter', f: 'transcriptA' },
				success: function(resp) {
					$j('[id=transcriptA-container__RAND__], [id=transcriptA-container-readonly__RAND__]').html('<span id="transcriptA-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

					if(typeof(transcriptA_update_autofills__RAND__) == 'function') transcriptA_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function tokenA_reload__RAND__(filterer_authorA, filterer_bibliographyA, filterer_transcriptA) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#tokenA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, id: AppGini.current_tokenA__RAND__.value, t: 'bio_encounter', f: 'tokenA' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="tokenA"]').val(resp.results[0].id);
							$j('[id=tokenA-container-readonly__RAND__]').html('<span id="tokenA-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(sceneA_reload__RAND__) == 'function') sceneA_reload__RAND__($j('#authorA').val(), $j('#bibliographyA').val(), $j('#transcriptA').val(), AppGini.current_tokenA__RAND__.value);

							if(typeof(tokenA_update_autofills__RAND__) == 'function') tokenA_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, s: term, p: page, t: 'bio_encounter', f: 'tokenA' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_tokenA__RAND__.value = e.added.id;
				AppGini.current_tokenA__RAND__.text = e.added.text;
				$j('[name="tokenA"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(sceneA_reload__RAND__) == 'function') sceneA_reload__RAND__($j('#authorA').val(), $j('#bibliographyA').val(), $j('#transcriptA').val(), AppGini.current_tokenA__RAND__.value);

				if(typeof(tokenA_update_autofills__RAND__) == 'function') tokenA_update_autofills__RAND__();
			});

			if(!$j("#tokenA-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_tokenA__RAND__.value, t: 'bio_encounter', f: 'tokenA' },
					success: function(resp) {
						$j('[name="tokenA"]').val(resp.results[0].id);
						$j('[id=tokenA-container-readonly__RAND__]').html('<span id="tokenA-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(tokenA_update_autofills__RAND__) == 'function') tokenA_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_tokenA__RAND__.value, t: 'bio_encounter', f: 'tokenA' },
				success: function(resp) {
					$j('[id=tokenA-container__RAND__], [id=tokenA-container-readonly__RAND__]').html('<span id="tokenA-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

					if(typeof(tokenA_update_autofills__RAND__) == 'function') tokenA_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function sceneA_reload__RAND__(filterer_authorA, filterer_bibliographyA, filterer_transcriptA, filterer_tokenA) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#sceneA-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, filterer_tokenA: filterer_tokenA, id: AppGini.current_sceneA__RAND__.value, t: 'bio_encounter', f: 'sceneA' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="sceneA"]').val(resp.results[0].id);
							$j('[id=sceneA-container-readonly__RAND__]').html('<span id="sceneA-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }


							if(typeof(sceneA_update_autofills__RAND__) == 'function') sceneA_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_authorA: filterer_authorA, filterer_bibliographyA: filterer_bibliographyA, filterer_transcriptA: filterer_transcriptA, filterer_tokenA: filterer_tokenA, s: term, p: page, t: 'bio_encounter', f: 'sceneA' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_sceneA__RAND__.value = e.added.id;
				AppGini.current_sceneA__RAND__.text = e.added.text;
				$j('[name="sceneA"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }


				if(typeof(sceneA_update_autofills__RAND__) == 'function') sceneA_update_autofills__RAND__();
			});

			if(!$j("#sceneA-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_sceneA__RAND__.value, t: 'bio_encounter', f: 'sceneA' },
					success: function(resp) {
						$j('[name="sceneA"]').val(resp.results[0].id);
						$j('[id=sceneA-container-readonly__RAND__]').html('<span id="sceneA-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }

						if(typeof(sceneA_update_autofills__RAND__) == 'function') sceneA_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_sceneA__RAND__.value, t: 'bio_encounter', f: 'sceneA' },
				success: function(resp) {
					$j('[id=sceneA-container__RAND__], [id=sceneA-container-readonly__RAND__]').html('<span id="sceneA-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }

					if(typeof(sceneA_update_autofills__RAND__) == 'function') sceneA_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function authorB_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#authorB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_authorB__RAND__.value, t: 'bio_encounter', f: 'authorB' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="authorB"]').val(resp.results[0].id);
							$j('[id=authorB-container-readonly__RAND__]').html('<span id="authorB-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(bibliographyB_reload__RAND__) == 'function') bibliographyB_reload__RAND__(AppGini.current_authorB__RAND__.value);
						if(typeof(transcriptB_reload__RAND__) == 'function') transcriptB_reload__RAND__(AppGini.current_authorB__RAND__.value);
						if(typeof(tokenB_reload__RAND__) == 'function') tokenB_reload__RAND__(AppGini.current_authorB__RAND__.value);

							if(typeof(authorB_update_autofills__RAND__) == 'function') authorB_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_encounter', f: 'authorB' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_authorB__RAND__.value = e.added.id;
				AppGini.current_authorB__RAND__.text = e.added.text;
				$j('[name="authorB"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(bibliographyB_reload__RAND__) == 'function') bibliographyB_reload__RAND__(AppGini.current_authorB__RAND__.value);
						if(typeof(transcriptB_reload__RAND__) == 'function') transcriptB_reload__RAND__(AppGini.current_authorB__RAND__.value);
						if(typeof(tokenB_reload__RAND__) == 'function') tokenB_reload__RAND__(AppGini.current_authorB__RAND__.value);

				if(typeof(authorB_update_autofills__RAND__) == 'function') authorB_update_autofills__RAND__();
			});

			if(!$j("#authorB-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_authorB__RAND__.value, t: 'bio_encounter', f: 'authorB' },
					success: function(resp) {
						$j('[name="authorB"]').val(resp.results[0].id);
						$j('[id=authorB-container-readonly__RAND__]').html('<span id="authorB-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(authorB_update_autofills__RAND__) == 'function') authorB_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_authorB__RAND__.value, t: 'bio_encounter', f: 'authorB' },
				success: function(resp) {
					$j('[id=authorB-container__RAND__], [id=authorB-container-readonly__RAND__]').html('<span id="authorB-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

					if(typeof(authorB_update_autofills__RAND__) == 'function') authorB_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function authornameB_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#authornameB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_authornameB__RAND__.value, t: 'bio_encounter', f: 'authornameB' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="authornameB"]').val(resp.results[0].id);
							$j('[id=authornameB-container-readonly__RAND__]').html('<span id="authornameB-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }


							if(typeof(authornameB_update_autofills__RAND__) == 'function') authornameB_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_encounter', f: 'authornameB' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_authornameB__RAND__.value = e.added.id;
				AppGini.current_authornameB__RAND__.text = e.added.text;
				$j('[name="authornameB"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }


				if(typeof(authornameB_update_autofills__RAND__) == 'function') authornameB_update_autofills__RAND__();
			});

			if(!$j("#authornameB-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_authornameB__RAND__.value, t: 'bio_encounter', f: 'authornameB' },
					success: function(resp) {
						$j('[name="authornameB"]').val(resp.results[0].id);
						$j('[id=authornameB-container-readonly__RAND__]').html('<span id="authornameB-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

						if(typeof(authornameB_update_autofills__RAND__) == 'function') authornameB_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_authornameB__RAND__.value, t: 'bio_encounter', f: 'authornameB' },
				success: function(resp) {
					$j('[id=authornameB-container__RAND__], [id=authornameB-container-readonly__RAND__]').html('<span id="authornameB-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=game_agent_view_parent]').hide(); } else { $j('.btn[id=game_agent_view_parent]').show(); }

					if(typeof(authornameB_update_autofills__RAND__) == 'function') authornameB_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function bibliographyB_reload__RAND__(filterer_authorB) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#bibliographyB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorB: filterer_authorB, id: AppGini.current_bibliographyB__RAND__.value, t: 'bio_encounter', f: 'bibliographyB' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="bibliographyB"]').val(resp.results[0].id);
							$j('[id=bibliographyB-container-readonly__RAND__]').html('<span id="bibliographyB-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }


							if(typeof(bibliographyB_update_autofills__RAND__) == 'function') bibliographyB_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_authorB: filterer_authorB, s: term, p: page, t: 'bio_encounter', f: 'bibliographyB' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_bibliographyB__RAND__.value = e.added.id;
				AppGini.current_bibliographyB__RAND__.text = e.added.text;
				$j('[name="bibliographyB"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }


				if(typeof(bibliographyB_update_autofills__RAND__) == 'function') bibliographyB_update_autofills__RAND__();
			});

			if(!$j("#bibliographyB-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_bibliographyB__RAND__.value, t: 'bio_encounter', f: 'bibliographyB' },
					success: function(resp) {
						$j('[name="bibliographyB"]').val(resp.results[0].id);
						$j('[id=bibliographyB-container-readonly__RAND__]').html('<span id="bibliographyB-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

						if(typeof(bibliographyB_update_autofills__RAND__) == 'function') bibliographyB_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_bibliographyB__RAND__.value, t: 'bio_encounter', f: 'bibliographyB' },
				success: function(resp) {
					$j('[id=bibliographyB-container__RAND__], [id=bibliographyB-container-readonly__RAND__]').html('<span id="bibliographyB-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_doc_view_parent]').hide(); } else { $j('.btn[id=biblio_doc_view_parent]').show(); }

					if(typeof(bibliographyB_update_autofills__RAND__) == 'function') bibliographyB_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function transcriptB_reload__RAND__(filterer_authorB) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#transcriptB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorB: filterer_authorB, id: AppGini.current_transcriptB__RAND__.value, t: 'bio_encounter', f: 'transcriptB' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="transcriptB"]').val(resp.results[0].id);
							$j('[id=transcriptB-container-readonly__RAND__]').html('<span id="transcriptB-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }


							if(typeof(transcriptB_update_autofills__RAND__) == 'function') transcriptB_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_authorB: filterer_authorB, s: term, p: page, t: 'bio_encounter', f: 'transcriptB' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_transcriptB__RAND__.value = e.added.id;
				AppGini.current_transcriptB__RAND__.text = e.added.text;
				$j('[name="transcriptB"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }


				if(typeof(transcriptB_update_autofills__RAND__) == 'function') transcriptB_update_autofills__RAND__();
			});

			if(!$j("#transcriptB-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_transcriptB__RAND__.value, t: 'bio_encounter', f: 'transcriptB' },
					success: function(resp) {
						$j('[name="transcriptB"]').val(resp.results[0].id);
						$j('[id=transcriptB-container-readonly__RAND__]').html('<span id="transcriptB-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

						if(typeof(transcriptB_update_autofills__RAND__) == 'function') transcriptB_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_transcriptB__RAND__.value, t: 'bio_encounter', f: 'transcriptB' },
				success: function(resp) {
					$j('[id=transcriptB-container__RAND__], [id=transcriptB-container-readonly__RAND__]').html('<span id="transcriptB-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_transcript_view_parent]').hide(); } else { $j('.btn[id=biblio_transcript_view_parent]').show(); }

					if(typeof(transcriptB_update_autofills__RAND__) == 'function') transcriptB_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function tokenB_reload__RAND__(filterer_authorB) {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#tokenB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { filterer_authorB: filterer_authorB, id: AppGini.current_tokenB__RAND__.value, t: 'bio_encounter', f: 'tokenB' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="tokenB"]').val(resp.results[0].id);
							$j('[id=tokenB-container-readonly__RAND__]').html('<span id="tokenB-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }


							if(typeof(tokenB_update_autofills__RAND__) == 'function') tokenB_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { filterer_authorB: filterer_authorB, s: term, p: page, t: 'bio_encounter', f: 'tokenB' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_tokenB__RAND__.value = e.added.id;
				AppGini.current_tokenB__RAND__.text = e.added.text;
				$j('[name="tokenB"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }


				if(typeof(tokenB_update_autofills__RAND__) == 'function') tokenB_update_autofills__RAND__();
			});

			if(!$j("#tokenB-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_tokenB__RAND__.value, t: 'bio_encounter', f: 'tokenB' },
					success: function(resp) {
						$j('[name="tokenB"]').val(resp.results[0].id);
						$j('[id=tokenB-container-readonly__RAND__]').html('<span id="tokenB-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

						if(typeof(tokenB_update_autofills__RAND__) == 'function') tokenB_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_tokenB__RAND__.value, t: 'bio_encounter', f: 'tokenB' },
				success: function(resp) {
					$j('[id=tokenB-container__RAND__], [id=tokenB-container-readonly__RAND__]').html('<span id="tokenB-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=biblio_token_view_parent]').hide(); } else { $j('.btn[id=biblio_token_view_parent]').show(); }

					if(typeof(tokenB_update_autofills__RAND__) == 'function') tokenB_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
		function sceneB_reload__RAND__() {
		<?php if(($AllowUpdate || $AllowInsert) && !$dvprint) { ?>

			$j("#sceneB-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_sceneB__RAND__.value, t: 'bio_encounter', f: 'sceneB' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="sceneB"]').val(resp.results[0].id);
							$j('[id=sceneB-container-readonly__RAND__]').html('<span id="sceneB-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }


							if(typeof(sceneB_update_autofills__RAND__) == 'function') sceneB_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'bio_encounter', f: 'sceneB' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_sceneB__RAND__.value = e.added.id;
				AppGini.current_sceneB__RAND__.text = e.added.text;
				$j('[name="sceneB"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }


				if(typeof(sceneB_update_autofills__RAND__) == 'function') sceneB_update_autofills__RAND__();
			});

			if(!$j("#sceneB-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_sceneB__RAND__.value, t: 'bio_encounter', f: 'sceneB' },
					success: function(resp) {
						$j('[name="sceneB"]').val(resp.results[0].id);
						$j('[id=sceneB-container-readonly__RAND__]').html('<span id="sceneB-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }

						if(typeof(sceneB_update_autofills__RAND__) == 'function') sceneB_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_sceneB__RAND__.value, t: 'bio_encounter', f: 'sceneB' },
				success: function(resp) {
					$j('[id=sceneB-container__RAND__], [id=sceneB-container-readonly__RAND__]').html('<span id="sceneB-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=bio_chr_scene_view_parent]').hide(); } else { $j('.btn[id=bio_chr_scene_view_parent]').show(); }

					if(typeof(sceneB_update_autofills__RAND__) == 'function') sceneB_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_contents());
	ob_end_clean();


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$TemplateDVP}") ? "./{$TemplateDVP}" : './templates/bio_encounter_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$TemplateDV}") ? "./{$TemplateDV}" : './templates/bio_encounter_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Detail View', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', ($_REQUEST['Embedded'] ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($AllowInsert) {
		if(!$selected_id) $templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1" onclick="return bio_encounter_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1" onclick="return bio_encounter_validateData();"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if($_REQUEST['Embedded']) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = '$j(\'form\').eq(0).attr(\'novalidate\', \'novalidate\'); document.myform.reset(); return true;';
	}

	if($selected_id) {
		if(!$_REQUEST['Embedded']) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" onclick="$j(\'form\').eq(0).prop(\'novalidate\', true); document.myform.reset(); return true;" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($AllowUpdate) {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" onclick="return bio_encounter_validateData();" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		}
		if(($arrPerm[4]==1 && $ownerMemberID==getLoggedMemberID()) || ($arrPerm[4]==2 && $ownerGroupID==getLoggedGroupID()) || $arrPerm[4]==3) { // allow delete?
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" onclick="return confirm(\'' . $Translation['are you sure?'] . '\');" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		} else {
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		}
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', ($ShowCancel ? '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>' : ''), $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(($selected_id && !$AllowUpdate && !$AllowInsert) || (!$selected_id && !$AllowInsert)) {
		$jsReadOnly .= "\tjQuery('#authorA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#authorA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#author_nameA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#author_nameA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#tokenA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#tokenA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#sceneA').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#sceneA_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#authorB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#authorB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#authornameB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#authornameB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#bibliographyB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#transcriptB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#tokenB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#tokenB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#sceneB').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\tjQuery('#sceneB_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\tjQuery('#relation_description').replaceWith('<div class=\"form-control-static\" id=\"relation_description\">' + (jQuery('#relation_description').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#type').replaceWith('<div class=\"form-control-static\" id=\"type\">' + (jQuery('#type').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#conflicttype').replaceWith('<div class=\"form-control-static\" id=\"conflicttype\">' + (jQuery('#conflicttype').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#story_scene').replaceWith('<div class=\"form-control-static\" id=\"story_scene\">' + (jQuery('#story_scene').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#nd_color').replaceWith('<div class=\"form-control-static\" id=\"nd_color\">' + (jQuery('#nd_color').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#nd_width').replaceWith('<div class=\"form-control-static\" id=\"nd_width\">' + (jQuery('#nd_width').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#nd_style').replaceWith('<div class=\"form-control-static\" id=\"nd_style\">' + (jQuery('#nd_style').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#nd_opacity').replaceWith('<div class=\"form-control-static\" id=\"nd_opacity\">' + (jQuery('#nd_opacity').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#nd_visibility').replaceWith('<div class=\"form-control-static\" id=\"nd_visibility\">' + (jQuery('#nd_visibility').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#lbl_lable').replaceWith('<div class=\"form-control-static\" id=\"lbl_lable\">' + (jQuery('#lbl_lable').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#lbl_color').replaceWith('<div class=\"form-control-static\" id=\"lbl_color\">' + (jQuery('#lbl_color').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('#lbl_size').replaceWith('<div class=\"form-control-static\" id=\"lbl_size\">' + (jQuery('#lbl_size').val() || '') + '</div>');\n";
		$jsReadOnly .= "\tjQuery('.select2-container').hide();\n";

		$noUploads = true;
	} elseif($AllowInsert) {
		$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', true);"; // temporarily disable form change handler
			$jsEditable .= "\tjQuery('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(authorA)%%>', $combo_authorA->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(authorA)%%>', $combo_authorA->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(authorA)%%>', urlencode($combo_authorA->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(author_nameA)%%>', $combo_author_nameA->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(author_nameA)%%>', $combo_author_nameA->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(author_nameA)%%>', urlencode($combo_author_nameA->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(bibliographyA)%%>', $combo_bibliographyA->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(bibliographyA)%%>', $combo_bibliographyA->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(bibliographyA)%%>', urlencode($combo_bibliographyA->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(transcriptA)%%>', $combo_transcriptA->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(transcriptA)%%>', $combo_transcriptA->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(transcriptA)%%>', urlencode($combo_transcriptA->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(tokenA)%%>', $combo_tokenA->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(tokenA)%%>', $combo_tokenA->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(tokenA)%%>', urlencode($combo_tokenA->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(sceneA)%%>', $combo_sceneA->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(sceneA)%%>', $combo_sceneA->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(sceneA)%%>', urlencode($combo_sceneA->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(authorB)%%>', $combo_authorB->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(authorB)%%>', $combo_authorB->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(authorB)%%>', urlencode($combo_authorB->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(authornameB)%%>', $combo_authornameB->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(authornameB)%%>', $combo_authornameB->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(authornameB)%%>', urlencode($combo_authornameB->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(bibliographyB)%%>', $combo_bibliographyB->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(bibliographyB)%%>', $combo_bibliographyB->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(bibliographyB)%%>', urlencode($combo_bibliographyB->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(transcriptB)%%>', $combo_transcriptB->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(transcriptB)%%>', $combo_transcriptB->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(transcriptB)%%>', urlencode($combo_transcriptB->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(tokenB)%%>', $combo_tokenB->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(tokenB)%%>', $combo_tokenB->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(tokenB)%%>', urlencode($combo_tokenB->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(sceneB)%%>', $combo_sceneB->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(sceneB)%%>', $combo_sceneB->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(sceneB)%%>', urlencode($combo_sceneB->MatchText), $templateCode);

	/* lookup fields array: 'lookup field name' => array('parent table name', 'lookup field caption') */
	$lookup_fields = array('authorA' => array('game_agent', 'Agent A'), 'author_nameA' => array('game_agent', 'Agent name A'), 'bibliographyA' => array('biblio_doc', 'Bibliography A'), 'transcriptA' => array('biblio_transcript', 'Transcript A'), 'tokenA' => array('biblio_token', 'Token A'), 'sceneA' => array('bio_chr_scene', 'Scene A'), 'authorB' => array('game_agent', 'Agent B'), 'authornameB' => array('game_agent', 'Agent name B'), 'bibliographyB' => array('biblio_doc', 'Bibliography B'), 'transcriptB' => array('biblio_transcript', 'Transcript B'), 'tokenB' => array('biblio_token', 'Token B'), 'sceneB' => array('bio_chr_scene', 'Scene B'), );
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if($pt_perm['view'] || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent hspacer-md" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] && !$_REQUEST['Embedded']) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-success add_new_parent hspacer-md" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus-sign"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(authorA)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(author_nameA)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(bibliographyA)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(transcriptA)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(tokenA)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(sceneA)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(authorB)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(authornameB)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(bibliographyB)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(transcriptB)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(tokenB)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(sceneB)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(relation_description)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(type)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(conflicttype)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(story_scene)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(nd_color)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(nd_width)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(nd_style)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(nd_opacity)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(nd_visibility)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(lbl_lable)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(lbl_color)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(lbl_size)%%>', '', $templateCode);

	// process values
	if($selected_id) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(authorA)%%>', safe_html($urow['authorA']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(authorA)%%>', html_attr($row['authorA']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authorA)%%>', urlencode($urow['authorA']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(author_nameA)%%>', safe_html($urow['author_nameA']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(author_nameA)%%>', html_attr($row['author_nameA']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_nameA)%%>', urlencode($urow['author_nameA']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(bibliographyA)%%>', safe_html($urow['bibliographyA']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(bibliographyA)%%>', html_attr($row['bibliographyA']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliographyA)%%>', urlencode($urow['bibliographyA']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(transcriptA)%%>', safe_html($urow['transcriptA']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(transcriptA)%%>', html_attr($row['transcriptA']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcriptA)%%>', urlencode($urow['transcriptA']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(tokenA)%%>', safe_html($urow['tokenA']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(tokenA)%%>', html_attr($row['tokenA']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tokenA)%%>', urlencode($urow['tokenA']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(sceneA)%%>', safe_html($urow['sceneA']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(sceneA)%%>', html_attr($row['sceneA']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(sceneA)%%>', urlencode($urow['sceneA']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(authorB)%%>', safe_html($urow['authorB']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(authorB)%%>', html_attr($row['authorB']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authorB)%%>', urlencode($urow['authorB']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(authornameB)%%>', safe_html($urow['authornameB']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(authornameB)%%>', html_attr($row['authornameB']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authornameB)%%>', urlencode($urow['authornameB']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(bibliographyB)%%>', safe_html($urow['bibliographyB']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(bibliographyB)%%>', html_attr($row['bibliographyB']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliographyB)%%>', urlencode($urow['bibliographyB']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(transcriptB)%%>', safe_html($urow['transcriptB']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(transcriptB)%%>', html_attr($row['transcriptB']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcriptB)%%>', urlencode($urow['transcriptB']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(tokenB)%%>', safe_html($urow['tokenB']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(tokenB)%%>', html_attr($row['tokenB']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tokenB)%%>', urlencode($urow['tokenB']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(sceneB)%%>', safe_html($urow['sceneB']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(sceneB)%%>', html_attr($row['sceneB']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(sceneB)%%>', urlencode($urow['sceneB']), $templateCode);
		if($dvprint || (!$AllowUpdate && !$AllowInsert)) {
			$templateCode = str_replace('<%%VALUE(relation_description)%%>', safe_html($urow['relation_description']), $templateCode);
		} else {
			$templateCode = str_replace('<%%VALUE(relation_description)%%>', html_attr($row['relation_description']), $templateCode);
		}
		$templateCode = str_replace('<%%URLVALUE(relation_description)%%>', urlencode($urow['relation_description']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(type)%%>', safe_html($urow['type']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(type)%%>', html_attr($row['type']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(type)%%>', urlencode($urow['type']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(conflicttype)%%>', safe_html($urow['conflicttype']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(conflicttype)%%>', html_attr($row['conflicttype']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(conflicttype)%%>', urlencode($urow['conflicttype']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(story_scene)%%>', safe_html($urow['story_scene']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(story_scene)%%>', html_attr($row['story_scene']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story_scene)%%>', urlencode($urow['story_scene']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(nd_color)%%>', safe_html($urow['nd_color']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(nd_color)%%>', html_attr($row['nd_color']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_color)%%>', urlencode($urow['nd_color']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(nd_width)%%>', safe_html($urow['nd_width']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(nd_width)%%>', html_attr($row['nd_width']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_width)%%>', urlencode($urow['nd_width']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(nd_style)%%>', safe_html($urow['nd_style']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(nd_style)%%>', html_attr($row['nd_style']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_style)%%>', urlencode($urow['nd_style']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(nd_opacity)%%>', safe_html($urow['nd_opacity']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(nd_opacity)%%>', html_attr($row['nd_opacity']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_opacity)%%>', urlencode($urow['nd_opacity']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(nd_visibility)%%>', safe_html($urow['nd_visibility']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(nd_visibility)%%>', html_attr($row['nd_visibility']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_visibility)%%>', urlencode($urow['nd_visibility']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(lbl_lable)%%>', safe_html($urow['lbl_lable']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(lbl_lable)%%>', html_attr($row['lbl_lable']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(lbl_lable)%%>', urlencode($urow['lbl_lable']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(lbl_color)%%>', safe_html($urow['lbl_color']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(lbl_color)%%>', html_attr($row['lbl_color']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(lbl_color)%%>', urlencode($urow['lbl_color']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(lbl_size)%%>', safe_html($urow['lbl_size']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(lbl_size)%%>', html_attr($row['lbl_size']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(lbl_size)%%>', urlencode($urow['lbl_size']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(authorA)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authorA)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(author_nameA)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(author_nameA)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(bibliographyA)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliographyA)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(transcriptA)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcriptA)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(tokenA)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tokenA)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(sceneA)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(sceneA)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(authorB)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authorB)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(authornameB)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(authornameB)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(bibliographyB)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(bibliographyB)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(transcriptB)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(transcriptB)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(tokenB)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(tokenB)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(sceneB)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(sceneB)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(relation_description)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(relation_description)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(type)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(type)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(conflicttype)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(conflicttype)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(story_scene)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(story_scene)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(nd_color)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_color)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(nd_width)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_width)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(nd_style)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_style)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(nd_opacity)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_opacity)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(nd_visibility)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(nd_visibility)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(lbl_lable)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(lbl_lable)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(lbl_color)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(lbl_color)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(lbl_size)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(lbl_size)%%>', urlencode(''), $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if($_REQUEST['dvprint_x'] == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$selected_id) {
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('bio_encounter');
	if($selected_id) {
		$jdata = get_joined_record('bio_encounter', $selected_id);
		if($jdata === false) $jdata = get_defaults('bio_encounter');
		$rdata = $row;
	}
	$templateCode .= loadView('bio_encounter-ajax-cache', array('rdata' => $rdata, 'jdata' => $jdata));

	// hook: bio_encounter_dv
	if(function_exists('bio_encounter_dv')) {
		$args=[];
		bio_encounter_dv(($selected_id ? $selected_id : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}